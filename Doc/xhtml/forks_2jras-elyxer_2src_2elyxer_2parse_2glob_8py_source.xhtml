<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrityPages/SignalIntegrity/App/Help/elyxer-1.2.5/forks/jras-elyxer/src/elyxer/parse/glob.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.13</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_b9fdada3f2e13cef1825d6786bc9035d.xhtml">SignalIntegrityPages</a></li><li class="navelem"><a class="el" href="dir_028a9223bee22939bccc3f6c1a6cb3a3.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_5b686ebfb9be912765538ef193999c48.xhtml">App</a></li><li class="navelem"><a class="el" href="dir_4fd30fa432b1bd9f918b04bf58ad3f14.xhtml">Help</a></li><li class="navelem"><a class="el" href="dir_99d9149e1df89b2e91206bbd6265a65c.xhtml">elyxer-1.2.5</a></li><li class="navelem"><a class="el" href="dir_8eec2e1300d6de011d8246002f659316.xhtml">forks</a></li><li class="navelem"><a class="el" href="dir_48a46efab03d400ddc57ce85017e0eca.xhtml">jras-elyxer</a></li><li class="navelem"><a class="el" href="dir_a68b885dac379979dc7bf40032c2e450.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d5a55205e7b6d77c8572f365e3b0b8be.xhtml">elyxer</a></li><li class="navelem"><a class="el" href="dir_7c6582c2dd704044afa070eb6d6751bd.xhtml">parse</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">glob.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceelyxer_1_1parse_1_1glob.xhtml">    1</a></span>&#160;<span class="comment">#! /usr/bin/env python</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"># -*- coding: utf-8 -*-</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">#   eLyXer -- convert LyX source files to HTML output.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#   Copyright (C) 2009 Alex Fern√°ndez</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#   This program is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#   it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">#   the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">#   (at your option) any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#   This program is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#   GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">#   You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">#   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"># --end--</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"># Alex 20110111</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"># eLyXer globbing of an underlying string.</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1util_1_1trace.xhtml">elyxer.util.trace</a> <span class="keyword">import</span> Trace</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">class </span><a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml">Globable</a>(object):</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;  <span class="stringliteral">&quot;&quot;&quot;A bit of text which can be globbed (lumped together in bits).</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral">  Methods current(), skipcurrent(), checkfor() and isout() have to be</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="stringliteral">  implemented by subclasses.&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml">   33</a></span>&#160;  leavepending = <span class="keyword">False</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad808cd48d7cc66f4744df784bcb2939c">endinglist</a> = EndingList()</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keyword">def </span>checkbytemark(self):</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="stringliteral">&quot;Check for a Unicode byte mark and skip it.&quot;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">if</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a3b632d8950722cef7c91b6a91ed055f1">finished</a>():</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordflow">if</span> ord(self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>()) == 0xfeff:</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a503223d30a41c308dc2a4631b0953466">skipcurrent</a>()</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">def </span>isout(self):</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="stringliteral">&quot;Find out if we are out of the position yet.&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    Trace.error(<span class="stringliteral">&#39;Unimplemented isout()&#39;</span>)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keyword">def </span>current(self):</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="stringliteral">&quot;Return the current character.&quot;</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    Trace.error(<span class="stringliteral">&#39;Unimplemented current()&#39;</span>)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  <span class="keyword">def </span>checkfor(self, string):</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="stringliteral">&quot;Check for the given string in the current position.&quot;</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    Trace.error(<span class="stringliteral">&#39;Unimplemented checkfor()&#39;</span>)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keyword">def </span>finished(self):</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="stringliteral">&quot;Find out if the current text has finished.&quot;</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad715cf94e7e1928560d5c23ee18f9aa6">isout</a>():</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a6a878f97ef0d8a62334eb871cd27a078">leavepending</a>:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad808cd48d7cc66f4744df784bcb2939c">endinglist</a>.checkpending()</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keywordflow">return</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad808cd48d7cc66f4744df784bcb2939c">endinglist</a>.checkin(self)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keyword">def </span>skipcurrent(self):</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="stringliteral">&quot;Return the current character and skip it.&quot;</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    Trace.error(<span class="stringliteral">&#39;Unimplemented skipcurrent()&#39;</span>)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keyword">def </span>glob(self, currentcheck):</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="stringliteral">&quot;Glob a bit of text that satisfies a check on the current char.&quot;</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    glob = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordflow">while</span> <span class="keywordflow">not</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a3b632d8950722cef7c91b6a91ed055f1">finished</a>() <span class="keywordflow">and</span> currentcheck():</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      glob += self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a503223d30a41c308dc2a4631b0953466">skipcurrent</a>()</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">return</span> glob</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  <span class="keyword">def </span>globalpha(self):</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="stringliteral">&quot;Glob a bit of alpha text&quot;</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keywordflow">return</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a0b78eca3d60b80b9f5f52aa10234788e">glob</a>(<span class="keyword">lambda</span>: self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>().isalpha())</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160; </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  <span class="keyword">def </span>globnumber(self):</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="stringliteral">&quot;Glob a row of digits.&quot;</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="keywordflow">return</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a0b78eca3d60b80b9f5f52aa10234788e">glob</a>(<span class="keyword">lambda</span>: self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>().isdigit())</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  <span class="keyword">def </span>isidentifier(self):</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="stringliteral">&quot;Return if the current character is alphanumeric or _.&quot;</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>().isalnum() <span class="keywordflow">or</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>() == <span class="stringliteral">&#39;_&#39;</span>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160; </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="keyword">def </span>globidentifier(self):</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="stringliteral">&quot;Glob alphanumeric and _ symbols.&quot;</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keywordflow">return</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a0b78eca3d60b80b9f5f52aa10234788e">glob</a>(self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#abae047a6b20e9977001c5454fd541363">isidentifier</a>)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;  <span class="keyword">def </span>isvalue(self):</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="stringliteral">&quot;Return if the current character is a value character:&quot;</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="stringliteral">&quot;not a bracket or a space.&quot;</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>().isspace():</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>() <span class="keywordflow">in</span> <span class="stringliteral">&#39;{}()&#39;</span>:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160; </div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;  <span class="keyword">def </span>globvalue(self):</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="stringliteral">&quot;Glob a value: any symbols but brackets.&quot;</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keywordflow">return</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a0b78eca3d60b80b9f5f52aa10234788e">glob</a>(self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#aa7260fdab67295dc66a65d5ce1ab0cd1">isvalue</a>)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160; </div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;  <span class="keyword">def </span>skipspace(self):</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="stringliteral">&quot;Skip all whitespace at current position.&quot;</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a0b78eca3d60b80b9f5f52aa10234788e">glob</a>(<span class="keyword">lambda</span>: self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>().isspace())</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keyword">def </span>globincluding(self, magicchar):</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="stringliteral">&quot;Glob a bit of text up to (including) the magic char.&quot;</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    glob = self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a0b78eca3d60b80b9f5f52aa10234788e">glob</a>(<span class="keyword">lambda</span>: self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>() != magicchar) + magicchar</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    self.skip(magicchar)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> glob</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  <span class="keyword">def </span>globexcluding(self, excluded):</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="stringliteral">&quot;Glob a bit of text up until (excluding) any excluded character.&quot;</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">return</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a0b78eca3d60b80b9f5f52aa10234788e">glob</a>(<span class="keyword">lambda</span>: self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">current</a>() <span class="keywordflow">not</span> <span class="keywordflow">in</span> excluded)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keyword">def </span>pushending(self, ending, optional = False):</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="stringliteral">&quot;Push a new ending to the bottom&quot;</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad808cd48d7cc66f4744df784bcb2939c">endinglist</a>.add(ending, optional)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  <span class="keyword">def </span>popending(self, expected = None):</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="stringliteral">&quot;Pop the ending found at the current position&quot;</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <span class="keywordflow">if</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad715cf94e7e1928560d5c23ee18f9aa6">isout</a>() <span class="keywordflow">and</span> self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a6a878f97ef0d8a62334eb871cd27a078">leavepending</a>:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;      <span class="keywordflow">return</span> expected</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    ending = self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad808cd48d7cc66f4744df784bcb2939c">endinglist</a>.pop(self)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">if</span> expected <span class="keywordflow">and</span> expected != ending:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      Trace.error(<span class="stringliteral">&#39;Expected ending &#39;</span> + expected + <span class="stringliteral">&#39;, got &#39;</span> + ending)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    self.skip(ending)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;    <span class="keywordflow">return</span> ending</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160; </div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="keyword">def </span>nextending(self):</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="stringliteral">&quot;Return the next ending in the queue.&quot;</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    nextending = self.<a class="code" href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad808cd48d7cc66f4744df784bcb2939c">endinglist</a>.findending(self)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> nextending:</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">return</span> nextending.ending</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="keyword">class </span>EndingList(object):</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="stringliteral">&quot;A list of position endings&quot;</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    self.endings = []</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  <span class="keyword">def </span>add(self, ending, optional = False):</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;    <span class="stringliteral">&quot;Add a new ending to the list&quot;</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    self.endings.append(PositionEnding(ending, optional))</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  <span class="keyword">def </span>pickpending(self, pos):</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="stringliteral">&quot;Pick any pending endings from a parse position.&quot;</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    self.endings += pos.endinglist.endings</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keyword">def </span>checkin(self, pos):</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="stringliteral">&quot;Search for an ending&quot;</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">if</span> self.findending(pos):</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <span class="keyword">def </span>pop(self, pos):</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="stringliteral">&quot;Remove the ending at the current position&quot;</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordflow">if</span> pos.isout():</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;      Trace.error(<span class="stringliteral">&#39;No ending out of bounds&#39;</span>)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;      <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    ending = self.findending(pos)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> ending:</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;      Trace.error(<span class="stringliteral">&#39;No ending at &#39;</span> + pos.current())</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;      <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">for</span> each <span class="keywordflow">in</span> reversed(self.endings):</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      self.endings.remove(each)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;      <span class="keywordflow">if</span> each == ending:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> each.ending</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      <span class="keywordflow">elif</span> <span class="keywordflow">not</span> each.optional:</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        Trace.error(<span class="stringliteral">&#39;Removed non-optional ending &#39;</span> + each)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    Trace.error(<span class="stringliteral">&#39;No endings left&#39;</span>)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  <span class="keyword">def </span>findending(self, pos):</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="stringliteral">&quot;Find the ending at the current position&quot;</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">if</span> len(self.endings) == 0:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keywordflow">for</span> index, ending <span class="keywordflow">in</span> enumerate(reversed(self.endings)):</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      <span class="keywordflow">if</span> ending.checkin(pos):</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordflow">return</span> ending</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      <span class="keywordflow">if</span> <span class="keywordflow">not</span> ending.optional:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160; </div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  <span class="keyword">def </span>checkpending(self):</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="stringliteral">&quot;Check if there are any pending endings&quot;</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordflow">if</span> len(self.endings) != 0:</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;      Trace.error(<span class="stringliteral">&#39;Pending &#39;</span> + unicode(self) + <span class="stringliteral">&#39; left open&#39;</span>)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  <span class="keyword">def </span>__unicode__(self):</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="stringliteral">&quot;Printable representation&quot;</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    string = <span class="stringliteral">&#39;endings [&#39;</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">for</span> ending <span class="keywordflow">in</span> self.endings:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      string += unicode(ending) + <span class="stringliteral">&#39;,&#39;</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">if</span> len(self.endings) &gt; 0:</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      string = string[:-1]</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <span class="keywordflow">return</span> string + <span class="stringliteral">&#39;]&#39;</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160; </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">class </span>PositionEnding(object):</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="stringliteral">&quot;An ending for a parsing position&quot;</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160; </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;  <span class="keyword">def </span>__init__(self, ending, optional):</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    self.ending = ending</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    self.optional = optional</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keyword">def </span>checkin(self, pos):</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="stringliteral">&quot;Check for the ending&quot;</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">return</span> pos.checkfor(self.ending)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keyword">def </span>__unicode__(self):</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="stringliteral">&quot;Printable representation&quot;</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    string = <span class="stringliteral">&#39;Ending &#39;</span> + self.ending</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">if</span> self.optional:</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      string += <span class="stringliteral">&#39; (optional)&#39;</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    <span class="keywordflow">return</span> string</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceelyxer_1_1util_1_1trace_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1util_1_1trace.xhtml">elyxer.util.trace</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2util_2trace_8py_source.xhtml#l00001">trace.py:1</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_ac9bb34dedf123fd1caa89b2f19d2e754"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ac9bb34dedf123fd1caa89b2f19d2e754">elyxer.parse.glob.Globable.current</a></div><div class="ttdeci">def current(self)</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00052">glob.py:52</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_ad808cd48d7cc66f4744df784bcb2939c"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad808cd48d7cc66f4744df784bcb2939c">elyxer.parse.glob.Globable.endinglist</a></div><div class="ttdeci">endinglist</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00038">glob.py:38</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml">elyxer.parse.glob.Globable</a></div><div class="ttdoc">A bit of text which can be globbed (lumped together in bits).</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00033">glob.py:33</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_abae047a6b20e9977001c5454fd541363"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#abae047a6b20e9977001c5454fd541363">elyxer.parse.glob.Globable.isidentifier</a></div><div class="ttdeci">def isidentifier(self)</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00090">glob.py:90</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_a6a878f97ef0d8a62334eb871cd27a078"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a6a878f97ef0d8a62334eb871cd27a078">elyxer.parse.glob.Globable.leavepending</a></div><div class="ttdeci">bool leavepending</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00035">glob.py:35</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_a0b78eca3d60b80b9f5f52aa10234788e"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a0b78eca3d60b80b9f5f52aa10234788e">elyxer.parse.glob.Globable.glob</a></div><div class="ttdeci">def glob(self, currentcheck)</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00075">glob.py:75</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_a503223d30a41c308dc2a4631b0953466"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a503223d30a41c308dc2a4631b0953466">elyxer.parse.glob.Globable.skipcurrent</a></div><div class="ttdeci">def skipcurrent(self)</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00070">glob.py:70</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_aa7260fdab67295dc66a65d5ce1ab0cd1"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#aa7260fdab67295dc66a65d5ce1ab0cd1">elyxer.parse.glob.Globable.isvalue</a></div><div class="ttdeci">def isvalue(self)</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00100">glob.py:100</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_a3b632d8950722cef7c91b6a91ed055f1"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#a3b632d8950722cef7c91b6a91ed055f1">elyxer.parse.glob.Globable.finished</a></div><div class="ttdeci">def finished(self)</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00062">glob.py:62</a></div></div>
<div class="ttc" id="aclasselyxer_1_1parse_1_1glob_1_1Globable_xhtml_ad715cf94e7e1928560d5c23ee18f9aa6"><div class="ttname"><a href="classelyxer_1_1parse_1_1glob_1_1Globable.xhtml#ad715cf94e7e1928560d5c23ee18f9aa6">elyxer.parse.glob.Globable.isout</a></div><div class="ttdeci">def isout(self)</div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2glob_8py_source.xhtml#l00047">glob.py:47</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
