<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Eye/ClockRecovery.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.4.1</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_4c0c236aecfb4f795010765f5a0c499e.xhtml">Eye</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ClockRecovery.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Eye_1_1ClockRecovery.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">ClockRecovery.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2021 Nubis Communications, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018-2020 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform</a> <span class="keyword">import</span> TimeDescriptor,Waveform</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters.xhtml">SignalIntegrity.Lib.TimeDomain.Filters</a> <span class="keyword">import</span> WaveformTrimmer</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">import</span> numpy <span class="keyword">as</span> np</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">from</span> copy <span class="keyword">import</span> deepcopy</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">from</span> scipy <span class="keyword">import</span> interpolate</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1ClockRecovery_1_1ClockRecoveredWaveform.xhtml">ClockRecoveredWaveform</a>(<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>):</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;Resamples an input waveform using clock recovery</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">def </span>__init__(self,input_waveform,baudrate,trim_left_right=20):</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Generates a resampled waveform using clock recovery  </span></div>
<div class="line"><a name="l00033"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1ClockRecovery_1_1ClockRecoveredWaveform.xhtml">   33</a></span>&#160;<span class="stringliteral">        It is formed by hashing the bitmap definition with whatever else is hashed.</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">        @param input_waveform instance of class Waveform, waveform to resample </span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">        @param baudrate float, symbol rate of the waveform.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">        @param trim_left_right int, defaults to 20, number of points to trim from the two samples per</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">        UI waveform that determines the time error for the clock recovery.  This must be enough points so that when</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">        interpolating, the timing error does not try to interpolate beyond the boundaries of the input waveform.</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        Fs=baudrate*2. <span class="comment"># we want a waveform that contains two samples per unit interval</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        UpsampleFactor=Fs/input_waveform.td.Fs</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160; </div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1ClockRecovery_1_1ClockRecoveredWaveform.xhtml#aef8c217894e47b450a8c70060dc97950">   43</a></span>&#160;        <span class="comment"># The waveform is adapted to the new sample rate.  This puts it on the same sample frame as the original waveform, such that there</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="comment"># is the assumption that there is a point at exactly time zero, and that is the center of the unit interval.</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="comment"># the amount of points to remove is trimmed from the left to make the very first sample at the center of a unit interval.</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        adapted_waveform=input_waveform.Adapt(<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(input_waveform.td.H,input_waveform.td.K*UpsampleFactor,Fs))</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        samples=np.array(adapted_waveform.Values())</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        Nf=int(2**8)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        No=0</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        Nw=Nf//4</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        Na=5</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="stringliteral">        This function performs timing recovery for input PAM4 signal at 2sps</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="stringliteral">        S. Lees timing recovery algorithm</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="stringliteral">        A new non data aided. S. Lee, A new non data aided feedforward symbol timing estimator using two samples per symbol IEEE Commun Lett. 6 (5), 205 207, (2002)</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="stringliteral">        example</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="stringliteral">        Nf = 2^13</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="stringliteral">        No = 0</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="stringliteral">        Nw = Nf/4</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="stringliteral">        Na = 5</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        x = deepcopy(samples)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        x = x / (np.sqrt(np.mean(np.abs(x) ** 2)))  <span class="comment"># Normalization</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        Nb = int(np.floor((len(x) - No) / (Nf - No)))  <span class="comment"># Number of block</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="comment"># Blockwise spectra</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160; </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        Xk = np.zeros(shape=(Nf, Nb), dtype=complex)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">for</span> nn <span class="keywordflow">in</span> range(Nb):</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            xk = x[nn * (Nf - No) : nn * (Nf - No) + Nf]</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            Xk[:, nn] = np.fft.fft(xk) / np.sqrt(Nf)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; </div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment"># Cross correlation</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160; </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        Xl = Xk[int(Nf / 4 - Nw / 2) : int(Nf / 4 - Nw / 2) + Nw, :]</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        Xu = Xk[</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            int(Nf / 4 - Nw / 2)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            + int(Nf / 2) : int(Nf / 4 - Nw / 2)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            + int(Nf / 2)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            + Nw,</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            :,</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        ]</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        Xu1 = np.imag(Xl * np.conj(Xu))</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        Xu2 = np.sin(</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            2</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            * np.pi</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            * np.arange(int(Nf / 4 - Nw / 2), int(Nf / 4 - Nw / 2) + Nw, 1)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;            / Nf</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        )</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="keywordflow">for</span> nn <span class="keywordflow">in</span> range(Nb):</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            Xu1[:, nn] = Xu2 * Xu1[:, nn]</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        Xu1 = 1j * Xu1</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160; </div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        xc = np.sum(np.real(Xl * np.conj(Xu)) + Xu1, 0)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        xc = np.concatenate(</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            (</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                np.ones(int(np.floor(Na / 2))) * xc[0],</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                xc,</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                np.ones(int(np.floor(Na / 2))) * xc[-1],</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            )</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        )</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        xc = np.convolve(xc, np.ones(Na) / Na, mode=<span class="stringliteral">&quot;valid&quot;</span>)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160; </div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="comment"># Determinant</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        dt = np.unwrap(np.angle(xc))</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        te = dt / np.pi</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160; </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="comment"># Generating timing grid</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        xg = np.arange(int(Nf / 2 + 1), Nb * (Nf - No) + int(Nf / 2 + 1), Nf - No)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        f = interpolate.interp1d(xg, te, <span class="stringliteral">&quot;cubic&quot;</span>)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        xg_1 = np.arange(xg[0], xg[-1] + 1, 1)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        te = f(xg_1)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        xg_inter = xg_1 + te</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        f1 = interpolate.interp1d(xg_inter, samples[xg[0] : xg[-1] + 1], <span class="stringliteral">&quot;cubic&quot;</span>)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        samples = f1(xg_1[trim_left_right:-trim_left_right])</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160; </div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="comment"># Originally, this was the timing corrected waveform.  The problem with it is that it is the input waveform downsampled to two samples per UI</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="comment"># For now, I comment this out and try to reconstitute the input waveform that is timing corrected.</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">#         Waveform.__init__(self,TimeDescriptor(adapted_waveform.td.H+(xg_1[1])/adapted_waveform.td.Fs,samples.shape[0],adapted_waveform.td.Fs),samples.tolist())</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160; </div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment"># calculate the time error waveform on the two samples per UI timing grid</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        te_waveform=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>(<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(adapted_waveform.td.H+(Nf//2+1)/adapted_waveform.td.Fs,te.shape[0],adapted_waveform.td.Fs),</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                             (te/adapted_waveform.td.Fs).tolist())</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment"># trim some points to try to keep the time error in range</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        te_waveform*=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters_1_1WaveformTrimmer_1_1WaveformTrimmer.xhtml">WaveformTrimmer</a>(trim_left_right,trim_left_right)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment"># upsample the time error to the sample rate of the input waveform</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        te_waveform=te_waveform.Adapt(<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(te_waveform.td.H,te_waveform.td.K*input_waveform.td.Fs/te_waveform.td.Fs,input_waveform.td.Fs))</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160; </div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="comment"># interpolate the input waveform, removing the timing error</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        f1 = interpolate.interp1d(input_waveform.Times(),input_waveform.Values(), <span class="stringliteral">&quot;cubic&quot;</span>)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        retimed_waveform_values=f1([t-e <span class="keywordflow">for</span> t,e <span class="keywordflow">in</span> zip(te_waveform.Times(),te_waveform.Values())])</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        retimed_waveform=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>(te_waveform.TimeDescriptor(),retimed_waveform_values.tolist())</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="comment"># The interpolation will have failed if trim_left_right is insufficient.</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        Waveform.__init__(self,retimed_waveform.TimeDescriptor(),retimed_waveform.Values())</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="comment">#         retimed_waveform.WriteToFile(&#39;retimed.txt&#39;)</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">#         import matplotlib.pyplot as plt</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="comment">#         plt.plot(te_waveform.Times(&#39;ns&#39;),[v/1e-12 for v in te_waveform.Values()])</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="comment">#         plt.xlabel(&#39;time (ns)&#39;)</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="comment">#         plt.ylabel(&#39;time error (ps)&#39;)</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">#         plt.grid()</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">#         plt.show()</span></div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2TimeDomain_2Waveform_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters_1_1WaveformTrimmer_1_1WaveformTrimmer_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters_1_1WaveformTrimmer_1_1WaveformTrimmer.xhtml">SignalIntegrity.Lib.TimeDomain.Filters.WaveformTrimmer.WaveformTrimmer</a></div><div class="ttdoc">trims waveforms</div><div class="ttdef"><b>Definition:</b> <a href="WaveformTrimmer_8py_source.xhtml#l00029">WaveformTrimmer.py:29</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform.TimeDescriptor.TimeDescriptor</a></div><div class="ttdoc">time-axis for waveforms</div><div class="ttdef"><b>Definition:</b> <a href="TimeDescriptor_8py_source.xhtml#l00029">TimeDescriptor.py:29</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters.xhtml">SignalIntegrity.Lib.TimeDomain.Filters</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2TimeDomain_2Filters_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform.Waveform.Waveform</a></div><div class="ttdoc">base class for all waveforms</div><div class="ttdef"><b>Definition:</b> <a href="Waveform_8py_source.xhtml#l00036">Waveform.py:36</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1ClockRecovery_1_1ClockRecoveredWaveform_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1ClockRecovery_1_1ClockRecoveredWaveform.xhtml">SignalIntegrity.Lib.Eye.ClockRecovery.ClockRecoveredWaveform</a></div><div class="ttdoc">Resamples an input waveform using clock recovery.</div><div class="ttdef"><b>Definition:</b> <a href="ClockRecovery_8py_source.xhtml#l00033">ClockRecovery.py:33</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
