<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/ResultsCache.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.5.0</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ResultsCache.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1ResultsCache.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">results caching</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2021 Nubis Communications, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># Copyright (c) 2018-2020 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">import</span> pickle</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">import</span> hashlib</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml">ResultsCache</a>(object):</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;base class for results caching</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="stringliteral">    @note derived class must implement the function HashValue(), which determines the hash</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="stringliteral">    corresponding to a definition.</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    files_to_keep = 1</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    keep_extra_file_for_archive = <span class="keyword">True</span></div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml">   32</a></span>&#160;    check_times = <span class="keyword">True</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    logging=<span class="keyword">False</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a19e3e370f701435403ddb078f27f1ecb">__init__</a>(self,name,filename=None):</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;constructor\n</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">        When a project with a given filename is processed, various results in that project can be cached.</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">        @param name string name of thing to cache.  Examples are &#39;SParameters&#39; and &#39;TransferMatrices&#39;.</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">        @param filename string base filename of project being processed.</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a2ff994e16bf9521154de4cf659a3b689">filename</a>=filename</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#ac0c2cc2d8ec1b1223bd916a56c8f0b3a">extra</a>=<span class="stringliteral">&#39;_cached&#39;</span>+name</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aae455e6a275e74741a0193b8cf59457c">extension</a>=<span class="stringliteral">&#39;.p&#39;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a19e3e370f701435403ddb078f27f1ecb">   43</a></span>&#160;    <span class="keyword">def </span>_FileName(self,wildcard=False,files_to_keep_override=None):</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        files_to_keep = self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3a0072109a0c179e59adc48c9bbac534">files_to_keep</a></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> files_to_keep_override <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            files_to_keep = files_to_keep_override</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">if</span> wildcard:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            filename = self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a2ff994e16bf9521154de4cf659a3b689">filename</a>+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#ac0c2cc2d8ec1b1223bd916a56c8f0b3a">extra</a>+<span class="stringliteral">&#39;*&#39;</span>+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aae455e6a275e74741a0193b8cf59457c">extension</a></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            <span class="keywordflow">if</span> files_to_keep != 1:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;                filename = self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a2ff994e16bf9521154de4cf659a3b689">filename</a>+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#ac0c2cc2d8ec1b1223bd916a56c8f0b3a">extra</a>+<span class="stringliteral">&#39;_&#39;</span>+str(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a28b5828ac3b16e22c26077eedf5674ff">hash</a>)+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aae455e6a275e74741a0193b8cf59457c">extension</a></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                filename = self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a2ff994e16bf9521154de4cf659a3b689">filename</a>+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#ac0c2cc2d8ec1b1223bd916a56c8f0b3a">extra</a>+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aae455e6a275e74741a0193b8cf59457c">extension</a></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">return</span> filename</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    @staticmethod</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keyword">def </span>PreferencesCache():</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml">SignalIntegrity.Lib.SystemDescriptions.Numeric</a> <span class="keyword">import</span> Numeric</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Parsers_1_1SystemSParametersParser.xhtml">SignalIntegrity.Lib.Parsers.SystemSParametersParser</a> <span class="keyword">import</span> SystemDescriptionParser</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&#39; TrySVD &#39;</span>+repr(Numeric.trySVD)+\</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                <span class="stringliteral">&#39; CheckConditionNumber &#39;</span>+repr(Numeric.checkConditionNumber)+\</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                <span class="stringliteral">&#39; AllowNonUniqueSolutions&#39;</span>+repr(Numeric.allowPossibleNonUniqueSolutions)+\</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                <span class="stringliteral">&#39; MultiPortTee &#39;</span>+repr(SystemDescriptionParser.MultiPortTee)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">HashValue</a>(self,stuffToHash=&#39;&#39;):</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Generates the hash for a definition\n</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="stringliteral">        @param stuffToHash repr of stuff to hash</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="stringliteral">        @remark derived classes should override this method and call the base class HashValue with their stuff added</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="stringliteral">        @return integer hash value</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">return</span> hashlib.sha256((stuffToHash+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a70f9e2ce94403f81a864b5011a1dbc8a">PreferencesCache</a>()).encode()).hexdigest()</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#acaed8551afefa9ad488b67b7a9a8ed40">CheckCache</a>(self):</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Called to see if the cache has results that can be used instead of processing the result.\n</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="stringliteral">        It calculates a hash value for the definition of the processing and sees if a _pickle_ containing</span></div>
<div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">   73</a></span>&#160;<span class="stringliteral">        a cached result exists and can be loaded.  Then it checks the times of the cache file and the</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="stringliteral">        various subcomponents.  Finally, if the hash value matches the cache, meaning they were both</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="stringliteral">        generated from the same definition, it returns True with it&#39;s internal dictionary of the cached</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="stringliteral">        results initialized.  Otherwise, it returns False.</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="stringliteral">        @return bool whether the cache can be used.</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a28b5828ac3b16e22c26077eedf5674ff">hash</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">HashValue</a>()</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keyword">import</span> os</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a2ff994e16bf9521154de4cf659a3b689">filename</a> <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: print(<span class="stringliteral">&#39;no filename&#39;</span>)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#acaed8551afefa9ad488b67b7a9a8ed40">   84</a></span>&#160;        filenames=[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(files_to_keep_override=1),self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(files_to_keep_override=2)]</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">for</span> filename <span class="keywordflow">in</span> filenames:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(filename):</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: print(filename+<span class="stringliteral">&#39; does not exist&#39;</span>)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af29f5497491a82905e8f950900b7adb3">check_times</a>:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3f79588279cd652ca7edb2afa74063b1">CheckTimes</a>(filename):</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: print(filename + <span class="stringliteral">&#39; older&#39;</span>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                <span class="keyword">with</span> open(filename,<span class="stringliteral">&#39;rb&#39;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    hash = pickle.load(f)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keywordflow">if</span> hash == self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a28b5828ac3b16e22c26077eedf5674ff">hash</a>:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        tmp_dict = pickle.load(f)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                        self.__dict__.update(tmp_dict)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: print(filename + <span class="stringliteral">&#39; passes cache check&#39;</span>)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                        <span class="keywordflow">if</span> filename == self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(files_to_keep_override=2) <span class="keywordflow">and</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3a0072109a0c179e59adc48c9bbac534">files_to_keep</a> == 1:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                            <span class="comment"># this means that the file found is the one for multi-cache, but ideally, it&#39;s the one</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                            <span class="comment"># for single file cache.  Write out the single file cache, so that in the future, it&#39;s found</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                            <span class="comment"># in the single file cache.</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#abf3d39d22f11766f437fdee4614fc027">CacheResult</a>()</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a980dd474def5e03da6b2c91b7376b5f5">keep_extra_file_for_archive</a> <span class="keywordflow">and</span> (filename != self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(files_to_keep_override=1)):</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: print(<span class="stringliteral">&#39;copying cached file to single cache for archiving&#39;</span>)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                            f.close()</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                            <span class="comment"># keep an extra single file just for archiving</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                            <span class="keyword">import</span> shutil</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                            shutil.copyfile(filename, self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(files_to_keep_override=1))</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                            print(filename+<span class="stringliteral">&#39; hash incorrect&#39;</span>)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                            print(filename+<span class="stringliteral">&#39; hash value = &#39;</span>+hash)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                            print(<span class="stringliteral">&#39;expecting: &#39;</span>+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a28b5828ac3b16e22c26077eedf5674ff">hash</a>)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                        <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: print(filename+<span class="stringliteral">&#39; could not be unpickled&#39;</span>)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#abf3d39d22f11766f437fdee4614fc027">CacheResult</a>(self,keeperList=None):</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Caches a calculated result</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="stringliteral">        @param keeperList (optional, defaults to None) list of members to keep in the cache</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="stringliteral">        @note that the hash value for the result was generated through a previous call to CheckCache().</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="stringliteral">        In other words, each cached value must be stored with a hash corresponding to the definition that generated</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="stringliteral">        the result to be cached (to be checked when an attempt is made to load the cache).  This hash is generated</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="stringliteral">        automatically when the CheckCache call is made.</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="stringliteral">        @see CheckCache() </span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a2ff994e16bf9521154de4cf659a3b689">filename</a> <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160; </div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        members = [attr <span class="keywordflow">for</span> attr <span class="keywordflow">in</span> dir(self) <span class="keywordflow">if</span> <span class="keywordflow">not</span> callable(getattr(self, attr)) <span class="keywordflow">and</span> <span class="keywordflow">not</span> attr.startswith(<span class="stringliteral">&quot;__&quot;</span>)]</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> keeperList == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#abf3d39d22f11766f437fdee4614fc027">  138</a></span>&#160;            keeperList.append(<span class="stringliteral">&#39;hash&#39;</span>)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            members=[attr <span class="keywordflow">for</span> attr <span class="keywordflow">in</span> members <span class="keywordflow">if</span> attr <span class="keywordflow">in</span> keeperList]</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            pickleDict = {x:self.__dict__[x] <span class="keywordflow">for</span> x <span class="keywordflow">in</span> members}</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">except</span> KeyError:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            pickleDict = {}</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            <span class="keywordflow">for</span> x <span class="keywordflow">in</span> members:</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                    pickleDict[x] = self.__dict__[x]</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordflow">except</span> KeyError:</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160; </div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="comment"># keep only a certain number of files</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3a0072109a0c179e59adc48c9bbac534">files_to_keep</a> != 1:</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keyword">import</span> glob</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keyword">import</span> os</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            file_list = glob.glob(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(wildcard=<span class="keyword">True</span>))</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            file_list.sort(key=os.path.getmtime, reverse=<span class="keyword">True</span>)  <span class="comment"># Sort by modification time, newest first</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            number_of_files = len(file_list)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            number_to_delete = max(0, number_of_files - self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3a0072109a0c179e59adc48c9bbac534">files_to_keep</a> + 1)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>:</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                print(f<span class="stringliteral">&#39;while caching, found {number_of_files} cache files, can keep {self.files_to_keep}, deleting {number_to_delete} files.&#39;</span>)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">for</span> num <span class="keywordflow">in</span> range(number_to_delete):</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                os.remove(file_list[num])</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keyword">with</span> open(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(), <span class="stringliteral">&#39;wb&#39;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: print(<span class="stringliteral">&#39;caching &#39;</span>+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>()+<span class="stringliteral">&#39; with hash value:&#39;</span>+pickleDict[<span class="stringliteral">&#39;hash&#39;</span>])</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                pickle.dump(pickleDict[<span class="stringliteral">&#39;hash&#39;</span>], f, 2)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                pickle.dump(pickleDict, f, 2)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a980dd474def5e03da6b2c91b7376b5f5">keep_extra_file_for_archive</a> <span class="keywordflow">and</span> (self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>() != self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(files_to_keep_override=1)):</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                <span class="comment"># keep an extra single file just for archiving</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>: print(<span class="stringliteral">&#39;copying cached file to single cache for archiving&#39;</span>)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keyword">import</span> shutil</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                shutil.copyfile(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(), self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">_FileName</a>(files_to_keep_override=1))</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">except</span> FileNotFoundError:</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                print(f<span class="stringliteral">&#39;failed to write cache file: {self._FileName}&#39;</span>)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3f79588279cd652ca7edb2afa74063b1">CheckTimes</a>(self,cacheFilename):</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Base class function to check times of various components.</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="stringliteral">        If a project does not have any file components or time dependencies, this can be ignored, otherwise</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="stringliteral">        the derived class must overload this function.</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;<span class="stringliteral">        @return True (must be overloaded to provide anything other)</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160; </div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache.xhtml">LinesCache</a>(<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml">ResultsCache</a>):</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;Caches results calculated based on netlist lines, as used in all of the parser classes.\n</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="stringliteral">    These parser classes derive from this class and thus inherit the caching capability.</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="stringliteral">    @see Parsers</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00194"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3f79588279cd652ca7edb2afa74063b1">  194</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a19e3e370f701435403ddb078f27f1ecb">__init__</a>(self,name,filename=None):</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;constructor\n</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="stringliteral">        When a project with a given filename is processed, various results in that project can be cached.</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="stringliteral">        @param name string name of thing to cache.  Examples are &#39;SParameters&#39; and &#39;TransferMatrices&#39;.</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="stringliteral">        @param filename string base filename of project being processed.</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        ResultsCache.__init__(self,name,filename)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">HashValue</a>(self,stuffToHash=&#39;&#39;):</div>
<div class="line"><a name="l00202"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache.xhtml">  202</a></span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Generates the hash for a definition\n</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="stringliteral">        @param stuffToHash repr of stuff to hash</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="stringliteral">        It is formed by hashing a combination of the netlist lines, the frequencies, and the arguments provided.</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="stringliteral">        @remark derived classes should override this method and call the base class HashValue with their stuff added</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;<span class="stringliteral">        @return integer hash value</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keyword">def </span>ReorderLexicographically(lines):</div>
<div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache.xhtml#a19e3e370f701435403ddb078f27f1ecb">  209</a></span>&#160;            <span class="comment"># lexicographical reordering of the netlist helps ensure that caching of the</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;            <span class="comment"># netlist line remains predictable</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;            linesSplit=[line.split(<span class="stringliteral">&#39; &#39;</span>) <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines]</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            linesKeyValue=[]</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            <span class="keywordflow">for</span> lineList <span class="keywordflow">in</span> linesSplit:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="keywordflow">if</span> len(lineList)&gt;0:</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                    key=lineList[0]</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                    value=<span class="stringliteral">&#39; &#39;</span>.join(lineList[1:])</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                    <span class="keywordflow">if</span> key == <span class="stringliteral">&#39;var&#39;</span>:</div>
<div class="line"><a name="l00218"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">  218</a></span>&#160;                        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                            beginning_value = value.split(<span class="stringliteral">&#39; &#39;</span>)[1]</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                            <span class="keywordflow">if</span> beginning_value[0] == <span class="stringliteral">&#39;/&#39;</span> <span class="keywordflow">or</span> beginning_value[1] == <span class="stringliteral">&#39;/&#39;</span> <span class="keywordflow">or</span> beginning_value[1:3] ==<span class="stringliteral">&#39;:/&#39;</span> <span class="keywordflow">or</span> beginning_value[2:4]==<span class="stringliteral">&#39;:/&#39;</span>: <span class="comment"># assume this is a file</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                <span class="comment"># convert to relative path</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                                <span class="keyword">import</span> os</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                current_path=os.getcwd()</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                                relative_path=os.path.relpath(os.path.abspath(<span class="stringliteral">&#39; &#39;</span>.join(value.replace(<span class="stringliteral">&quot;&#39;&quot;</span>,<span class="stringliteral">&quot;&quot;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[1:])),current_path)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                value=value.split(<span class="stringliteral">&#39; &#39;</span>)[0]+<span class="stringliteral">&#39; &#39;</span>+relative_path</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                            <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    linesKeyValue.append((key,value))</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            keyList=sorted(list(set([key <span class="keywordflow">for</span> key,_ <span class="keywordflow">in</span> linesKeyValue])))</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            keyLineList={key:[] <span class="keywordflow">for</span> key <span class="keywordflow">in</span> keyList}</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> linesKeyValue:</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> (key == <span class="stringliteral">&#39;var&#39;</span> <span class="keywordflow">and</span> <span class="stringliteral">&#39;nocache&#39;</span> <span class="keywordflow">in</span> value):</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                    keyLineList[key].append(value)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            reorderedText=[]</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            <span class="keywordflow">for</span> key <span class="keywordflow">in</span> keyLineList.keys():</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                linelist=sorted(keyLineList[key])</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                <span class="keywordflow">for</span> line <span class="keywordflow">in</span> linelist: reorderedText.append(key+<span class="stringliteral">&#39; &#39;</span>+line)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            <span class="keywordflow">return</span> reorderedText</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        hashed=repr(ReorderLexicographically(self.m_lines))+repr(self.m_f)+repr(self.m_Z0)+repr(self.m_args)+stuffToHash</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">logging</a>:</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            <span class="keyword">with</span> open(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a2ff994e16bf9521154de4cf659a3b689">filename</a>+<span class="stringliteral">&#39;_hash.txt&#39;</span>,<span class="stringliteral">&#39;w&#39;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                f.write((repr(ReorderLexicographically(self.m_lines))+repr(self.m_f)+repr(self.m_Z0)+repr(self.m_args)+stuffToHash).replace(<span class="stringliteral">&#39; &#39;</span>,<span class="stringliteral">&#39;\n&#39;</span>))</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">return</span> ResultsCache.HashValue(self,hashed)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache.xhtml#a3f79588279cd652ca7edb2afa74063b1">CheckTimes</a>(self,cacheFilename):</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Checks the times for files associated with a netlist.\n</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="stringliteral">        In netlist devices listed as either file or system devices (i.e. are s-parameter files on the disk) are</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="stringliteral">        newer than the cache file, then returns False.</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="stringliteral">        @return False if the cache cannot be used due to file modifications otherwise True</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="stringliteral">        @note due the potential nonexistance of the files being checked, if any attempt to check them throws an</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="stringliteral">        exception, then  False is returned.</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="keyword">import</span> os</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        fileList={}</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1LineSplitter.xhtml">SignalIntegrity.Lib.Helpers.LineSplitter</a> <span class="keyword">import</span> LineSplitter</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> self.m_lines:</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                lineList=LineSplitter(line)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                self.ProcessVariables(lineList)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                lineList=self.ReplaceArgs(lineList)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                <span class="keywordflow">if</span> len(lineList) == 0: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                    <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                <span class="keywordflow">elif</span> lineList[0] == <span class="stringliteral">&#39;device&#39;</span>:</div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache.xhtml#a3f79588279cd652ca7edb2afa74063b1">  263</a></span>&#160;                    <span class="comment"># todo:  this is wrong - must parse tokens</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    <span class="keywordflow">if</span> len(lineList)&gt;=5:</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                        <span class="keywordflow">if</span> lineList[3]==<span class="stringliteral">&#39;file&#39;</span>:</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                            fileList[lineList[4]]={key:value</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                                                   <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                                                                     <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(5,len(lineList),2)]</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                                   <span class="keywordflow">if</span> key <span class="keywordflow">not</span> <span class="keywordflow">in</span> [<span class="stringliteral">&#39;reorder&#39;</span>]}</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                        <span class="keywordflow">elif</span> lineList[3] == <span class="stringliteral">&#39;networkanalyzer&#39;</span>:</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                            fileList[lineList[5]]={key:value</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                                   <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                                                     <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(8,len(lineList),2)]</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                                   <span class="keywordflow">if</span> key <span class="keywordflow">not</span> <span class="keywordflow">in</span> [<span class="stringliteral">&#39;et&#39;</span>,<span class="stringliteral">&#39;pl&#39;</span>,<span class="stringliteral">&#39;cd&#39;</span>]}</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                            fileList[lineList[7]]=fileList[lineList[5]]</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                        <span class="keywordflow">elif</span> lineList[3]==<span class="stringliteral">&#39;networkanalyzermodel&#39;</span>:</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                            <span class="comment"># I don&#39;t think this can ever happen</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                            fileList[lineList[5]]={key:value</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                                                   <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                                                                     <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(6,len(lineList),2)]}</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                        <span class="keywordflow">elif</span> lineList[3] == <span class="stringliteral">&#39;parallel&#39;</span>:</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                            fileList[lineList[5]]={key:value</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                                                   <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                                                                     <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(6,len(lineList),2)]</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                                                   <span class="keywordflow">if</span> key <span class="keywordflow">not</span> <span class="keywordflow">in</span> [<span class="stringliteral">&#39;sect&#39;</span>]}</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                        <span class="keywordflow">elif</span> lineList[3] == <span class="stringliteral">&#39;series&#39;</span>:</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                            fileList[lineList[5]]={key:value</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                                                   <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                                                     <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(6,len(lineList),2)]</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                                   <span class="keywordflow">if</span> key <span class="keywordflow">not</span> <span class="keywordflow">in</span> [<span class="stringliteral">&#39;sect&#39;</span>,<span class="stringliteral">&#39;lp&#39;</span>,<span class="stringliteral">&#39;rp&#39;</span>]}</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        <span class="keywordflow">elif</span> lineList[3] == <span class="stringliteral">&#39;rlgcfit&#39;</span>:</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                            fileList[lineList[5]]={key:value</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                                                   <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                                                                     <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(6,len(lineList),2)]</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                                   <span class="keywordflow">if</span> key <span class="keywordflow">not</span> <span class="keywordflow">in</span> [<span class="stringliteral">&#39;scale&#39;</span>]}</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        <span class="keywordflow">elif</span> lineList[3] == <span class="stringliteral">&#39;impulseresponsefilter&#39;</span>:</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                            fileList[lineList[4]]={key:value</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                                   <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                                                                     <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(5,len(lineList),2)]</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                                                   <span class="keywordflow">if</span> key <span class="keywordflow">not</span> <span class="keywordflow">in</span> [<span class="stringliteral">&#39;wfprojname&#39;</span>,<span class="stringliteral">&#39;dcgain&#39;</span>,<span class="stringliteral">&#39;mults&#39;</span>,<span class="stringliteral">&#39;derivative&#39;</span>]}</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                <span class="keywordflow">elif</span> lineList[0] == <span class="stringliteral">&#39;calibration&#39;</span>:</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    fileList[lineList[3]]={key:value</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                           <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                                             <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(4,len(lineList),2)]</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                           <span class="keywordflow">if</span> key <span class="keywordflow">not</span> <span class="keywordflow">in</span> [<span class="stringliteral">&#39;std&#39;</span>,<span class="stringliteral">&#39;pn&#39;</span>,<span class="stringliteral">&#39;opn&#39;</span>,<span class="stringliteral">&#39;ct&#39;</span>]}</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    <span class="keywordflow">if</span> <span class="stringliteral">&#39;.&#39;</span> <span class="keywordflow">in</span> lineList[5]:</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                        fileList[lineList[5]]=fileList[lineList[3]]</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <span class="keywordflow">elif</span> lineList[0] == <span class="stringliteral">&#39;system&#39;</span>:</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    fileList[lineList[2]]={key:value</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                                           <span class="keywordflow">for</span> key,value <span class="keywordflow">in</span> [(lineList[k],lineList[k+1])</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                                             <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(3,len(lineList),2)]}</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordflow">except</span> IndexError:</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            cacheFileTime = os.path.getmtime(cacheFilename)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        modificationTimeDict=[]</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        <span class="keywordflow">for</span> fileName <span class="keywordflow">in</span> fileList.keys():</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a> <span class="keyword">import</span> ProjectModificationTime</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                modificationTimeDict = ProjectModificationTime(modificationTimeDict,fileName,fileList[fileName])</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                <span class="keywordflow">if</span> modificationTimeDict == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                    <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">if</span> len(modificationTimeDict)==0:</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordflow">if</span> max([file[<span class="stringliteral">&#39;time&#39;</span>] <span class="keywordflow">for</span> file <span class="keywordflow">in</span> modificationTimeDict]) &gt; cacheFileTime:</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a></div><div class="ttdef"><b>Definition:</b> <a href="SignalIntegrityAppHeadless_8py_source.xhtml#l00001">SignalIntegrityAppHeadless.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_aedb2be6dcb8a2450510bdce8fc639aa7"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aedb2be6dcb8a2450510bdce8fc639aa7">SignalIntegrity.Lib.ResultsCache.ResultsCache._FileName</a></div><div class="ttdeci">def _FileName(self, wildcard=False, files_to_keep_override=None)</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00047">ResultsCache.py:47</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1LineSplitter_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1LineSplitter.xhtml">SignalIntegrity.Lib.Helpers.LineSplitter</a></div><div class="ttdef"><b>Definition:</b> <a href="LineSplitter_8py_source.xhtml#l00001">LineSplitter.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric</a></div><div class="ttdoc">handles numeric details of derived class solutions</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00028">Numeric.py:28</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_aae455e6a275e74741a0193b8cf59457c"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#aae455e6a275e74741a0193b8cf59457c">SignalIntegrity.Lib.ResultsCache.ResultsCache.extension</a></div><div class="ttdeci">extension</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00046">ResultsCache.py:46</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_af7883388f6a285534cba3f39404124d4"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af7883388f6a285534cba3f39404124d4">SignalIntegrity.Lib.ResultsCache.ResultsCache.logging</a></div><div class="ttdeci">bool logging</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00036">ResultsCache.py:36</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_a980dd474def5e03da6b2c91b7376b5f5"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a980dd474def5e03da6b2c91b7376b5f5">SignalIntegrity.Lib.ResultsCache.ResultsCache.keep_extra_file_for_archive</a></div><div class="ttdeci">bool keep_extra_file_for_archive</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00034">ResultsCache.py:34</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_a28b5828ac3b16e22c26077eedf5674ff"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a28b5828ac3b16e22c26077eedf5674ff">SignalIntegrity.Lib.ResultsCache.ResultsCache.hash</a></div><div class="ttdeci">hash</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00085">ResultsCache.py:85</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml">SignalIntegrity.Lib.ResultsCache.ResultsCache</a></div><div class="ttdoc">base class for results caching</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00032">ResultsCache.py:32</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_abf3d39d22f11766f437fdee4614fc027"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#abf3d39d22f11766f437fdee4614fc027">SignalIntegrity.Lib.ResultsCache.ResultsCache.CacheResult</a></div><div class="ttdeci">def CacheResult(self, keeperList=None)</div><div class="ttdoc">Caches a calculated result.</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00138">ResultsCache.py:138</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_a2ff994e16bf9521154de4cf659a3b689"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a2ff994e16bf9521154de4cf659a3b689">SignalIntegrity.Lib.ResultsCache.ResultsCache.filename</a></div><div class="ttdeci">filename</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00044">ResultsCache.py:44</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Parsers_1_1SystemSParametersParser_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Parsers_1_1SystemSParametersParser.xhtml">SignalIntegrity.Lib.Parsers.SystemSParametersParser</a></div><div class="ttdef"><b>Definition:</b> <a href="SystemSParametersParser_8py_source.xhtml#l00001">SystemSParametersParser.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_acaed8551afefa9ad488b67b7a9a8ed40"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#acaed8551afefa9ad488b67b7a9a8ed40">SignalIntegrity.Lib.ResultsCache.ResultsCache.CheckCache</a></div><div class="ttdeci">def CheckCache(self)</div><div class="ttdoc">Called to see if the cache has results that can be used instead of processing the result.</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00084">ResultsCache.py:84</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_a70f9e2ce94403f81a864b5011a1dbc8a"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a70f9e2ce94403f81a864b5011a1dbc8a">SignalIntegrity.Lib.ResultsCache.ResultsCache.PreferencesCache</a></div><div class="ttdeci">def PreferencesCache()</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00060">ResultsCache.py:60</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_a3f79588279cd652ca7edb2afa74063b1"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3f79588279cd652ca7edb2afa74063b1">SignalIntegrity.Lib.ResultsCache.ResultsCache.CheckTimes</a></div><div class="ttdeci">def CheckTimes(self, cacheFilename)</div><div class="ttdoc">Base class function to check times of various components.</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00194">ResultsCache.py:194</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_ac0c2cc2d8ec1b1223bd916a56c8f0b3a"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#ac0c2cc2d8ec1b1223bd916a56c8f0b3a">SignalIntegrity.Lib.ResultsCache.ResultsCache.extra</a></div><div class="ttdeci">extra</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00045">ResultsCache.py:45</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache.xhtml">SignalIntegrity.Lib.ResultsCache.LinesCache</a></div><div class="ttdoc">Caches results calculated based on netlist lines, as used in all of the parser classes.</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00202">ResultsCache.py:202</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_a19e3e370f701435403ddb078f27f1ecb"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a19e3e370f701435403ddb078f27f1ecb">SignalIntegrity.Lib.ResultsCache.ResultsCache.__init__</a></div><div class="ttdeci">def __init__(self, name, filename=None)</div><div class="ttdoc">constructor  When a project with a given filename is processed, various results in that project can b...</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00043">ResultsCache.py:43</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_a5ead5cf1fbb767c3ef67b6acf3b0bce3"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">SignalIntegrity.Lib.ResultsCache.ResultsCache.HashValue</a></div><div class="ttdeci">def HashValue(self, stuffToHash='')</div><div class="ttdoc">Generates the hash for a definition .</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00073">ResultsCache.py:73</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache_xhtml_a3f79588279cd652ca7edb2afa74063b1"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1LinesCache.xhtml#a3f79588279cd652ca7edb2afa74063b1">SignalIntegrity.Lib.ResultsCache.LinesCache.CheckTimes</a></div><div class="ttdeci">def CheckTimes(self, cacheFilename)</div><div class="ttdoc">Checks the times for files associated with a netlist.</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00263">ResultsCache.py:263</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_a3a0072109a0c179e59adc48c9bbac534"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#a3a0072109a0c179e59adc48c9bbac534">SignalIntegrity.Lib.ResultsCache.ResultsCache.files_to_keep</a></div><div class="ttdeci">int files_to_keep</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00033">ResultsCache.py:33</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_af29f5497491a82905e8f950900b7adb3"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#af29f5497491a82905e8f950900b7adb3">SignalIntegrity.Lib.ResultsCache.ResultsCache.check_times</a></div><div class="ttdeci">bool check_times</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00035">ResultsCache.py:35</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
