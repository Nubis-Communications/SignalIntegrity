<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/App/Wire.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.3.2</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_970ef3fb0b92f0060bb9423c44cad0f7.xhtml">App</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Wire.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1App_1_1Wire.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">Wire.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">import</span> copy</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">import</span> math</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">class </span>Segment(object):</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">def </span>__init__(self,startVertex,endVertex):</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;        self.selected=startVertex[<span class="stringliteral">&#39;Selected&#39;</span>] <span class="keywordflow">and</span> endVertex[<span class="stringliteral">&#39;Selected&#39;</span>]</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;        self.startCoord=startVertex[<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;        self.endCoord=endVertex[<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">def </span>__getitem__(self,item):</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(item,int):</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="keywordflow">raise</span> ValueError</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keywordflow">if</span> item==0:</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;            <span class="keywordflow">return</span> self.startCoord</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        <span class="keywordflow">elif</span> item==1:</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;            <span class="keywordflow">return</span> self.endCoord</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    <span class="keyword">def </span>Direction(self):</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        vector=(self.endCoord[0]-self.startCoord[0],self.endCoord[1]-self.startCoord[1])</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">if</span> vector[0]==0:</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="comment"># this is a north south line</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keywordflow">if</span> vector[1]&gt;0:</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;s&#39;</span> <span class="comment"># this is a south going line</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordflow">elif</span> vector[1]&lt;0:</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;n&#39;</span> <span class="comment"># this is a north going line</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;?&#39;</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">elif</span> vector[1]==0:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="comment"># this is an east west line</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">if</span> vector[0]&gt;0:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;e&#39;</span> <span class="comment"># this is an east going line</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            <span class="keywordflow">elif</span> vector[0]&lt;0:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;w&#39;</span> <span class="comment"># this is a west going line</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;?&#39;</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&#39;?&#39;</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">def </span>IsAt(self,coord,augmentor,distanceAllowed):</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        xc=float(coord[0]+augmentor[0])</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        yc=float(coord[1]+augmentor[1])</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        xi=self.startCoord[0]</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        yi=self.startCoord[1]</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        xf=self.endCoord[0]</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        yf=self.endCoord[1]</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">if</span> xc &lt; min(xi,xf)-distanceAllowed:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">if</span> xc &gt; max(xi,xf)+distanceAllowed:</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">if</span> yc &lt; min(yi,yf)-distanceAllowed:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">if</span> yc &gt; max(yi,yf)+distanceAllowed:</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        deltax=xf-xi</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        deltay=yf-yi</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">if</span> deltax == 0:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            R=abs(xc-xi)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">elif</span> deltay == 0:</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            R=abs(yc-yi)</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            m=float(deltay)/float(deltax)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;            b=yi-xi*m</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="comment"># m and b are equation of line forming wire segment</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;            mp=-1./m</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            bp=yc-xc*mp</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;            <span class="comment"># mp and bp are equation of line perpendicular to wire segment passing</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="comment"># through coordinate given</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;            <span class="comment">#</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            <span class="comment"># now to find the intersection of the lines</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="comment"># y=m*x+b</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            <span class="comment"># y=mp*x+bp</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            x=(bp-b)/(m-mp)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;            y=m*x+b</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;            R=math.sqrt((xc-x)*(xc-x)+(yc-y)*(yc-y))</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">return</span> (R &lt;= distanceAllowed)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">class </span>SegmentList(object):</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">def </span>__init__(self,wire):</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        self.segmentList=[]</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        <span class="keywordflow">if</span> len(wire)&gt;=2:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            startVertex=wire[0]</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="keywordflow">for</span> endVertex <span class="keywordflow">in</span> wire[1:]:</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                self.segmentList.append(Segment(startVertex,endVertex))</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                startVertex=endVertex</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keyword">def </span>__getitem__(self,item):</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">return</span> self.segmentList[item]</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keyword">def </span>__len__(self):</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="keywordflow">return</span> len(self.segmentList)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keyword">def </span>Wire(self):</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        vertexList=[]</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">if</span> len(self)==0:</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">for</span> segmentIndex <span class="keywordflow">in</span> range(0,len(self)):</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            segment=self[segmentIndex]</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">if</span> segmentIndex==0:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                vertexList.append(Vertex(segment[0],segment.selected))</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                vertexList.append(Vertex(segment[1],segment.selected))</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                vertexList[-1][<span class="stringliteral">&#39;Selected&#39;</span>] = segment.selected <span class="keywordflow">or</span> vertexList[-1][<span class="stringliteral">&#39;Selected&#39;</span>]</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                vertexList.append(Vertex(segment[1],segment.selected))</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span> Wire(vertexList)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ProjectFile.xhtml">SignalIntegrity.App.ProjectFile</a> <span class="keyword">import</span> VertexConfiguration</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="keyword">class </span>Vertex(VertexConfiguration):</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    <span class="keyword">def </span>__init__(self,coord=(0,0),selected=<span class="keyword">False</span>):</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        VertexConfiguration.__init__(self)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        self[<span class="stringliteral">&#39;Coord&#39;</span>]=coord</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        self[<span class="stringliteral">&#39;Selected&#39;</span>]=selected</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keyword">def </span>__getitem__(self,item):</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">if</span> isinstance(item,(int,slice)):</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">return</span> self[<span class="stringliteral">&#39;Coord&#39;</span>][item]</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">else</span>: <span class="keywordflow">return</span> VertexConfiguration.__getitem__(self,item)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">def </span>IsAt(self,coord,augmentor,distanceAllowed):</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        xc=float(coord[0]+augmentor[0])</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        yc=float(coord[1]+augmentor[1])</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        x,y=self[<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">if</span> xc &lt; x-distanceAllowed:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="keywordflow">if</span> xc &gt; x+distanceAllowed:</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">if</span> yc &lt; y-distanceAllowed:</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span> yc &gt; y+distanceAllowed:</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keyword">def </span>IsIn(self,i,f,ia,fa):</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        minx=min(float(i[0]+ia[0]),float(f[0]+fa[0]))</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        miny=min(float(i[1]+ia[1]),float(f[1]+fa[1]))</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        maxx=max(float(i[0]+ia[0]),float(f[0]+fa[0]))</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        maxy=max(float(i[1]+ia[1]),float(f[1]+fa[1]))</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        x,y=self[<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span> minx &gt; x:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        <span class="keywordflow">if</span> maxx &lt; x:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="keywordflow">if</span> miny &gt; y:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">if</span> maxy &lt; y:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ProjectFileBase.xhtml">SignalIntegrity.App.ProjectFileBase</a> <span class="keyword">import</span> XMLConfiguration</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160; </div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="keyword">class </span>Wire(XMLConfiguration):</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keyword">def </span>__init__(self,vertexList=None):</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">if</span> vertexList==<span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            vertexList=[]</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Wire&#39;</span>)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;Vertices&#39;</span>,[Vertex(vertex[<span class="stringliteral">&#39;Coord&#39;</span>],vertex[<span class="stringliteral">&#39;Selected&#39;</span>]) <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> vertexList],<span class="stringliteral">&#39;array&#39;</span>,arrayType=Vertex()))</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">def </span>__getitem__(self,item):</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> isinstance(item,(slice,int)):</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">return</span> self[<span class="stringliteral">&#39;Vertices&#39;</span>][item]</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="keywordflow">else</span>: <span class="keywordflow">return</span> XMLConfiguration.__getitem__(self,item)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">def </span>__setitem__(self,item,value):</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">if</span> isinstance(item,int):</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(value,Vertex):</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                <span class="keywordflow">raise</span> ValueError</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            self[<span class="stringliteral">&#39;Vertices&#39;</span>][item]=value</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="keywordflow">else</span>: XMLConfiguration.__setitem__(self,item,value)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">def </span>__delitem__(self,item):</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">if</span> isinstance(item,int):</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            del self[<span class="stringliteral">&#39;Vertices&#39;</span>][item]</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">raise</span> ValueError</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">def </span>__len__(self):</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">return</span> len(self[<span class="stringliteral">&#39;Vertices&#39;</span>])</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keyword">def </span>append(self,item):</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        self[<span class="stringliteral">&#39;Vertices&#39;</span>].append(item)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keyword">def </span>reverse(self):</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        self[<span class="stringliteral">&#39;Vertices&#39;</span>].reverse()</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">def </span>DrawWire(self,canvas,grid,x,y):</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        selected=<span class="keyword">False</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        verticesProject=self[<span class="stringliteral">&#39;Vertices&#39;</span>]</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> verticesProject:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            <span class="keywordflow">if</span> vertex[<span class="stringliteral">&#39;Selected&#39;</span>]:</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                selected = <span class="keyword">True</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">if</span> len(verticesProject) &gt;= 2:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            segmentCoord=verticesProject[0]</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;            <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> verticesProject[1:]:</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                canvas.create_line((segmentCoord[0]+x)*grid,</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                                    (segmentCoord[1]+y)*grid,</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                                    (vertex[0]+x)*grid,</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                                    (vertex[1]+y)*grid,</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                                    fill=(<span class="stringliteral">&#39;blue&#39;</span> <span class="keywordflow">if</span> (segmentCoord[<span class="stringliteral">&#39;Selected&#39;</span>] <span class="keywordflow">and</span> vertex[<span class="stringliteral">&#39;Selected&#39;</span>]) <span class="keywordflow">else</span> <span class="stringliteral">&#39;black&#39;</span>))</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                segmentCoord=vertex</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">if</span> selected:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> verticesProject:</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    size=max(1,grid/8)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    canvas.create_line((vertex[0]+x)*grid-size,</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                                       (vertex[1]+y)*grid-size,</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                       (vertex[0]+x)*grid+size,</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                       (vertex[1]+y)*grid+size,</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                       fill=(<span class="stringliteral">&#39;blue&#39;</span> <span class="keywordflow">if</span> vertex[<span class="stringliteral">&#39;Selected&#39;</span>] <span class="keywordflow">else</span> <span class="stringliteral">&#39;black&#39;</span>),</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                                       width=(2 <span class="keywordflow">if</span> vertex[<span class="stringliteral">&#39;Selected&#39;</span>] <span class="keywordflow">else</span> 1))</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                    canvas.create_line((vertex[0]+x)*grid+size,</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                                       (vertex[1]+y)*grid-size,</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                                       (vertex[0]+x)*grid-size,</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                                       (vertex[1]+y)*grid+size,</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                                       fill=(<span class="stringliteral">&#39;blue&#39;</span> <span class="keywordflow">if</span> vertex[<span class="stringliteral">&#39;Selected&#39;</span>] <span class="keywordflow">else</span> <span class="stringliteral">&#39;black&#39;</span>),</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                                       width=(2 <span class="keywordflow">if</span> vertex[<span class="stringliteral">&#39;Selected&#39;</span>] <span class="keywordflow">else</span> 1))</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">def </span>__add__(self,other):</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="keywordflow">if</span> isinstance(other, Wire):</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            <span class="keywordflow">return</span> Wire(self[<span class="stringliteral">&#39;Vertices&#39;</span>]+other[<span class="stringliteral">&#39;Vertices&#39;</span>])</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">elif</span> isinstance(other,list):</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;            <span class="keywordflow">return</span> Wire(self[<span class="stringliteral">&#39;Vertices&#39;</span>]+other)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">def </span>InitFromProject(self,wireProject):</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        self.__init__()</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        self[<span class="stringliteral">&#39;Vertices&#39;</span>]=[Vertex(vertexProject[<span class="stringliteral">&#39;Coord&#39;</span>],vertexProject[<span class="stringliteral">&#39;Selected&#39;</span>]) <span class="keywordflow">for</span> vertexProject <span class="keywordflow">in</span> wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>]]</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">def </span>CoordinateList(self):</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">return</span> [vertex[<span class="stringliteral">&#39;Coord&#39;</span>] <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> self]</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ProjectFileBase.xhtml">SignalIntegrity.App.ProjectFileBase</a> <span class="keyword">import</span> XMLProperty</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="keyword">class </span>WireList(XMLProperty):</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        XMLProperty.__init__(self,<span class="stringliteral">&#39;Wires&#39;</span>,[Wire() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=Wire())</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    <span class="keyword">def </span>InitFromProject(self,wiresListProject):</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        self.__init__()</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        self.SetValue(<span class="keywordtype">None</span>,[Wire().InitFromProject(wireProject) <span class="keywordflow">for</span> wireProject <span class="keywordflow">in</span> wiresListProject])</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="keyword">def </span>RemoveEmptyWires(self):</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        wiresNeedRemoval=<span class="keyword">False</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        wl=self.GetValue()</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordflow">if</span> len(wire)&lt;2:</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                wiresNeedRemoval=<span class="keyword">True</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> wiresNeedRemoval:</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        nwl=WireList().GetValue()</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="keywordflow">if</span> len(wire)&gt;=2:</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                nwl.append(wire)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        self.SetValue(<span class="keywordtype">None</span>,nwl)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keyword">def </span>RemoveDuplicateVertices(self):</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        hasDuplicateVertices=<span class="keyword">False</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        wl=self.GetValue()</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;            <span class="keywordflow">if</span> hasDuplicateVertices:</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            <span class="keywordflow">if</span> len(wire)&lt;1:</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            lastVertexCoordinate=wire[0][<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> wire[1:]:</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                thisVertexCoordinate=vertex[<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                <span class="keywordflow">if</span> thisVertexCoordinate==lastVertexCoordinate:</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                    hasDuplicateVertices=<span class="keyword">True</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                lastVertexCoordinate=thisVertexCoordinate</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> hasDuplicateVertices:</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        nwl=WireList().GetValue()</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keywordflow">if</span> len(wire)&lt;1:</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            newWire=Wire()</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            lastVertex=wire[0]</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            newWire.append(lastVertex)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">for</span> thisVertex <span class="keywordflow">in</span> wire[1:]:</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                <span class="keywordflow">if</span> thisVertex[<span class="stringliteral">&#39;Coord&#39;</span>] != lastVertex[<span class="stringliteral">&#39;Coord&#39;</span>]:</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    newWire.append(thisVertex)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    lastVertex=thisVertex</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            <span class="keywordflow">if</span> len(newWire)&gt;=2:</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                nwl.append(newWire)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        self.SetValue(<span class="keywordtype">None</span>,nwl)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keyword">def </span>Direction(self,startCoord,endCoord):</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        vector=(endCoord[0]-startCoord[0],endCoord[1]-startCoord[1])</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="keywordflow">if</span> vector[0]==0:</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="comment"># this is a north south line</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">if</span> vector[1]&gt;0:</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;s&#39;</span> <span class="comment"># this is a south going line</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;            <span class="keywordflow">elif</span> vector[1]&lt;0:</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;n&#39;</span> <span class="comment"># this is a north going line</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;?&#39;</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">elif</span> vector[1]==0:</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="comment"># this is an east west line</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            <span class="keywordflow">if</span> vector[0]&gt;0:</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;e&#39;</span> <span class="comment"># this is an east going line</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">elif</span> vector[0]&lt;0:</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;w&#39;</span> <span class="comment"># this is a west going line</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                <span class="keywordflow">return</span> <span class="stringliteral">&#39;?&#39;</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&#39;?&#39;</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    <span class="keyword">def </span>InsertNeededVertices(self,deviceList):</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        <span class="comment"># walk along all of the wires and put vertices at any locations where a wire vertex is along a straight line of another wire</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        newWireList=WireList().GetValue()</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        wl=self.GetValue()</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keywordflow">for</span> thisWire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            newWire=Wire()</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            thisWireSegmentStart=thisWire[0]</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            newWire.append(thisWireSegmentStart)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> thisWire[1:]:</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                thisWireSegmentEnd = vertex</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                vector=(thisWireSegmentEnd[<span class="stringliteral">&#39;Coord&#39;</span>][0]-thisWireSegmentStart[<span class="stringliteral">&#39;Coord&#39;</span>][0],thisWireSegmentEnd[<span class="stringliteral">&#39;Coord&#39;</span>][1]-thisWireSegmentStart[<span class="stringliteral">&#39;Coord&#39;</span>][1])</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                <span class="keywordflow">if</span> vector[0]==0:</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                    <span class="comment"># this is a north south line</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                    <span class="keywordflow">if</span> vector[1]&gt;0:</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                        step=(0,1) <span class="comment"># this is a south going line</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    <span class="keywordflow">elif</span> vector[1]&lt;0:</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                        step=(0,-1) <span class="comment"># this is a north going line</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                        <span class="comment"># this should not be possible</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                        <span class="keywordflow">raise</span> ValueError</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                <span class="keywordflow">elif</span> vector[1]==0:</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                    <span class="comment"># this is an east west line</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                    <span class="keywordflow">if</span> vector[0]&gt;0:</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                        step=(1,0) <span class="comment"># this is an east going line</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    <span class="keywordflow">elif</span> vector[0]&lt;0:</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                        step=(-1,0) <span class="comment"># this is a west going line</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                        <span class="comment"># this should not be possible</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                        <span class="keywordflow">raise</span> ValueError</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                    <span class="comment"># this is some kind of diagonal line</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    step=(0,0)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keywordflow">if</span> step != (0,0):</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    <span class="comment"># step along this line checking the start and end points of all other lines</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    thisCoordToCheck = (thisWireSegmentStart[<span class="stringliteral">&#39;Coord&#39;</span>][0]+step[0],thisWireSegmentStart[<span class="stringliteral">&#39;Coord&#39;</span>][1]+step[1])</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                    <span class="keywordflow">while</span> thisCoordToCheck != thisWireSegmentEnd[<span class="stringliteral">&#39;Coord&#39;</span>]:</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                        vertexAddedAtThisCoordinate=<span class="keyword">False</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        <span class="keywordflow">for</span> otherWire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                            <span class="keywordflow">for</span> otherVertex <span class="keywordflow">in</span> otherWire:</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                <span class="keywordflow">if</span> otherVertex[<span class="stringliteral">&#39;Coord&#39;</span>] == thisCoordToCheck:</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                    <span class="comment"># found one - need to insert a vertex into this wire</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                    newWire.append(Vertex(thisCoordToCheck))</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                                    vertexAddedAtThisCoordinate=<span class="keyword">True</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                        <span class="keywordflow">if</span> <span class="keywordflow">not</span> vertexAddedAtThisCoordinate:</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                            <span class="keywordflow">for</span> device <span class="keywordflow">in</span> deviceList:</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                                <span class="keywordflow">if</span> vertexAddedAtThisCoordinate:</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                                <span class="keywordflow">for</span> pinCoordinate <span class="keywordflow">in</span> device.partPicture.current.PinCoordinates():</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                    <span class="keywordflow">if</span> pinCoordinate == thisCoordToCheck:</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                        newWire.append(Vertex(thisCoordToCheck))</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                        vertexAddedAtThisCoordinate=<span class="keyword">True</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                        thisCoordToCheck = (thisCoordToCheck[0]+step[0],thisCoordToCheck[1]+step[1])</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                newWire.append(thisWireSegmentEnd)</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                thisWireSegmentStart=thisWireSegmentEnd</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            newWireList.append(newWire)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        self.SetValue(<span class="keywordtype">None</span>,newWireList)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    <span class="keyword">def </span>SplitDottedWires(self,dotList):</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        wl=self.GetValue()</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        splitAWire=<span class="keyword">True</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keywordflow">while</span> splitAWire:</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            splitAWire=<span class="keyword">False</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            <span class="keywordflow">for</span> wireIndex <span class="keywordflow">in</span> range(len(wl)):</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                wire = wl[wireIndex]</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                <span class="keywordflow">if</span> splitAWire:</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                <span class="keywordflow">for</span> vertexIndex <span class="keywordflow">in</span> range(1,len(wire)-1):</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;                    <span class="keywordflow">if</span> splitAWire:</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                    <span class="keywordflow">for</span> dot <span class="keywordflow">in</span> dotList:</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                        <span class="keywordflow">if</span> wire[vertexIndex][<span class="stringliteral">&#39;Coord&#39;</span>] == dot:</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                            newWire=Wire(wire[vertexIndex:])</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                            wl[wireIndex]=Wire(wire[:vertexIndex+1])</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                            wl.append(newWire)</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                            splitAWire=<span class="keyword">True</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                            <span class="keywordflow">break</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keyword">def </span>RemoveUnneededVertices(self):</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        unneededVertex=<span class="keyword">False</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        wl=self.GetValue()</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            <span class="keywordflow">if</span> unneededVertex:</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            <span class="keywordflow">for</span> vertexIndex <span class="keywordflow">in</span> range(1,len(wire)-1):</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                vertexBefore=wire[vertexIndex-1]</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                thisVertex=wire[vertexIndex]</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                vertexAfter=wire[vertexIndex+1]</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                directionSegmentBefore = self.Direction(vertexBefore,thisVertex)</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                directionSegmentAfter = self.Direction(thisVertex,vertexAfter)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                <span class="keywordflow">if</span> directionSegmentBefore == <span class="stringliteral">&#39;?&#39;</span> <span class="keywordflow">or</span> directionSegmentAfter == <span class="stringliteral">&#39;?&#39;</span>:</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                <span class="keywordflow">if</span> directionSegmentBefore == directionSegmentAfter:</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                    unneededVertex=<span class="keyword">True</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> unneededVertex:</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        nwl=WireList().GetValue()</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            newWire=Wire()</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;            newWire.append(wire[0])</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keywordflow">for</span> vertexIndex <span class="keywordflow">in</span> range(1,len(wire)-1):</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;                vertexBefore=wire[vertexIndex-1]</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;                thisVertex=wire[vertexIndex]</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                vertexAfter=wire[vertexIndex+1]</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                directionSegmentBefore = self.Direction(vertexBefore,thisVertex)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;                directionSegmentAfter = self.Direction(thisVertex,vertexAfter)</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                <span class="keywordflow">if</span> directionSegmentBefore == <span class="stringliteral">&#39;?&#39;</span> <span class="keywordflow">or</span> directionSegmentAfter == <span class="stringliteral">&#39;?&#39;</span>:</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;                    newWire.append(thisVertex)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                <span class="keywordflow">if</span> directionSegmentBefore != directionSegmentAfter:</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                    newWire.append(thisVertex)</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;            newWire.append(wire[-1])</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;            nwl.append(newWire)</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;        self.SetValue(<span class="keywordtype">None</span>,nwl)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keyword">def </span>JoinUnDottedWires(self,dotList):</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        wl=self.GetValue()</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        removeWireIndexList = [<span class="keyword">False</span> <span class="keywordflow">for</span> index <span class="keywordflow">in</span> range(len(wl))]</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="keywordflow">for</span> thisWireIndex <span class="keywordflow">in</span> range(len(wl)):</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> removeWireIndexList[thisWireIndex]:</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                <span class="keywordflow">if</span> len(wl[thisWireIndex])&lt;2:</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;                    removeWireIndexList[thisWireIndex]=<span class="keyword">True</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> removeWireIndexList[thisWireIndex]:</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;                <span class="keywordflow">for</span> otherWireIndex <span class="keywordflow">in</span> range(thisWireIndex+1,len(wl)):</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;                    thisWireStartPoint=wl[thisWireIndex][0][<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;                    thisWireStartPointInDotList = thisWireStartPoint <span class="keywordflow">in</span> dotList</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;                    thisWireEndPoint=wl[thisWireIndex][-1][<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;                    thisWireEndPointInDotList = thisWireEndPoint <span class="keywordflow">in</span> dotList</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                    <span class="keywordflow">if</span> <span class="keywordflow">not</span> removeWireIndexList[otherWireIndex]:</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;                        <span class="keywordflow">if</span> len(wl[otherWireIndex])&lt;2:</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                            removeWireIndexList[otherWireIndex]=<span class="keyword">True</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                    <span class="keywordflow">if</span> <span class="keywordflow">not</span> removeWireIndexList[otherWireIndex]:</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                        otherWireStartPoint=wl[otherWireIndex][0][<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;                        otherWireStartPointInDotList = otherWireStartPoint <span class="keywordflow">in</span> dotList</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                        otherWireEndPoint=wl[otherWireIndex][-1][<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                        otherWireEndPointInDotList = otherWireEndPoint <span class="keywordflow">in</span> dotList</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;                        <span class="keywordflow">if</span> thisWireEndPoint == otherWireStartPoint <span class="keywordflow">and</span> <span class="keywordflow">not</span> thisWireEndPointInDotList <span class="keywordflow">and</span> <span class="keywordflow">not</span> otherWireStartPointInDotList:</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                            wl[thisWireIndex]=wl[thisWireIndex]+wl[otherWireIndex][1:]</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                            removeWireIndexList[otherWireIndex]=<span class="keyword">True</span></div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;                        <span class="keywordflow">elif</span> thisWireStartPoint == otherWireEndPoint <span class="keywordflow">and</span> <span class="keywordflow">not</span> thisWireStartPointInDotList <span class="keywordflow">and</span> <span class="keywordflow">not</span> otherWireEndPointInDotList:</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                            wl[thisWireIndex]=wl[otherWireIndex]+wl[thisWireIndex][1:]</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                            removeWireIndexList[otherWireIndex]=<span class="keyword">True</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                        <span class="keywordflow">elif</span> thisWireStartPoint == otherWireStartPoint <span class="keywordflow">and</span> <span class="keywordflow">not</span> thisWireStartPointInDotList <span class="keywordflow">and</span> <span class="keywordflow">not</span> otherWireStartPointInDotList:</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                            wl[otherWireIndex].reverse()</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                            wl[thisWireIndex]= wl[otherWireIndex]+wl[thisWireIndex][1:]</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                            removeWireIndexList[otherWireIndex]=<span class="keyword">True</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                        <span class="keywordflow">elif</span> thisWireEndPoint == otherWireEndPoint <span class="keywordflow">and</span> <span class="keywordflow">not</span> thisWireEndPointInDotList <span class="keywordflow">and</span> <span class="keywordflow">not</span> otherWireEndPointInDotList:</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                            wl[otherWireIndex].reverse()</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                            wl[thisWireIndex]=wl[thisWireIndex]+wl[otherWireIndex][1:]</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                            removeWireIndexList[otherWireIndex]=<span class="keyword">True</span></div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> <span class="keyword">True</span> <span class="keywordflow">in</span> removeWireIndexList:</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="comment"># remove all of the wires to be removed</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        keepDeletingWires = <span class="keyword">True</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordflow">while</span> keepDeletingWires:</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            keepDeletingWires = <span class="keyword">False</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            <span class="keywordflow">for</span> wireIndex <span class="keywordflow">in</span> range(len(wl)):</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                <span class="keywordflow">if</span> removeWireIndexList[wireIndex]==<span class="keyword">True</span>:</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                    del wl[wireIndex]</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;                    del removeWireIndexList[wireIndex]</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                    keepDeletingWires=<span class="keyword">True</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;        <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;    <span class="keyword">def </span>DotList(self,deviceList):</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        dotList=[]</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        wl=self.GetValue()</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        <span class="comment"># make a list of all coordinates</span></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        coordList=[]</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        <span class="keywordflow">for</span> device <span class="keywordflow">in</span> deviceList:</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;            coordList=coordList+device.PinCoordinates()</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> wl:</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            vertexCoordinates=[vertex[<span class="stringliteral">&#39;Coord&#39;</span>] <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> wire]</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;            <span class="comment">#vertex coordinates count as two except for the endpoints</span></div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            coordList=coordList+vertexCoordinates+vertexCoordinates[1:-1]</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        uniqueCoordList=list(set(coordList))</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="keywordflow">for</span> coord <span class="keywordflow">in</span> uniqueCoordList:</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <span class="keywordflow">if</span> coordList.count(coord)&gt;2:</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                dotList.append(coord)</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        <span class="keywordflow">return</span> dotList</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keyword">def </span>ConsolidateWires(self,schematic):</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        deviceList=schematic.deviceList</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;        self.RemoveEmptyWires()</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        self.RemoveDuplicateVertices()</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        self.InsertNeededVertices(deviceList)</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        dotList=self.DotList(deviceList)</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;        self.SplitDottedWires(dotList)</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        self.JoinUnDottedWires(dotList)</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        self.RemoveUnneededVertices()</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;    <span class="keyword">def </span>EquiPotentialWireList(self):</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            wireList = copy.deepcopy(self.GetValue())</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            <span class="comment"># for the purposes of the netlist, wires are just lists of vertices</span></div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            <span class="comment"># any vertex shared among wires makes them equipotential, so even though we would not draw the wires</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            <span class="comment"># as added, their list of vertices can be added to form the equipotential line for purposes of determining</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;            <span class="comment"># device connections</span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;            <span class="keywordflow">for</span> wireIndex <span class="keywordflow">in</span> range(len(wireList)):</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                joinedOne=<span class="keyword">True</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                <span class="keywordflow">while</span> joinedOne:</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                    joinedOne=<span class="keyword">False</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                    <span class="keywordflow">if</span> len(wireList[wireIndex])&gt;0:</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                        <span class="keywordflow">for</span> otherWireIndex <span class="keywordflow">in</span> range(len(wireList)):</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                            <span class="keywordflow">if</span> len(wireList[otherWireIndex])&gt;0 <span class="keywordflow">and</span> wireIndex != otherWireIndex:</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                                <span class="keywordflow">if</span> len(set(wireList[wireIndex].CoordinateList()).intersection(set(wireList[otherWireIndex].CoordinateList())))&gt;0:</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                                    <span class="comment"># there is a common vertex among these wires</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                    <span class="comment"># add the wires</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                                    wireList[wireIndex][<span class="stringliteral">&#39;Vertices&#39;</span>]=wireList[wireIndex][<span class="stringliteral">&#39;Vertices&#39;</span>]+wireList[otherWireIndex][<span class="stringliteral">&#39;Vertices&#39;</span>]</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                    wireList[wireIndex][<span class="stringliteral">&#39;Vertices&#39;</span>]=[Vertex(survived) <span class="keywordflow">for</span> survived <span class="keywordflow">in</span> list(set([vertex[<span class="stringliteral">&#39;Coord&#39;</span>] <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> wireList[wireIndex][<span class="stringliteral">&#39;Vertices&#39;</span>]]))]</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                                    wireList[otherWireIndex]=Wire()</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;                                    joinedOne=<span class="keyword">True</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;                                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;            <span class="comment"># now keep only surviving wires</span></div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;            newWireList=WireList().GetValue()</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;            <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> wireList:</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;                <span class="keywordflow">if</span> len(wire)&gt;0:</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;                    newWireList.append(wire)</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;            <span class="keywordflow">return</span> newWireList</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ProjectFileBase_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ProjectFileBase.xhtml">SignalIntegrity.App.ProjectFileBase</a></div><div class="ttdef"><b>Definition:</b> <a href="ProjectFileBase_8py_source.xhtml#l00001">ProjectFileBase.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ProjectFile_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ProjectFile.xhtml">SignalIntegrity.App.ProjectFile</a></div><div class="ttdef"><b>Definition:</b> <a href="ProjectFile_8py_source.xhtml#l00001">ProjectFile.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
