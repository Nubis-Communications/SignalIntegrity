<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Test/SignalIntegrityAppTestHelper.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.11</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_e71a6eec2293f3b0221b0b7a67ee07ec.xhtml">Test</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SignalIntegrityAppTestHelper.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Test_1_1SignalIntegrityAppTestHelper.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">SignalIntegrityAppTestHelper.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">import</span> os</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">class </span>SignalIntegrityAppTestHelper:</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    relearn=<span class="keyword">True</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    plotErrors=<span class="keyword">False</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    forceWritePictures=<span class="keyword">False</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    SPCompareResolution=1e-3</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">def </span>__init__(self,path):</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        self.path=path</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keyword">def </span>FileNameForTest(self,filename):</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        <span class="keywordflow">return</span> filename.replace(<span class="stringliteral">&#39;..&#39;</span>, <span class="stringliteral">&#39;Up&#39;</span>).replace(<span class="stringliteral">&#39;/&#39;</span>,<span class="stringliteral">&#39;_&#39;</span>).split(<span class="stringliteral">&#39;.&#39;</span>)[0]</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">def </span>PictureChecker(self,pysi,filename):</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.checkPictures:</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        currentDirectory=os.getcwd()</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        testFilename=self.FileNameForTest(filename)+<span class="stringliteral">&#39;.TpX&#39;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1TpX.xhtml">SignalIntegrity.App.TpX</a> <span class="keyword">import</span> TpX</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1TikZ.xhtml">SignalIntegrity.App.TikZ</a> <span class="keyword">import</span> TikZ</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            tpx=pysi.Drawing.DrawSchematic(TpX()).Finish()</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            tikz=pysi.Drawing.DrawSchematic(TikZ()).Finish()</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            tpx.lineList=tpx.lineList+tikz.lineList</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            self.assertTrue(<span class="keyword">False</span>,filename + <span class="stringliteral">&#39; couldnt be drawn&#39;</span>)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(testFilename) <span class="keywordflow">or</span> self.forceWritePictures:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            tpx.WriteToFile(testFilename)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.relearn:</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                self.assertTrue(<span class="keyword">False</span>, testFilename + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="keyword">with</span> open(testFilename) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;            regression=f.readlines()</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="keywordflow">if</span> tpx.lineList==regression:</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            os.chdir(currentDirectory)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="comment"># if we get here, we need a more complicated test because ordering may have changed</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        self.assertTrue(len(tpx.lineList)==len(regression),testFilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        itemsToCheck=[<span class="keyword">True</span> <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(len(regression))]</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">for</span> tpxline <span class="keywordflow">in</span> tpx.lineList:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            foundOne=<span class="keyword">False</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(regression)):</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                <span class="keywordflow">if</span> itemsToCheck[k] <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundOne:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                    <span class="keywordflow">if</span> tpxline==regression[k]:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                        itemsToCheck[k] = <span class="keyword">False</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                        foundOne=<span class="keyword">True</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                <span class="keywordflow">if</span> foundOne:</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;            self.assertTrue(foundOne,testFilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        print(testFilename+<span class="stringliteral">&#39; okay, but in different order&#39;</span>)</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        os.chdir(currentDirectory)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">def </span>NetListChecker(self,pysi,filename):</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        currentDirectory=os.getcwd()</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        testFilename=self.FileNameForTest(filename)+<span class="stringliteral">&#39;.net&#39;</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            netlist=pysi.Drawing.schematic.NetList().Text()</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            self.assertTrue(<span class="keyword">False</span>,filename + <span class="stringliteral">&#39; couldnt produce netlist&#39;</span>)</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        netlist=[line+<span class="stringliteral">&#39;\n&#39;</span> <span class="keywordflow">for</span> line <span class="keywordflow">in</span> netlist]</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(testFilename):</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keyword">with</span> open(testFilename,<span class="stringliteral">&quot;w&quot;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">for</span> line <span class="keywordflow">in</span> netlist:</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    f.write(line)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.relearn:</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    self.assertTrue(<span class="keyword">False</span>, testFilename + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="keyword">with</span> open(testFilename) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;            regression=f.readlines()</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        self.assertTrue(len(netlist)==len(regression),testFilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">for</span> netline,regressionline <span class="keywordflow">in</span> zip(netlist,regression):</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            <span class="keywordflow">if</span> netline != regressionline:</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                <span class="keywordflow">if</span> (netline[:len(<span class="stringliteral">&#39;connect&#39;</span>)]==<span class="stringliteral">&#39;connect&#39;</span>) <span class="keywordflow">and</span> (regression[:len(<span class="stringliteral">&#39;connect&#39;</span>)]==<span class="stringliteral">&#39;connect&#39;</span>):</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                    netconnecttokens=netline[len(<span class="stringliteral">&#39;connect&#39;</span>):]</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                    regressiontokens=regressionline[len(<span class="stringliteral">&#39;connect&#39;</span>):]</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                    <span class="keywordflow">if</span> len(netconnecttokens)//2*2!=len(netconnecttokens):</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        self.fail(testFilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="keywordflow">if</span> len(regressiontokens)//2*2!=len(regressiontokens):</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                        self.fail(testFilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keywordflow">if</span> len(netconnecttokens)!=len(regressiontokens):</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        self.fail(testFilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    nets=[(netconnecttokens[i],netconnecttokens[i+1]) <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(netconnecttokens)/2)]</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    regs=[(regressiontokens[i],regressiontokens[i+1]) <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(regressiontokens)/2)]</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    itemsToCheck=[<span class="keyword">True</span> <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(len(regs))]</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    <span class="keywordflow">for</span> net <span class="keywordflow">in</span> nets:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                        foundOne=<span class="keyword">False</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                        <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(regs)):</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                            <span class="keywordflow">if</span> itemsToCheck[k] <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundOne:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                <span class="keywordflow">if</span> net==regs[k]:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                                    itemsToCheck[k] = <span class="keyword">False</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                    foundOne=<span class="keyword">True</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                            <span class="keywordflow">if</span> foundOne:</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        self.assertTrue(foundOne,testFilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    print(testFilename+<span class="stringliteral">&#39; okay, but connections in different order&#39;</span>)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        os.chdir(currentDirectory)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">def </span>SParameterRegressionChecker(self,sp,spfilename):</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        <span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterFile_1_1SParameterFile.xhtml">SignalIntegrity.Lib.SParameters.SParameterFile</a> <span class="keyword">import</span> SParameterFile</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        currentDirectory=os.getcwd()</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(spfilename):</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            sp.WriteToFile(spfilename)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.relearn:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                self.assertTrue(<span class="keyword">False</span>, spfilename + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        regression=SParameterFile(spfilename)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        SpAreEqual=self.SParametersAreEqual(sp, regression,self.SPCompareResolution)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> SpAreEqual:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">if</span> SignalIntegrityAppTestHelper.plotErrors:</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                plt.clf()</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                plt.title(spfilename)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                plt.xlabel(<span class="stringliteral">&#39;frequency (Hz)&#39;</span>)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                plt.ylabel(<span class="stringliteral">&#39;amplitude&#39;</span>)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(regression.m_P):</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(regression.m_P):</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        plt.semilogy(regression.f(),[abs(sp[n][r][c]-regression[n][r][c]) <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(regression))],label=<span class="stringliteral">&#39;S&#39;</span>+str(r+1)+str(c+1))</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                plt.legend(loc=<span class="stringliteral">&#39;upper right&#39;</span>)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                plt.grid(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                plt.show()</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(regression.m_P):</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(regression.m_P):</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                        plt.clf()</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        plt.title(<span class="stringliteral">&#39;S&#39;</span>+str(r+1)+str(c+1)+<span class="stringliteral">&#39; Magnitude&#39;</span>)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                        plt.plot(sp.FrequencyResponse(r+1,c+1).Frequencies(),sp.FrequencyResponse(r+1,c+1).Values(<span class="stringliteral">&#39;dB&#39;</span>),label=<span class="stringliteral">&#39;calculated&#39;</span>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        plt.plot(regression.FrequencyResponse(r+1,c+1).Frequencies(),regression.FrequencyResponse(r+1,c+1).Values(<span class="stringliteral">&#39;dB&#39;</span>),label=<span class="stringliteral">&#39;regression&#39;</span>)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        plt.xlabel(<span class="stringliteral">&#39;frequency (Hz)&#39;</span>)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                        plt.ylabel(<span class="stringliteral">&#39;amplitude (dB)&#39;</span>)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                        plt.legend(loc=<span class="stringliteral">&#39;upper right&#39;</span>)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        plt.grid(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                        plt.show()</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160; </div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                        plt.clf()</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        plt.title(<span class="stringliteral">&#39;S&#39;</span>+str(r+1)+str(c+1)+<span class="stringliteral">&#39; Phase&#39;</span>)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        plt.plot(sp.FrequencyResponse(r+1,c+1).Frequencies(),sp.FrequencyResponse(r+1,c+1).Values(<span class="stringliteral">&#39;deg&#39;</span>),label=<span class="stringliteral">&#39;calculated&#39;</span>)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        plt.plot(regression.FrequencyResponse(r+1,c+1).Frequencies(),regression.FrequencyResponse(r+1,c+1).Values(<span class="stringliteral">&#39;deg&#39;</span>),label=<span class="stringliteral">&#39;regression&#39;</span>)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                        plt.xlabel(<span class="stringliteral">&#39;frequency (Hz)&#39;</span>)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                        plt.ylabel(<span class="stringliteral">&#39;amplitude (dB)&#39;</span>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                        plt.legend(loc=<span class="stringliteral">&#39;upper right&#39;</span>)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        plt.grid(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        plt.show()</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        self.assertTrue(SpAreEqual,spfilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        os.chdir(currentDirectory)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keyword">def </span>CalibrationRegressionChecker(self,cal,calfilename):</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml">SignalIntegrity.Lib.Measurement.Calibration.Calibration</a> <span class="keyword">import</span> Calibration</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        currentDirectory=os.getcwd()</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(calfilename):</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            cal.WriteToFile(calfilename)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.relearn:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                self.assertTrue(<span class="keyword">False</span>, calfilename + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        regression=Calibration(0,0).ReadFromFile(calfilename)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        regressionFixtures=regression.Fixtures()</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        calFixtures=cal.Fixtures()</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        SpAreEqual=all([self.SParametersAreEqual(calFixture, regressionFixture, 1e-3)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                            <span class="keywordflow">for</span> calFixture,regressionFixture <span class="keywordflow">in</span> zip(calFixtures,regressionFixtures)])</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        self.assertTrue(SpAreEqual,calfilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        os.chdir(currentDirectory)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">def </span>WaveformRegressionChecker(self,wf,wffilename):</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform</a> <span class="keyword">import</span> Waveform</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        currentDirectory=os.getcwd()</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        os.chdir(self.path)     </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(wffilename):</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            wf.WriteToFile(wffilename)</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.relearn:</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                self.assertTrue(<span class="keyword">False</span>, wffilename + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        regression=Waveform().ReadFromFile(wffilename)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        self.assertTrue(wf==regression,wffilename + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        os.chdir(currentDirectory)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">def </span>Preliminary(self,filename,checkPicture=True,checkNetlist=True):</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a> <span class="keyword">import</span> SignalIntegrityAppHeadless</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        pysi=SignalIntegrityAppHeadless()</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        self.assertTrue(pysi.OpenProjectFile(os.path.realpath(filename)),filename + <span class="stringliteral">&#39; couldnt be opened&#39;</span>)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="comment">#pysi.SaveProject()</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">if</span> checkPicture:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            self.PictureChecker(pysi,filename)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span> checkNetlist:</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            self.NetListChecker(pysi,filename)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">return</span> pysi</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keyword">def </span>SParameterResultsChecker(self,filename,checkPicture=True,checkNetlist=True):</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        pysi=self.Preliminary(filename, checkPicture, checkNetlist)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        result=pysi.CalculateSParameters()</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        self.assertIsNotNone(result, filename+<span class="stringliteral">&#39; produced none&#39;</span>)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        spfilename=result[1]</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        spfilename=self.FileNameForTest(filename)+<span class="stringliteral">&#39;.&#39;</span>+spfilename.split(<span class="stringliteral">&#39;.&#39;</span>)[-1]</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        sp=result[0]</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        self.SParameterRegressionChecker(sp, spfilename)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="keywordflow">return</span> result</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keyword">def </span>CalibrationResultsChecker(self,filename,checkPicture=True,checkNetlist=True):</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        pysi=self.Preliminary(filename, checkPicture, checkNetlist)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        result=pysi.CalculateErrorTerms()</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        self.assertIsNotNone(result, filename+<span class="stringliteral">&#39; produced none&#39;</span>)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        calfilename=result[1]</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        calfilename=self.FileNameForTest(filename)+<span class="stringliteral">&#39;.&#39;</span>+calfilename.split(<span class="stringliteral">&#39;.&#39;</span>)[-1]</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        cal=result[0]</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        self.CalibrationRegressionChecker(cal,calfilename)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">return</span> result</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">def </span>SimulationResultsChecker(self,filename,checkPicture=True,checkNetlist=True):</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        pysi=self.Preliminary(filename, checkPicture, checkNetlist)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        result=pysi.Simulate()</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        self.assertIsNotNone(result, filename+<span class="stringliteral">&#39; produced none&#39;</span>)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        sourceNames=result[0]</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        outputNames=result[1]</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        transferMatrices=result[2]</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        outputWaveforms=result[3]</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            sp=transferMatrices.SParameters()</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            ports=sp.m_P</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="keywordflow">if</span> ports == 0:</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                <span class="keywordflow">raise</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            self.assertTrue(<span class="keyword">False</span>, filename + <span class="stringliteral">&#39;has no transfer matrices&#39;</span>)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        spfilename=self.FileNameForTest(filename)+<span class="stringliteral">&#39;.s&#39;</span>+str(ports)+<span class="stringliteral">&#39;p&#39;</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        self.SParameterRegressionChecker(sp, spfilename)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(outputNames)):</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            wf=outputWaveforms[i]</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            wffilename=self.FileNameForTest(filename)+<span class="stringliteral">&#39;_&#39;</span>+outputNames[i]+<span class="stringliteral">&#39;.txt&#39;</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            self.WaveformRegressionChecker(wf, wffilename)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> result</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">def </span>VirtualProbeResultsChecker(self,filename,checkPicture=True,checkNetlist=True):</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        pysi=self.Preliminary(filename, checkPicture, checkNetlist)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        result=pysi.VirtualProbe()</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        self.assertIsNotNone(result, filename+<span class="stringliteral">&#39; produced none&#39;</span>)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        measNames=result[0]</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        outputNames=result[1]</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        transferMatrices=result[2]</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        outputWaveforms=result[3]</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            sp=transferMatrices.SParameters()</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            ports=sp.m_P</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">if</span> ports == 0:</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                <span class="keywordflow">raise</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            self.assertTrue(<span class="keyword">False</span>, filename + <span class="stringliteral">&#39;has no transfer matrices&#39;</span>)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        spfilename=self.FileNameForTest(filename)+<span class="stringliteral">&#39;.s&#39;</span>+str(ports)+<span class="stringliteral">&#39;p&#39;</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        self.SParameterRegressionChecker(sp, spfilename)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(outputNames)):</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            wf=outputWaveforms[i]</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            wffilename=self.FileNameForTest(filename)+<span class="stringliteral">&#39;_&#39;</span>+outputNames[i]+<span class="stringliteral">&#39;.txt&#39;</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            self.WaveformRegressionChecker(wf, wffilename)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">def </span>DeembeddingResultsChecker(self,filename,checkPicture=True,checkNetlist=True):</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        pysi=self.Preliminary(filename, checkPicture, checkNetlist)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        result=pysi.Deembed()</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        self.assertIsNotNone(result, filename+<span class="stringliteral">&#39; produced none&#39;</span>)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        os.chdir(self.path)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        spfilenames=result[0]</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        spfilenames=[self.FileNameForTest(filename)+<span class="stringliteral">&#39;_&#39;</span>+spf <span class="keywordflow">for</span> spf <span class="keywordflow">in</span> spfilenames]</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        sps=result[1]</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(spfilenames)):</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            sp=sps[i]</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            spfilename=spfilenames[i]+<span class="stringliteral">&#39;.s&#39;</span>+str(sp.m_P)+<span class="stringliteral">&#39;p&#39;</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            self.SParameterRegressionChecker(sp, spfilename)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="keywordflow">return</span> result</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1TpX_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1TpX.xhtml">SignalIntegrity.App.TpX</a></div><div class="ttdef"><b>Definition:</b> <a href="TpX_8py_source.xhtml#l00001">TpX.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2TimeDomain_2Waveform_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a></div><div class="ttdef"><b>Definition:</b> <a href="SignalIntegrityAppHeadless_8py_source.xhtml#l00001">SignalIntegrityAppHeadless.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterFile_1_1SParameterFile_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterFile_1_1SParameterFile.xhtml">SignalIntegrity.Lib.SParameters.SParameterFile.SParameterFile</a></div><div class="ttdoc">class for s-parameters read from a file</div><div class="ttdef"><b>Definition:</b> <a href="SParameterFile_8py_source.xhtml#l00037">SParameterFile.py:37</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1TikZ_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1TikZ.xhtml">SignalIntegrity.App.TikZ</a></div><div class="ttdef"><b>Definition:</b> <a href="TikZ_8py_source.xhtml#l00001">TikZ.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration</a></div><div class="ttdoc">Generates calibrated s-parameter measurements.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00036">Calibration.py:36</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
