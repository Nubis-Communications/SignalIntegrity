<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Eye/EyeDiagramBitmap.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.3.0</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_4c0c236aecfb4f795010765f5a0c499e.xhtml">Eye</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">EyeDiagramBitmap.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">EyeDiagramBitmap.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1CallBacker.xhtml">SignalIntegrity.Lib.CallBacker</a> <span class="keyword">import</span> CallBacker</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1ResultsCache.xhtml">SignalIntegrity.Lib.ResultsCache</a> <span class="keyword">import</span> ResultsCache</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters_1_1WaveformTrimmer_1_1WaveformTrimmer.xhtml">SignalIntegrity.Lib.TimeDomain.Filters.WaveformTrimmer</a> <span class="keyword">import</span> WaveformTrimmer</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform</a> <span class="keyword">import</span> TimeDescriptor,Waveform</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Rat_1_1Rat.xhtml">SignalIntegrity.Lib.Rat.Rat</a> <span class="keyword">import</span> Rat</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">import</span> math</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">import</span> copy</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">import</span> numpy <span class="keyword">as</span> np</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">import</span> hashlib</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">class </span>Pixelator(object):</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a8388d249b60bce6843e31357121c36d4">__init__</a>(self,rows,columns,step=1,mode=&#39;Fixed&#39;):</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        self.rows=rows</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        self.columns=columns</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        self.step=step</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        self.auto=(mode==<span class="stringliteral">&#39;Auto&#39;</span>)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">def </span>Hits(self,r,c):</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        R=self.rows; C=self.columns</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        lowestr=r-0.5</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        rl=int(math.floor(lowestr))</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        highestr=r+0.5</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        rh=int(math.floor(highestr))</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        lrh=lowestr-rl</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        lrl=1-lrh</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        lowestc=c-0.5</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        cl=int(math.floor(lowestc))</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        highestc=c+0.5</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        ch=int(math.floor(highestc))</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        lch=lowestc-cl</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        lcl=1-lch</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        rlValid=(0&lt;=rl&lt;R)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        rhValid=(0&lt;=rh&lt;R)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span> cl&lt;0:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            cl=cl+C</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">if</span> ch&gt;=C:</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;            ch=ch-C</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        clValid=(0&lt;=cl&lt;C)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        chValid=(0&lt;=ch&lt;C)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        results=[]</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">if</span> rlValid <span class="keywordflow">and</span> clValid: results+=[((rl,cl),(lrl,lcl),lrl*lcl/self.step)]</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">if</span> rhValid <span class="keywordflow">and</span> clValid: results+=[((rh,cl),(lrh,lcl),lrh*lcl/self.step)]</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        <span class="keywordflow">if</span> rlValid <span class="keywordflow">and</span> chValid: results+=[((rl,ch),(lrl,lch),lrl*lch/self.step)]</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">if</span> rhValid <span class="keywordflow">and</span> chValid: results+=[((rh,ch),(lrh,lch),lrh*lch/self.step)]</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">#         for result in results:</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">#             print(f&quot;({result[0][0]},{result[0][1]}) = {result[1][0]}*{result[1][1]}={result[2]}&quot;)</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">return</span> results</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">def </span>Results(self,ri,ci,rf,cf,useFirst=False):</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        C=self.columns</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        steps=self.step <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.auto <span class="keywordflow">else</span> max(1,min(int(math.ceil(2*abs(rf-ri))),self.step))</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">if</span> ci&gt;cf: cf=cf+C</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        cspan=cf-ci</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        rspan=rf-ri</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        c=[n/steps*cspan+ci <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(steps+1)]</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        r=[n/steps*rspan+ri <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(steps+1)]</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        results=[]</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(steps+1):</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">if</span> n!=0 <span class="keywordflow">or</span> useFirst:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                results.extend(self.Hits(r[n],c[n]))</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="keywordflow">return</span> results</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml">EyeDiagramBitmap</a>(<a class="code" href="classSignalIntegrity_1_1Lib_1_1CallBacker_1_1CallBacker.xhtml">CallBacker</a>,<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml">ResultsCache</a>):</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;Generates the eye diagram bitmap and many associated measurements from it</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="stringliteral">        @note After construction, there are limitations on the order of further downstream processing.  The</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="stringliteral">        recommended order is:</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="stringliteral">        1.  Constructor</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="stringliteral">        2.  ApplyJitterNoise</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="stringliteral">        3.  AutoAlign</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="stringliteral">        4.  Measure</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="stringliteral">        5.  Bathtub</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="stringliteral">        6.  Annotations</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="stringliteral">        7.  CreateImage</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">HashValue</a>(self,stuffToHash=&#39;&#39;):</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Generates the hash for a definition.  </span></div>
<div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml">   99</a></span>&#160;<span class="stringliteral">        It is formed by hashing the bitmap definition with whatever else is hashed.</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="stringliteral">        @param stuffToHash repr of stuff to hash</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="stringliteral">        @remark derived classes should override this method and call the base class HashValue with their stuff added</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="stringliteral">        @return integer hash value</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        stuffToHash=stuffToHash+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aee6d6ef03843eaf236413153e66bd92f">YAxisMode</a>)+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aca2c4e71bf2d54413a2b37acec2dffcc">YMax</a>)+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a60e268a98903daa76a9025f711447f3b">YMin</a>)+\</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aa831315374a492602366faa359d393d7">RowsSpecified</a>)+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a83c5b7515727772548c85e793fc9194a">Cols</a>)+repr(Waveform.adaptionStrategy)+\</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a>)+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aededcf789248079b119fb0daa6b0ccdf">prbswf</a>)+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ab32f24ff7950181d534e61711f66762c">EnhancementMode</a>)+\</div>
<div class="line"><a name="l00107"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">  107</a></span>&#160;                    repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ad66b8ac260dc454871a64821e28df529">EnhancementSteps</a>)+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a>)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">return</span> hashlib.sha256(stuffToHash.encode()).hexdigest()</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160; </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a8388d249b60bce6843e31357121c36d4">__init__</a>(self,callback=None,</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                 cacheFileName=None,</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                 YAxisMode=&#39;Auto&#39;,</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                 YMax=None, <span class="comment"># ignored if YAxisMode is Auto</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                 YMin=None, <span class="comment"># ignored if YAxisMode is Auto</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                 Rows=None,</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                 Cols=None,</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                 BaudRate=None,</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                 prbswf=None,</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                 EnhancementMode=&#39;Auto&#39;, <span class="comment"># can be Auto, Fixed, or None</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                 EnhancementSteps=10, <span class="comment"># ignored unless EnhancementMode is Fixed</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                 BitsPerSymbol=1, <span class="comment"># 1 for NRZ, 2 for PAM-4  (3 for PAM-8!?)</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                 ):</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Constructor</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="stringliteral">        Attempts to generate an eye diagram bitmap from the definition provided.  The bitmap generated here is</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="stringliteral">        not aligned -- it assumes that the unit interval starts at zero time. (see AutoAlign for alignment).</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="stringliteral">        This class allows for caching of the bitmap if the cacheFileName is provided.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="stringliteral">        @param callback function reference (optional, defaults to None) callback function to call during calculation.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="stringliteral">        If a callback function is supplied, it should take one argument, being the percentage of the calculation progress.</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="stringliteral">        @param cacheFileName string file name (defaults to None) containing the base cached file name.</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="stringliteral">        Usually, this file name is the name of the project file joined to the name of the waveform with an</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="stringliteral">        underscore.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="stringliteral">        @param YAxisMode String, &#39;Auto&#39; or &#39;Fixed&#39; (defaults to &#39;Auto&#39;) defining the method of computing the</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="stringliteral">        y axis extents for the eye diagram.  &#39;Auto&#39; means to generate this axis depending on the extents of</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="stringliteral">        the input waveform.  &#39;Fixed&#39; means that these extents are defined in the</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="stringliteral">        YMax and YMin arguments.  &#39;Auto&#39; places the y axis such that it is 10% beyond the min and max extents of</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="stringliteral">        the waveform.</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="stringliteral">        @param YMax float, defaults to None, defining the upper extent of the y-axis in the bitmap when YAxisMode</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="stringliteral">        is provided as &#39;Fixed&#39;.  If YAxisMode is auto, this parameter is ignored.</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="stringliteral">        @param YMin float, defaults to None, defining the lower extent of the y-axis in the bitmap when YAxisMode</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="stringliteral">        is provided as &#39;Fixed&#39;.  If YAxisMode is auto, this parameter is ignored.</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="stringliteral">        @param Rows int, defaults to None, defining the number of rows in the eye diagram bitmap.</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="stringliteral">        @param Cols int, defaults to None, defining the number of columns in the eye diagram bitmap.</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="stringliteral">        @param BaudRate float, defaults to None, Baud or symbol rate for the waveform.</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="stringliteral">        @param prbswf instance of class Waveform, defaults to None, containing the serial data waveform used</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="stringliteral">        to generate the bitmap.</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="stringliteral">        @param EnhancementMode string, defaults to &#39;Auto&#39;, containing the enhancement mode -- can be &#39;Auto&#39;,</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="stringliteral">        &#39;Fixed&#39;, or &#39;None&#39;.  The eye diagram is generated from a waveform that is upsampled to a</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="stringliteral">        rate such that every point falls in a column of the bitmap.  When &#39;None&#39; is specified, for each point,</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="stringliteral">        the row is calculated (usually a probability straddling two rows) and the probability is counted.</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="stringliteral">        Sometimes, the waveform transitions multiple rows in between columns and this can lead to bitmaps with</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="stringliteral">        vertical holes.  This is not only visually undesirable but can play havoc with the measurements.  When</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="stringliteral">        &#39;Fixed&#39; is specified, for every point, the steps provided in EnhancementSteps is used.  This is slow and</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="stringliteral">        not really advised.  &#39;Auto&#39; strikes a balance and calculates how many rows have been traversed and</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="stringliteral">        calculates a step amount to fill in about two steps per row.  &#39;Auto&#39; therefore dynamically adjusts the</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="stringliteral">        step size and is the recommended mode.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="stringliteral">        @param EnhancementSteps int, defaults to 10, fixed number of steps to be used in &#39;Fixed&#39; EnhancementMode.</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="stringliteral">        @param BitsPerSymbol int, defaults to 1, number of bits per symbol.  One bit per symbol is NRZ, or PAM-2.</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;<span class="stringliteral">        Two bits per symbol is PAM-4, etc.  </span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="stringliteral">        At the end of construction, the bitmap can be accessed through a call to Bitmap.  </span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="stringliteral">        The construction initializes several member variables that contain computed or partially computed results</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="stringliteral">        as a result of further processing.  These are:</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="stringliteral">        *  self.BitmapLog - the logarithmic bitmap which is calculated in the call to Measure.</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="stringliteral">        *  self.measDict - the dictionary containing the measurement and bathtub curve calculation results</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="stringliteral">        produced in calls to Measure and Bathtub.</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="stringliteral">        *  self.annotationBitmap - the bitmap that is overlaid containing annotations on the eye created in the</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="stringliteral">        call to Annotations..</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="stringliteral">        *  self.img - the actual bitmap picture created in the call to CreateImage.  </span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="stringliteral">        @note After construction, there are limitations on the order of further downstream processing.  The</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="stringliteral">        recommended order is:</span></div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a8388d249b60bce6843e31357121c36d4">  172</a></span>&#160;<span class="stringliteral">        1.  Constructor</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="stringliteral">        2.  ApplyJitterNoise</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="stringliteral">        3.  AutoAlign</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="stringliteral">        4.  Measure</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="stringliteral">        5.  Bathtub</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="stringliteral">        6.  Annotations</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="stringliteral">        7.  CreateImage</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aee6d6ef03843eaf236413153e66bd92f">YAxisMode</a>=YAxisMode</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aca2c4e71bf2d54413a2b37acec2dffcc">YMax</a>=YMax</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a60e268a98903daa76a9025f711447f3b">YMin</a>=YMin</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aa831315374a492602366faa359d393d7">RowsSpecified</a>=Rows</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a83c5b7515727772548c85e793fc9194a">Cols</a>=Cols</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a>=BaudRate</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aededcf789248079b119fb0daa6b0ccdf">prbswf</a>=prbswf <span class="comment"># saved only for generating hash value</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ab32f24ff7950181d534e61711f66762c">EnhancementMode</a>=EnhancementMode</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ad66b8ac260dc454871a64821e28df529">EnhancementSteps</a>=EnhancementSteps</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a>=BitsPerSymbol</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">NoiseSigma</a>=0.</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a86d0d51ceb4bc3bd26707520f257a5a4">img</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160; </div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        CallBacker.__init__(self,callback)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        ResultsCache.__init__(self,<span class="stringliteral">&#39;EyeDiagramBitMap&#39;</span>,cacheFileName)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160; </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#acaed8551afefa9ad488b67b7a9a8ed40">CheckCache</a>():</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1CallBacker_1_1CallBacker.xhtml#ad1aebee41f7b067b9fc11c28f87b27ba">CallBack</a>(100.0)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160; </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        baudRate=BaudRate</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        UI=1./baudRate</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        R=Rows; C=Cols</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        Fs=baudRate*C</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        UpsampleFactor=Fs/prbswf.td.Fs</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160; </div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="comment"># The waveform is adapted to the new sample rate.  This puts it on the same sample frame as the original waveform, such that there</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="comment"># is the assumption that there is a point at exactly time zero, and that is the center of the unit interval.</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="comment"># the amount of points to remove is trimmed from the left to make the very first sample at the center of a unit interval.</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>=prbswf.Adapt(<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(prbswf.td.H,prbswf.td.K*UpsampleFactor,Fs))</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters_1_1WaveformTrimmer_1_1WaveformTrimmer.xhtml">WaveformTrimmer</a>(C-int(round((self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.H-math.floor(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.H/UI)*UI)*self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.Fs)),0).TrimWaveform(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160; </div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">if</span> YAxisMode==<span class="stringliteral">&#39;Auto&#39;</span>:</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            maxV=max(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.Values())</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            minV=min(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.Values())</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>=maxV+abs(maxV-minV)*.1</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>=minV-abs(maxV-minV)*.1</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a> = YMax</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a> = YMin</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        DeltaV=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        midBin=C//2</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        enhancementMode=EnhancementMode</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <span class="keywordflow">if</span> enhancementMode==<span class="stringliteral">&#39;Fixed&#39;</span>:</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            steps=EnhancementSteps</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">elif</span> enhancementMode==<span class="stringliteral">&#39;Auto&#39;</span>:</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            steps=R</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            steps=1</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        pixelator = Pixelator(R,C,steps,mode=enhancementMode)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        bitmap=np.zeros((R,C))</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        ri=(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>[0]-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)/DeltaV*R</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        ci=(0+midBin)%C</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(1,self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.K):</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            rf=(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>[k]-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)/DeltaV*R</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            cf=(k+midBin)%C</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            <span class="keywordflow">if</span> (<span class="keywordflow">not</span> callback <span class="keywordflow">is</span> <span class="keywordtype">None</span>) <span class="keywordflow">and</span> (k//C != (k-1)//C):</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> callback(k/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.K*100.):</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                    <span class="keywordflow">return</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;            results=pixelator.Results(ri, ci, rf, cf, k==0)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">for</span> result <span class="keywordflow">in</span> results:</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                r,c,prob=result[0][0],result[0][1],result[2]</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                bitmap[r][c]+=prob</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            ri=rf; ci=cf</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>=bitmap/np.sum(bitmap)*C</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160; </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C):</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[:,c]=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[:,c]/sum(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[:,c])</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.DelayBy(-UI/2)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.Adapt(<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.H,self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.K,self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a>)).DelayBy(UI/2)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160; </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="comment"># don&#39;t cache the waveform</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        del self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aededcf789248079b119fb0daa6b0ccdf">prbswf</a></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#abf3d39d22f11766f437fdee4614fc027">CacheResult</a>()</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160; </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3ce234faa434f22d1287e9c5218fc3d9">Bitmap</a>(self):</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Returns the raw bitmap</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">return</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160; </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a97fc924689bb3b6243ac2fd901d7d642">ApplyJitterNoise</a>(self,</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                         NoiseSigma=0.,</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                         JitterSigma=0.,</div>
<div class="line"><a name="l00273"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3ce234faa434f22d1287e9c5218fc3d9">  273</a></span>&#160;                         DeterministicJitter=0.,</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                         MaxPixelsKernel=100000):</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Applies jitter and/or noise to the eye diagram bitmap</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="stringliteral">        @param NoiseSigma float, defaults to 0, amount of rms vertical noise to apply.</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="stringliteral">        @param JitterSigma float, defaults to 0, amount of rms horizontal jitter to apply.</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="stringliteral">        @param DeterministicJitter float, defaults to 0, amount of deterministic jitter to apply</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="stringliteral">        horizontally.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="stringliteral">        @param MaxPixelsKernel int, defaults to 100000, maximum number of pixels in kernel  </span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="stringliteral">        Noise and jitter are applied by constructing a kernel and then convolving this kernel with</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="stringliteral">        the eye diagram bitmap.  The kernel itself is a convolution of a vertical histogram, containing</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="stringliteral">        the Gaussian distributed vertical noise and a horizontal histogram, containing the jitter.</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="stringliteral">        The jitter histogram is also, itself, a convolution of a dual-Dirac, whose pk-pk separation is</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="stringliteral">        twice the amount of deterministic jitter specified, with a Guassian distribution representing</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="stringliteral">        the jitter specified.  </span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="stringliteral">        The kernel generated covers 10 standard deviations in both vertical and horizontal direction.</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="stringliteral">        As a protection against absurd numbers for jitter and noise, a check is made that the number of</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="stringliteral">        points in the kernel does not exceed a gigantic number.  If the kernel exceeds this amount, it</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="stringliteral">        is truncated.  </span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="stringliteral">        When this function concludes, the side effect is that the rawBitmap member variable is updated</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;<span class="stringliteral">        with a new bitmap representing the noise and jitter addition effect.</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;<span class="stringliteral">        @remark The shape of the bitmap is adjusted by padding rows based on the amount of vertical noise</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;<span class="stringliteral">        added.</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">NoiseSigma</a>=NoiseSigma</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        UI=1./self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a></div>
<div class="line"><a name="l00299"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a97fc924689bb3b6243ac2fd901d7d642">  299</a></span>&#160;        deltaT=UI/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a83c5b7515727772548c85e793fc9194a">Cols</a></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        deltaY=(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aa831315374a492602366faa359d393d7">RowsSpecified</a></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        WH=int(math.floor(math.floor(2.*10.*(DeterministicJitter+JitterSigma)/deltaT/2.)*2.)+1.)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        WV=int(math.floor(math.floor(2.*10.*NoiseSigma/deltaY/2.)*2.)+1.)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160; </div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">if</span> WH*WV &gt; MaxPixelsKernel:</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            WH=int(math.floor((WH*math.sqrt(float(MaxPixelsKernel)/float(WH*WV))-1)/2))*2+1</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            WV=int(math.floor((WV*math.sqrt(float(MaxPixelsKernel)/float(WH*WV))-1)/2))*2+1</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        <span class="keyword">def </span>cnorm(x,mu,sigma):</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">if</span> sigma==0.:</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                <span class="keywordflow">if</span> x &lt; mu:</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    <span class="keywordflow">return</span> 0.</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">if</span> x==mu:</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                    <span class="keywordflow">return</span> 0.5</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                <span class="keywordflow">if</span> x &gt; mu:</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                    <span class="keywordflow">return</span> 1.0</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                res= (1.+math.erf((x-mu)/sigma/math.sqrt(2.)))/2.</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                <span class="keywordflow">return</span> res</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160; </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        <span class="keyword">def </span>dnorm(x,mu,sigma):</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            res =  cnorm(x+1/2.,mu,sigma)-cnorm(x-1/2.,mu,sigma)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            <span class="keywordflow">return</span> res</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160; </div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="comment"># make the Gaussian kernel</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        bitmaparray=np.array(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        kernelHarray=np.array([[(dnorm(wh-(WH-1)//2,-DeterministicJitter/deltaT,JitterSigma/deltaT)+dnorm(wh-(WH-1)//2,DeterministicJitter/deltaT,JitterSigma/deltaT))/2.0 <span class="keywordflow">for</span> wh <span class="keywordflow">in</span> range(WH)]])</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        kernelVarray=np.array([[dnorm(wv-(WV-1)//2,0,NoiseSigma/deltaY)] <span class="keywordflow">for</span> wv <span class="keywordflow">in</span> range(WV)])</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <span class="comment"># trim away the edges of the vertical part of the kernel that is containing zeros to save time</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">for</span> vertStart <span class="keywordflow">in</span> range(kernelVarray.shape[0]):</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">if</span> kernelVarray[vertStart][0]!=0:</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">for</span> vertEnd <span class="keywordflow">in</span> range(kernelVarray.shape[0]):</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            <span class="keywordflow">if</span> kernelVarray[kernelVarray.shape[0]-1-vertEnd][0]!=0:</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                vertEnd=kernelVarray.shape[0]-1-vertEnd</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        kernelVarray=kernelVarray[vertStart:vertEnd,:]</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160; </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="comment"># trim away the edges of the horizontal part of the kernel that is containing zeros to save time</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordflow">for</span> horStart <span class="keywordflow">in</span> range(kernelHarray.shape[1]):</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">if</span> kernelHarray[0][horStart]!=0:</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">for</span> horEnd <span class="keywordflow">in</span> range(kernelHarray.shape[1]):</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <span class="keywordflow">if</span> kernelHarray[0][kernelHarray.shape[1]-1-horEnd]!=0:</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                horEnd=kernelHarray.shape[1]-1-horEnd</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        kernelHarray=kernelHarray[:,horStart:horEnd]</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160; </div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;        <span class="comment"># pad the bitmap array to encompass the vertical size of the kernel</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        rowsToPad=min(kernelVarray.shape[0],self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aa831315374a492602366faa359d393d7">RowsSpecified</a>)</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        <span class="keywordflow">if</span> rowsToPad &gt; 0:</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            padding=np.zeros((rowsToPad,self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a83c5b7515727772548c85e793fc9194a">Cols</a>))</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            bitmaparray=np.vstack((padding,bitmaparray,padding))</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;            <span class="comment">#self.RowsSpecified+=rowsToPad*2</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>-=rowsToPad*deltaY</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>+=rowsToPad*deltaY</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="keyword">from</span> scipy.ndimage.filters <span class="keyword">import</span> convolve</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        bitmap=bitmaparray</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="keywordflow">if</span> kernelHarray.shape[1]!=0: bitmap=convolve(bitmaparray,kernelHarray,mode=<span class="stringliteral">&#39;wrap&#39;</span>)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">if</span> kernelVarray.shape[0]!=0: bitmap=convolve(bitmap,kernelVarray,mode=<span class="stringliteral">&#39;constant&#39;</span>)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        bitmap=bitmap/np.sum(bitmap)*self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a83c5b7515727772548c85e793fc9194a">Cols</a></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>=bitmap</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160; </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a85a9afbd31ccc14de237f8149f99f6e8">AutoAlign</a>(self,</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;                  BERForAlignment=-3, <span class="comment"># Exponent of probability contour to align on</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                  AlignmentMode=&#39;Horizontal&#39;, <span class="comment"># can be &#39;Horizontal&#39; or &#39;Vertical&#39;</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                  HorizontalAlignment=&#39;Middle&#39;, <span class="comment"># &#39;Middle&#39; or &#39;Max&#39; (vertical eye) - alignment will be the horizontal midpoint of one of these two eye possibilities</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                  VerticalAlignment=&#39;MaxMin&#39;, <span class="comment"># &#39;MaxMin&#39; (maximum minimum opening) or &#39;Max&#39; (maximum opening)</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                  ):</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Automatically align the eye diagram</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="stringliteral">        @param BERForAlignment float, defaults to -3, exponent of the probability contour to align on.</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="stringliteral">        @param AlignmentMode string, either &#39;Horizontal&#39; or &#39;Vertical&#39;, defaults to &#39;Horizontal&#39;, defining the alignment mode.</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="stringliteral">        @param HorizontalAlignment string, either &#39;Middle&#39; or &#39;Max&#39; , defaults to &#39;Middle&#39;, defining the horizontal alignment mode.</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;<span class="stringliteral">        @param VerticalAlignment string, either &#39;MaxMin&#39; or &#39;Max&#39;, defaults to MaxMin, defining the vertical alignment mode.  </span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="stringliteral">        Alignment is made by considering contours that define the probability specified by the BERForAlignment.  While not technically</span></div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="stringliteral">        a BER, it is the probability contour inside of which, all hits are lower probability.  All measurements of vertical height and</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="stringliteral">        horizontal width are taken on these contours produced.   </span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;<span class="stringliteral">        Alignment modes are a combination of the three alignment mode specifications:</span></div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;<span class="stringliteral">        | AlignmentMode | HorizontalAlignment | VerticalAlignment | Definition                                                                                  |</span></div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;<span class="stringliteral">        |:-------------:|:-------------------:|:-----------------:|:--------------------------------------------------------------------------------------------|</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;<span class="stringliteral">        | Horizontal    | Middle              | N/A               | The center of the eye is found by first computing the widest horizontal opening of the middle eye, then computing the horizontal midpoint.|</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="stringliteral">        | Horizontal    | Max                 | N/A               | The center of the eye is found by first computing the widest horizontal opening of the widest eye, then computing the horizontal midpoint.|</span></div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="stringliteral">        | Vertical      | N/A                 | MaxMin            | The center of the eye is found by finding the horizontal location where the vertical opening is maximized for the narrowest eye.          |</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="stringliteral">        | Vertical      | N/A                 | Max               | The center of the eye is found by finding the horizontal location where the vertical opening is maximized for any eye.                    |</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="stringliteral">        The side effect of this function is for the rawBitmap member variable to be replaced with a new bitmap containing the aligned eye diagram.</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        bitmap=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>.copy()</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        numberOfEyes=int(2**self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a>-1)</div>
<div class="line"><a name="l00392"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a85a9afbd31ccc14de237f8149f99f6e8">  392</a></span>&#160;        (R,C)=bitmap.shape</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        darkExtents=[]</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        minValueLog=pow(10.,-20)</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        minSat=0</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        maxSat=1.</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160; </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        minBER=BERForAlignment; maxBER=BERForAlignment+0.001</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        m=(maxSat-minSat)/(maxBER-minBER)</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        b=minSat-minBER*m</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        bitmapLog=np.array([[math.log10(max(bitmap[r][c],minValueLog)) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)])</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        bitmapLog=bitmapLog*m+b</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        bitmapLog=np.array([[0. <span class="keywordflow">if</span> bitmapLog[r][c] &lt; minSat <span class="keywordflow">else</span> (1 <span class="keywordflow">if</span> bitmapLog[r][c] &gt; maxSat <span class="keywordflow">else</span> bitmapLog[r][c]) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)])</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="comment"># develop the extents of the eye openings for each eye in a column (vertical slice)</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="comment"># The assumption is that there is signal or the exterior in the first row.  Stepping into</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="comment"># a dark area from a non-dark area starts an extent and the stepping from a dark area to a</span></div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="comment"># non-dark area ends an extent.</span></div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C):</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            counter=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;            thisExtents=[]</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(1,R):</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;                <span class="keywordflow">if</span> bitmapLog[r][c]==0. <span class="keywordflow">and</span> bitmapLog[r-1][c]!=0.:</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;                    counter=r</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                <span class="keywordflow">elif</span> bitmapLog[r][c]!=0 <span class="keywordflow">and</span> bitmapLog[r-1][c]==0:</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                    <span class="keywordflow">if</span> counter != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                        thisExtents.append((counter,r))</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            darkExtents.append(thisExtents)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        <span class="comment"># convert the extents into sizes for comparison</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        darkCounts=[[f-e <span class="keywordflow">for</span> (e,f) <span class="keywordflow">in</span> extents] <span class="keywordflow">for</span> extents <span class="keywordflow">in</span> darkExtents]</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160; </div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        <span class="comment"># now we look for the column index having the best opening</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="comment"># this is defined as the largest eye opening.  If there is a tie and there are multiple</span></div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="comment"># eyes, then we compare the size of the next eye, and so on.</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        bestOpenings=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        indexOfBestOpening=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        bestMinimumOpening=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        indexOfBestMinimumOpening=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C):</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            dc=darkCounts[c]</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            <span class="keywordflow">if</span> len(dc)&lt;numberOfEyes:</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            thisMinimumOpening=np.flip(np.sort(dc))[numberOfEyes-1]</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="keywordflow">if</span> bestMinimumOpening <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;                bestMinimumOpening=thisMinimumOpening</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;                indexOfBestMinimumOpening=c</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            <span class="keywordflow">elif</span> thisMinimumOpening &gt; bestMinimumOpening:</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;                bestMinimumOpening=thisMinimumOpening</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;                indexOfBestMinimumOpening=c</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            <span class="keywordflow">if</span> bestOpenings <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;                bestOpenings=np.flip(np.sort(dc))</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;                indexOfBestOpening=c</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                dc=np.flip(np.sort(dc))</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;                e=0; Continue=<span class="keyword">True</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                <span class="keywordflow">while</span> (e &lt; numberOfEyes) <span class="keywordflow">and</span> (indexOfBestOpening !=c) <span class="keywordflow">and</span> Continue:</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;                    <span class="keywordflow">if</span> dc[e]&gt;bestOpenings[e]:</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;                        bestOpenings=dc</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;                        indexOfBestOpening=c</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                        Continue=<span class="keyword">False</span></div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;                    <span class="keywordflow">elif</span> dc[e]==bestOpenings[e]:</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                        <span class="keywordflow">pass</span> <span class="comment"># should continue</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                        Continue=<span class="keyword">False</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                    e+=1</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        alignOnTime=(AlignmentMode == <span class="stringliteral">&#39;Horizontal&#39;</span>)</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <span class="keywordflow">if</span> alignOnTime: <span class="comment"># &#39;Horizontal&#39;, meaning midpoint in time in an eye</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            <span class="comment"># These are the three largest eye openings at the best index in order of appearance</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="comment"># remember that the eye is upside down (we&#39;re looking from the bottom up</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ab63185bb31a9a8bc741a09394ff522e7">eyeExtentsForAlignment</a>=sorted(sorted(darkExtents[indexOfBestOpening],key = <span class="keyword">lambda</span> x: x[1]-x[0],reverse=<span class="keyword">True</span>)[0:numberOfEyes],key = <span class="keyword">lambda</span> y:y[0])</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="comment"># now, for each eye, walk backwards and forwards at each row slice within these extents</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;            <span class="comment"># to find the extents of each eye opening</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            rowOfMaxEyeWidth=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;            startColumnofMaxEyeWidth=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            endColumnofMaxEyeWidth=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            alignOnMiddleEye=(HorizontalAlignment == <span class="stringliteral">&#39;Middle&#39;</span>)</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordflow">if</span> alignOnMiddleEye: <span class="comment"># &#39;Middle&#39;, meaning horizontal midpoint of middle eye</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                eyeExtents=[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ab63185bb31a9a8bc741a09394ff522e7">eyeExtentsForAlignment</a>[(2**self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a>)//2-1]]</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordflow">else</span>: <span class="comment"># &#39;Max&#39;, meaning horizontal midpoint of widest eye</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                eyeExtents=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ab63185bb31a9a8bc741a09394ff522e7">eyeExtentsForAlignment</a></div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;            maxEyeWidth=0</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;            <span class="keywordflow">for</span> eye <span class="keywordflow">in</span> eyeExtents:</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(eye[0],eye[1]+1):</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                    c=indexOfBestOpening</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                    count=1 <span class="comment"># count the pixel we&#39;re on</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                    startColumn=c</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                    endColumn=c</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                    found=<span class="keyword">False</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                    <span class="keywordflow">while</span> count != C <span class="keywordflow">and</span> <span class="keywordflow">not</span> found:</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                        c=(c-1)%C</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        <span class="keywordflow">if</span> bitmapLog[r][c]!=0:</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                            found=<span class="keyword">True</span></div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                            count+=1</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                            startColumn=c</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                    found=<span class="keyword">False</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                    c=(indexOfBestOpening+1)%C</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                    <span class="keywordflow">while</span> count != C <span class="keywordflow">and</span> <span class="keywordflow">not</span> found:</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                        c=(c+1)%C</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                        <span class="keywordflow">if</span> bitmapLog[r][c]!=0:</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                            found=<span class="keyword">True</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                            count+=1</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;                            endColumn=c</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;                    <span class="keywordflow">if</span> (count &lt; C) <span class="keywordflow">and</span> (count &gt; maxEyeWidth):</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                        maxEyeWidth=count</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                        rowOfMaxEyeWidth=r</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                        startColumnofMaxEyeWidth=startColumn</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                        endColumnofMaxEyeWidth=endColumn</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="comment"># should check these for None</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;            <span class="keywordflow">if</span> endColumnofMaxEyeWidth&lt;startColumnofMaxEyeWidth:</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                endColumnofMaxEyeWidth+=C</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;            columnAtEyeCenter=((startColumnofMaxEyeWidth+endColumnofMaxEyeWidth)//2)%C</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="keywordflow">else</span>: <span class="comment"># &#39;Vertical&#39;, meaning at location of a maximum eye opening</span></div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            alignMaxMinimum=(VerticalAlignment == <span class="stringliteral">&#39;MaxMin&#39;</span>)</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;            <span class="keywordflow">if</span> alignMaxMinimum: <span class="comment"># &#39;MaxMin&#39;, meaning max vertical opening of smallest eye</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                columnAtEyeCenter=indexOfBestMinimumOpening</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;            <span class="keywordflow">else</span>: <span class="comment"># &#39;Max&#39;, meaning max vertical opening of all eyes</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                columnAtEyeCenter=indexOfBestOpening</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160; </div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R):</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;            <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C):</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[r][(c+C//2)%C]=bitmap[r][(c+columnAtEyeCenter)%C]</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160; </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        H=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.H</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.DelayBy(-(columnAtEyeCenter-C//2)/C/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a>)</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.Adapt(<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(H,self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">aprbswf</a>.td.K,self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a>))</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>.DelayBy((columnAtEyeCenter-C//2)/C/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a>)</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>.DelayBy(1./self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a>/2.)</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        <span class="keywordflow">return</span></div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160; </div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aca020d6bf17e9ab0b799b5543c2cb201">Measure</a>(self,</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;                BERForMeasure=-6,</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;                DecisionMode=&#39;Mid&#39;,</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;                WaveformType=&#39;V&#39;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;                ):</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Computes measurements on the eye diagram</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="stringliteral">        @param BERForMeasure float, defaults to -6, exponent of probability contour in eye to make measurements on.</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="stringliteral">        @param DecisionMode string, &#39;Mid&#39; or &#39;Best&#39;, defaults to &#39;Mid&#39; to determine where the decision point is.</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="stringliteral">        If &#39;Mid&#39;, the decision point is the vertical middle of the eye.  If &#39;Best&#39; is specified, it is the least likey</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="stringliteral">        point in the middle of the eye.  If the probability goes to zero in the middle, it is the midpoint of the middle</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="stringliteral">        zero locations.</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="stringliteral">        @param WaveformType string (optional, defaults to &#39;V&#39;) indicator of the type of waveform being measured.</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="stringliteral">        Valid waveform types are:</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;<span class="stringliteral">        * &#39;V&#39; -- voltage, in volts</span></div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="stringliteral">        * &#39;A&#39; -- current, in amperes</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="stringliteral">        * &#39;W&#39; -- power, in watts</span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;<span class="stringliteral">        * &#39;FW&#39; -- fractional power, in fractions of watts</span></div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="stringliteral">        * &#39;FA&#39; -- fractional current, in fractions of amperes</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="stringliteral">        * &#39;FV&#39; -- fractional voltage, in fractions of volts</span></div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;<span class="stringliteral">        Measurements are made by first determining a probablity contour in the eye such that everything inside the contour</span></div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;<span class="stringliteral">        is lower probability than the contour edge, which is above the probability of the BERForMeasure.  The vertical extents</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;<span class="stringliteral">        of the contour (the eye height) is the length of the vertical line in the exact center of the eye diagram.  The horizontal</span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;<span class="stringliteral">        extents of the contour (the eye width) are the lengths of the horizontal line at the decision point, specified by the</span></div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;<span class="stringliteral">        DecisionMode.  </span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="stringliteral">        Upon completion, the member variable measDict contains a dictionary with the following elements:</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="stringliteral">        * R - Rows in the bitmap.</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="stringliteral">        * C - Columns in the bitmap.</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="stringliteral">        * MinV - Voltage defined by row 0.</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="stringliteral">        * MaxV - Voltage defined by the maximum row.</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="stringliteral">        * MinT - Time defined by the column 0.</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="stringliteral">        * MaxT - Time defined by the last column.</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="stringliteral">        * BERForMeasure - BER, or probability, for contour for all of the eye measurements.</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;<span class="stringliteral">        * WaveformType - Type of waveform as either V, A, W, FW, AW, VW</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;<span class="stringliteral">        * Eye - An array of parameters, one for each eye containing:</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;<span class="stringliteral">            - Start - a dictionary containing Bin and Time defining the pixel column of the horizontal start of the eye.</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="stringliteral">            - End - a dictionary containing Bin and Time defining the pixel column of the horizontal end of the eye.</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="stringliteral">            - Width - a dictionary containing the Bin and Time width of the eye.</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;<span class="stringliteral">            - High - a dictionary containing the Bin and Volt defining the pixel row of the vertical top of the eye.</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="stringliteral">            - Low - a dictionary containing the Bin and Volt defining the pixel row of the vertical bottom of the eye.</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="stringliteral">            - Mid - a dictionary containing the Bin and Volt defining the pixel row of the vertical middle of the eye.</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;<span class="stringliteral">            - Best - a dictionary containing the Bin and Volt defining the pixel row of the best decision point for the eye.</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;<span class="stringliteral">            - Height - a dictionary containing the Bin and Volt defining the vertical height of the eye.</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;<span class="stringliteral">            - AV - a dictionary containing Volt defining the volts between the level extents at each edge of the eye.</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;<span class="stringliteral">        * Level - An array of parameters, one for each level of the eye (the number of eyes plus one) containing:</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;<span class="stringliteral">            - Min - a dictionary containing the Bin and Volt of the minimum edge of the level extent.</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;<span class="stringliteral">            - Max - a dictionary containing the Bin and Volt of the maximum edge of the level extent.</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;<span class="stringliteral">            - Delta  - a dictionary containing the Bin and Volt vertical distance between the edeges of the level extent.</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;<span class="stringliteral">            - Mean - a dictionary containing the Bin and Volt of the mean vertical location of the level extent.</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;<span class="stringliteral">        * Linearity - The eye linearity calculated as the Min(AV)/Max(AV).  This is 100% for NRZ waveforms.</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;<span class="stringliteral">        * RLM - Relative Level Mismatch - only defined for PAM-4.</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;<span class="stringliteral">        * RMS - Rms value of the waveform</span></div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;<span class="stringliteral">        * Noise - Rms value of the noise</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;<span class="stringliteral">        * NoiseResidual - Rms value of the residual noise (ISI and linearity only - no noise added).</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;<span class="stringliteral">        * SDR - Ratio of sampled ideal signal to residual error (noise) in dB (without noise added).</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="stringliteral">        * SNR - Signal to noise ratio.</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="stringliteral">        * SNDR - Signal to noise and distortion ratio.</span></div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;<span class="stringliteral">        * VerticalResolution - the resolution, in V, for each row of the eye.</span></div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;<span class="stringliteral">        * HorizontalResolution - the resolution in seconds, for each column of the eye.</span></div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        bitmap=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>.copy()</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        numberOfEyes=int(2**self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a>-1)</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;        (R,C)=bitmap.shape</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;        minValueLog=pow(10.,-20)</div>
<div class="line"><a name="l00587"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aca020d6bf17e9ab0b799b5543c2cb201">  587</a></span>&#160;        minBER=BERForMeasure; maxBER=BERForMeasure+0.001</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        m=1./(maxBER-minBER)</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        b=0-minBER*m</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        bitmapLog=np.array([[math.log10(max(bitmap[r][c],minValueLog)) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)])</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;        bitmapLog=bitmapLog*m+b</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        bitmapLog=np.array([[0. <span class="keywordflow">if</span> bitmapLog[r][c] &lt; 0 <span class="keywordflow">else</span> (1 <span class="keywordflow">if</span> bitmapLog[r][c] &gt; 1 <span class="keywordflow">else</span> bitmapLog[r][c]) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)])</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160; </div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;        <span class="comment"># develop the extents of the eye openings for each eye in a column (vertical slice)</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;        <span class="comment"># The assumption is that there is signal or the exterior in the first row.  Stepping into</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="comment"># a dark area from a non-dark area starts an extent and the stepping from a dark area to a</span></div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;        <span class="comment"># non-dark area ends an extent.</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160; </div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;        c=C//2</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        counter=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;        darkExtents=[]</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(1,R):</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            <span class="keywordflow">if</span> bitmapLog[r][c]==0. <span class="keywordflow">and</span> bitmapLog[r-1][c]!=0.:</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                counter=r</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            <span class="keywordflow">elif</span> bitmapLog[r][c]!=0 <span class="keywordflow">and</span> bitmapLog[r-1][c]==0:</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                <span class="keywordflow">if</span> counter != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                    darkExtents.append((counter,r))</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        eyeVerticalExtentsForMeasurement=sorted(sorted(darkExtents,key = <span class="keyword">lambda</span> x: x[1]-x[0],reverse=<span class="keyword">True</span>)[0:numberOfEyes],key = <span class="keyword">lambda</span> y:y[0])</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="comment"># now, for each eye, walk backwards and forwards at each row slice within these extents</span></div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;        <span class="comment"># to find the extents of each eye opening</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;        deltaV=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        eyeHeights=[(f-e)/R*deltaV <span class="keywordflow">for</span> (e,f) <span class="keywordflow">in</span> eyeVerticalExtentsForMeasurement]</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;        eyeMidBins=[int(round((f+e)/2)) <span class="keywordflow">for</span> (e,f) <span class="keywordflow">in</span> eyeVerticalExtentsForMeasurement]</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;        eyeMids=[b/R*deltaV+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a> <span class="keywordflow">for</span> b <span class="keywordflow">in</span> eyeMidBins]</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <span class="comment"># find the best decision points based on probability</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;        eyeDecisionPoints=[]</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        <span class="keywordflow">for</span> extent <span class="keywordflow">in</span> eyeVerticalExtentsForMeasurement:</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            minIndex=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            minValue=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;            count=0</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(extent[0],extent[1]+1):</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;                value=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[r][c]</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;                <span class="keywordflow">if</span> (minValue == <span class="keywordtype">None</span>) <span class="keywordflow">or</span> (value&lt;minValue):</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;                    minValue=value</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                    minIndex=r</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                    count=1</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                <span class="keywordflow">elif</span> value==0:</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                    count+=1</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            eyeDecisionPoints.append(int(minIndex+count//2))</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        <span class="comment"># the threshold extents are based off the eye extents, except for the bottom and top</span></div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;        thresholdExtents=[(<span class="keywordtype">None</span> <span class="keywordflow">if</span> t==0 <span class="keywordflow">else</span> eyeVerticalExtentsForMeasurement[t-1][1]+1,</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                                <span class="keywordtype">None</span> <span class="keywordflow">if</span> t==numberOfEyes <span class="keywordflow">else</span> eyeVerticalExtentsForMeasurement[t][0]-1)</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                               <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;        <span class="comment"># fill in the bottom threshold extent</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R):</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;            <span class="keywordflow">if</span> bitmapLog[r][c] &gt; 0:</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                thresholdExtents[0]=(r,thresholdExtents[0][1])</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        <span class="comment"># fill in the top threshold extent</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R):</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;            <span class="keywordflow">if</span> bitmapLog[R-1-r][c] &gt; 0:</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                thresholdExtents[-1]=(thresholdExtents[-1][0],R-1-r)</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;        eyeAverageLevels=[]</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        acc=0</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        pacc=0</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        L=0</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R+1):</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;            <span class="keywordflow">if</span> ((L &lt; len(eyeMidBins)) <span class="keywordflow">and</span> (r &lt; eyeMidBins[L])) <span class="keywordflow">or</span> ((L &gt;= len(eyeMidBins)) <span class="keywordflow">and</span> (r &lt; R)):</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                pacc+=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[r][c]</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                acc+=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[r][c]*(r/R*deltaV+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                eyeAverageLevels.append(acc/pacc)</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                acc=0; pacc=0; L+=1</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;        AV=[eyeAverageLevels[l+1]-eyeAverageLevels[l] <span class="keywordflow">for</span> l <span class="keywordflow">in</span> range(len(eyeAverageLevels)-1)]</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;        EyeLinearity=min(AV)/max(AV)</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a> == 2:</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            (V0,V1,V2,V3)=(eyeAverageLevels[0],eyeAverageLevels[1],eyeAverageLevels[2],eyeAverageLevels[3])</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            Vmid=(V0+V3)/2</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;            ES1=(V1-Vmid)/(V0-Vmid)</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            ES2=(V2-Vmid)/(V3-Vmid)</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;            RLM=min(3.*ES1,3.*ES2,2.-3.*ES1,2.-3.*ES2)</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            RLM=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        eyeHorizontalExtentsForMeasure=[]</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        eyeWidths=[]</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        UI=1./self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a></div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(eyeVerticalExtentsForMeasurement)):</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            decision=eyeDecisionPoints[i]</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            eye=eyeVerticalExtentsForMeasurement[i]</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;            r=(eye[0]+eye[1])//2 <span class="keywordflow">if</span> DecisionMode == <span class="stringliteral">&#39;Mid&#39;</span> <span class="keywordflow">else</span> decision</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            c=C//2</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            count=1 <span class="comment"># count the pixel we&#39;re on</span></div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            startColumn=c</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            endColumn=c</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            found=<span class="keyword">False</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            <span class="keywordflow">while</span> count != C <span class="keywordflow">and</span> <span class="keywordflow">not</span> found:</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                c=(c-1)%C</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                <span class="keywordflow">if</span> bitmapLog[r][c]!=0:</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                    found=<span class="keyword">True</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                    count+=1</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    startColumn=c</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;            found=<span class="keyword">False</span></div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;            c=C//2</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;            <span class="keywordflow">while</span> count != C <span class="keywordflow">and</span> <span class="keywordflow">not</span> found:</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                c=(c+1)%C</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                <span class="keywordflow">if</span> bitmapLog[r][c]!=0:</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                    found=<span class="keyword">True</span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                    count+=1</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                    endColumn=c</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;            <span class="keywordflow">if</span> (count &lt; C):</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                eyeHorizontalExtentsForMeasure.append((startColumn,endColumn))</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                eyeWidths.append(count/C*UI)</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        <span class="keyword">def </span>precision_round(number, digits=3):</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            <span class="keywordflow">if</span> number == <span class="keywordtype">None</span>: <span class="keywordflow">return</span> number</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;            power = <span class="stringliteral">&quot;{:e}&quot;</span>.format(number).split(<span class="stringliteral">&#39;e&#39;</span>)[1]</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;            <span class="keywordflow">return</span> round(number, -(int(power) - digits))</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        <span class="comment"># calculate the SDR -- this would be the power of the ideal sampled signal with respect to the power of the residual noise</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;        levels = [eyeAverageLevels[i] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        noiseWf=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>.td)</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        signalWf=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>.td)</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>)):</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            x=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">sampledWf</a>[k]</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            distance=[abs(level-x) <span class="keywordflow">for</span> level <span class="keywordflow">in</span> levels] <span class="comment"># list of minimum distances from levels</span></div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            l=distance.index(min(distance)) <span class="comment"># index of the ideal level</span></div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;            noiseWf[k]=x-levels[l] <span class="comment"># error</span></div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            signalWf[k]=levels[l] <span class="comment"># signal (ideal)</span></div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;        <span class="comment"># calculate the power of each</span></div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;        signalRms=math.sqrt(1./len(signalWf)*sum([x**2 <span class="keywordflow">for</span> x <span class="keywordflow">in</span> signalWf]))</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;        noiseResidual=math.sqrt(1./len(noiseWf)*sum([x**2 <span class="keywordflow">for</span> x <span class="keywordflow">in</span> noiseWf]))</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        sdr=20.*math.log10(signalRms/noiseResidual)</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">NoiseSigma</a>==0.:</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            snr=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;            snr=20*math.log10(signalRms/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">NoiseSigma</a>)</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;        sndr=20.*math.log10(signalRms/math.sqrt(noiseResidual**2+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">NoiseSigma</a>**2))</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>={<span class="stringliteral">&#39;R&#39;</span>:R,<span class="stringliteral">&#39;C&#39;</span>:C,<span class="stringliteral">&#39;MinV&#39;</span>:self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>,<span class="stringliteral">&#39;MaxV&#39;</span>:self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>,<span class="stringliteral">&#39;MinT&#39;</span>:-C//2*UI,<span class="stringliteral">&#39;MaxT&#39;</span>:(C-1)//2*UI,<span class="stringliteral">&#39;BERForMeasure&#39;</span>:BERForMeasure,<span class="stringliteral">&#39;WaveformType&#39;</span>:WaveformType,</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;                       <span class="stringliteral">&#39;Eye&#39;</span>:{i:{<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:eyeHorizontalExtentsForMeasure[i][0],</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;                                          <span class="stringliteral">&#39;Time&#39;</span>:precision_round((eyeHorizontalExtentsForMeasure[i][0]-C/2)/C*UI)},</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;                                 <span class="stringliteral">&#39;End&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:eyeHorizontalExtentsForMeasure[i][1],</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;                                        <span class="stringliteral">&#39;Time&#39;</span>:precision_round((eyeHorizontalExtentsForMeasure[i][1]-C/2)/C*UI)},</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                                 <span class="stringliteral">&#39;Width&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:(eyeHorizontalExtentsForMeasure[i][1]-eyeHorizontalExtentsForMeasure[i][0]+1),</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                                          <span class="stringliteral">&#39;Time&#39;</span>:precision_round(eyeWidths[i])},</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                                 <span class="stringliteral">&#39;Low&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:eyeVerticalExtentsForMeasurement[i][0],</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                                        <span class="stringliteral">&#39;Value&#39;</span>:precision_round(eyeVerticalExtentsForMeasurement[i][0]/R*deltaV+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)},</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                                 <span class="stringliteral">&#39;High&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:eyeVerticalExtentsForMeasurement[i][1],</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                                         <span class="stringliteral">&#39;Value&#39;</span>:precision_round(eyeVerticalExtentsForMeasurement[i][1]/R*deltaV+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)},</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                                 <span class="stringliteral">&#39;Mid&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:int((eyeVerticalExtentsForMeasurement[i][0]+eyeVerticalExtentsForMeasurement[i][1])/2),</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                                        <span class="stringliteral">&#39;Value&#39;</span>:precision_round(eyeMids[i])},</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                                 <span class="stringliteral">&#39;Best&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:eyeDecisionPoints[i],</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                                        <span class="stringliteral">&#39;Value&#39;</span>:precision_round(eyeDecisionPoints[i]/R*deltaV+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)},</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                                 <span class="stringliteral">&#39;Height&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:(eyeVerticalExtentsForMeasurement[i][1]-eyeVerticalExtentsForMeasurement[i][0]+1),</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                                           <span class="stringliteral">&#39;Value&#39;</span>:precision_round(eyeHeights[i])},</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                                 <span class="stringliteral">&#39;AV&#39;</span>:{<span class="stringliteral">&#39;Value&#39;</span>:precision_round(AV[i])}} <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(numberOfEyes)},</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                        <span class="stringliteral">&#39;Level&#39;</span>:{i:{<span class="stringliteral">&#39;Min&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:thresholdExtents[i][0],</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                                           <span class="stringliteral">&#39;Value&#39;</span>:precision_round(thresholdExtents[i][0]/R*deltaV+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)},</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                                    <span class="stringliteral">&#39;Max&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:thresholdExtents[i][1],</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                           <span class="stringliteral">&#39;Value&#39;</span>:precision_round(thresholdExtents[i][1]/R*deltaV+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)},</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                                    <span class="stringliteral">&#39;Delta&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:(thresholdExtents[i][1]-thresholdExtents[i][0]),</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                                             <span class="stringliteral">&#39;Value&#39;</span>:precision_round((thresholdExtents[i][1]-thresholdExtents[i][0])/R*deltaV)},</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                                    <span class="stringliteral">&#39;Mean&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:int((eyeAverageLevels[i]-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)/deltaV*R+0.5),</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                                            <span class="stringliteral">&#39;Value&#39;</span>:precision_round(eyeAverageLevels[i])}} <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(numberOfEyes+1)},</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                        <span class="stringliteral">&#39;Linearity&#39;</span>:precision_round(EyeLinearity*100.)/100.,</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                        <span class="stringliteral">&#39;RLM&#39;</span>:precision_round(RLM),</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                        <span class="stringliteral">&#39;RMS&#39;</span>:precision_round(signalRms),</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                        <span class="stringliteral">&#39;Noise&#39;</span>:precision_round(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">NoiseSigma</a>),</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                        <span class="stringliteral">&#39;NoiseResidual&#39;</span>:precision_round(noiseResidual),</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                        <span class="stringliteral">&#39;SDR&#39;</span>:precision_round(sdr),</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                        <span class="stringliteral">&#39;SNR&#39;</span>:precision_round(snr),</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                        <span class="stringliteral">&#39;SNDR&#39;</span>:precision_round(sndr),</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                        <span class="stringliteral">&#39;VerticalResolution&#39;</span>:precision_round((self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>)/R),</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                        <span class="stringliteral">&#39;HorizontalResolution&#39;</span>:precision_round(UI/C)}</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(numberOfEyes):</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Decision&#39;</span>]=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Mid&#39;</span>] <span class="keywordflow">if</span> DecisionMode==<span class="stringliteral">&#39;Mid&#39;</span> <span class="keywordflow">else</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Best&#39;</span>]</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a> = bitmapLog</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160; </div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a409fede69bfb7cd95c08ed90ddecd1a5">OpticalMeasure</a>(self,WaveformType=&#39;W&#39;,PinW=None,</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                ):</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Computes optical measurements on the eye diagram</span></div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;<span class="stringliteral">        @param WaveformType string definition of waveform type.  Can be &#39;W&#39;, &#39;FW&#39;, &#39;AW&#39;, &#39;VW&#39;, which stands for Power, Fractional power, Current proportional</span></div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;<span class="stringliteral">        to power, and Voltage proportional to power.  If &#39;V&#39; or &#39;A&#39; is specified, for voltage and current waveforms, this function exits with no results.</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="stringliteral">        @param PinW float, optional defaults to None, input power in Watts, if known and applicable (i.e. is a transmitter measurement)</span></div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="stringliteral">        Computes optical measurements assuming an input waveform.  The most straightforward is for waveforms in Watts.  </span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="stringliteral">        Upon completion, the &#39;Optical&#39; field in the member variable measDict contains a dictionary with the following elements:</span></div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;<span class="stringliteral">        * PL - low level.</span></div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;<span class="stringliteral">            - W - value in Watts.</span></div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;<span class="stringliteral">            - dBm - value in dBm.</span></div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;<span class="stringliteral">        * PH - High level.</span></div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;<span class="stringliteral">            - W - value in Watts.</span></div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="stringliteral">            - dBm - value in dBm.</span></div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;<span class="stringliteral">        * OMA - Optical modulation amplitude.</span></div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;<span class="stringliteral">            - W - value in Watts.</span></div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="stringliteral">            - dBm - value in dBm.</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="stringliteral">        * Pavg - Average power.</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;<span class="stringliteral">            - W - value in Watts.</span></div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;<span class="stringliteral">            - dBm - value in dBm.</span></div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;<span class="stringliteral">        * ER - Extinction ration.</span></div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="stringliteral">            - Linear - value as ratio.</span></div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;<span class="stringliteral">            - dB - value in dB.</span></div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;<span class="stringliteral">        (if input power supplied):</span></div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;<span class="stringliteral">        * Pin - Input power.</span></div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;<span class="stringliteral">            - W - value in Watts.</span></div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;<span class="stringliteral">            - dBm - value in dBm.</span></div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;<span class="stringliteral">        * TP - Transmission penalty.</span></div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;<span class="stringliteral">            - Linear - value as ratio.</span></div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;<span class="stringliteral">            - dB - value in dB.</span></div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;<span class="stringliteral">        * IL - Insertion loss</span></div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;<span class="stringliteral">            - Linear - value as ratio.</span></div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;<span class="stringliteral">            -dB - value in dB.</span></div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;        <span class="keyword">def </span>W2dBm(W): <span class="keywordflow">return</span> 10.*math.log10(W/1e-3)</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;        <span class="keyword">def </span>dBm2W(dBm): <span class="keywordflow">return</span> 10.**(dBm/10.)*1e-3</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        <span class="keyword">def </span>dB2Lin(dB): <span class="keywordflow">return</span> 10**(dB/10.)</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <span class="keyword">def </span>Lin2dB(L): <span class="keywordflow">return</span> 10*math.log10(L)</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160; </div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> WaveformType <span class="keywordflow">in</span> [<span class="stringliteral">&#39;W&#39;</span>,<span class="stringliteral">&#39;FW&#39;</span>,<span class="stringliteral">&#39;AW&#39;</span>,<span class="stringliteral">&#39;VW&#39;</span>]:</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            del self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Optical&#39;</span>]</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00804"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a409fede69bfb7cd95c08ed90ddecd1a5">  804</a></span>&#160; </div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        verticalUnit={<span class="stringliteral">&#39;W&#39;</span>:<span class="stringliteral">&#39;W&#39;</span>,<span class="stringliteral">&#39;FW&#39;</span>:<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;AW&#39;</span>:<span class="stringliteral">&#39;A&#39;</span>,<span class="stringliteral">&#39;VW&#39;</span>:<span class="stringliteral">&#39;V&#39;</span>}[WaveformType]</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        dBmUnit = {<span class="stringliteral">&#39;W&#39;</span>:<span class="stringliteral">&#39;dBm&#39;</span>,<span class="stringliteral">&#39;FW&#39;</span>:<span class="stringliteral">&#39;dB&#39;</span>,<span class="stringliteral">&#39;AW&#39;</span>:<span class="keywordtype">None</span>,<span class="stringliteral">&#39;VW&#39;</span>:<span class="keywordtype">None</span>}[WaveformType]</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160; </div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        <span class="keywordflow">if</span> WaveformType != <span class="stringliteral">&#39;W&#39;</span>: PinW = <span class="keywordtype">None</span></div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160; </div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        <span class="keyword">def </span>W2dBmUnit(W):</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            <span class="keywordflow">if</span> W==<span class="keywordtype">None</span>: <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            <span class="keywordflow">elif</span> dBmUnit==<span class="stringliteral">&#39;dBm&#39;</span>: <span class="keywordflow">return</span> W2dBm(W)</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;            <span class="keywordflow">elif</span> dBmUnit==<span class="stringliteral">&#39;dB&#39;</span>: <span class="keywordflow">return</span>  Lin2dB(W)</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            <span class="keywordflow">else</span>: <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160; </div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        PLWraw=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][0][<span class="stringliteral">&#39;Mean&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>]</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        PHWraw=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>])-1][<span class="stringliteral">&#39;Mean&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>]</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        <span class="keywordflow">if</span> WaveformType <span class="keywordflow">in</span> [<span class="stringliteral">&#39;AW&#39;</span>,<span class="stringliteral">&#39;VW&#39;</span>]:</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;            PLWraw=abs(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][0][<span class="stringliteral">&#39;Mean&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>])</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;            PHWraw=abs(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>])-1][<span class="stringliteral">&#39;Mean&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>])</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            PHW=max(PLWraw,PHWraw)</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            PLW=min(PLWraw,PHWraw)</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;            PHW=PHWraw</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;            PLW=PLWraw</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160; </div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        PLdBm=W2dBmUnit(PLW)</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        PHdBm=W2dBmUnit(PHW)</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        OMA=PHW-PLW</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        OMAdBm=W2dBmUnit(OMA)</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160; </div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        PavgW=np.mean(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aededcf789248079b119fb0daa6b0ccdf">prbswf</a>)</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        <span class="keywordflow">if</span> WaveformType <span class="keywordflow">in</span> [<span class="stringliteral">&#39;AW&#39;</span>,<span class="stringliteral">&#39;VW&#39;</span>]:</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;            PavgW=abs(PavgW)</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160; </div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        PavgdBm=W2dBmUnit(PavgW)</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        ER=PHW/PLW</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        ERdB=Lin2dB(ER)</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160; </div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Optical&#39;</span>]={<span class="stringliteral">&#39;PL&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:verticalUnit,<span class="stringliteral">&#39;Value&#39;</span>:PLW},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:dBmUnit,<span class="stringliteral">&#39;Value&#39;</span>:PLdBm}},</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;                                  <span class="stringliteral">&#39;PH&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:verticalUnit,<span class="stringliteral">&#39;Value&#39;</span>:PHW},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:dBmUnit,<span class="stringliteral">&#39;Value&#39;</span>:PHdBm}},</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;                                  <span class="stringliteral">&#39;OMA&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:verticalUnit,<span class="stringliteral">&#39;Value&#39;</span>:OMA},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:dBmUnit,<span class="stringliteral">&#39;Value&#39;</span>:OMAdBm}},</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;                                  <span class="stringliteral">&#39;Pavg&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:verticalUnit,<span class="stringliteral">&#39;Value&#39;</span>:PavgW},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:dBmUnit,<span class="stringliteral">&#39;Value&#39;</span>:PavgdBm}},</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;                                  <span class="stringliteral">&#39;ER&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>:ER},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:<span class="stringliteral">&#39;dB&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>:ERdB}}}</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160; </div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <span class="keywordflow">if</span> WaveformType == <span class="stringliteral">&#39;FW&#39;</span>:</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            PinW = 1.</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160; </div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        <span class="keywordflow">if</span> PinW != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            PindBm=W2dBmUnit(PinW)</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            TP=PinW/OMA</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;            TPdB=Lin2dB(TP)</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            ILdB=PindBm-PHdBm</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;            IL=dB2Lin(ILdB)</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;            LossdB=PindBm-PavgdBm</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            LossW=dB2Lin(LossdB)</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Optical&#39;</span>].update({<span class="stringliteral">&#39;Pin&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:verticalUnit,<span class="stringliteral">&#39;Value&#39;</span>:PinW},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:dBmUnit,<span class="stringliteral">&#39;Value&#39;</span>:PindBm}},</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                                       <span class="stringliteral">&#39;TP&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>:TP},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:<span class="stringliteral">&#39;dB&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>:TPdB}},</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;                                       <span class="stringliteral">&#39;IL&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>:IL},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:<span class="stringliteral">&#39;dB&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>:ILdB}},</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;                                       <span class="stringliteral">&#39;Loss&#39;</span>:{<span class="stringliteral">&#39;Linear&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>:LossW},<span class="stringliteral">&#39;Log&#39;</span>:{<span class="stringliteral">&#39;Unit&#39;</span>:<span class="stringliteral">&#39;dB&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>:LossdB}}})</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160; </div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        numLevels=2**self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;        numEyes=numLevels-1</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        numInnerLevels=numLevels-2</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        numOuterLevels=numLevels-numInnerLevels</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;        numErrorCases=numOuterLevels+2*numInnerLevels</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        <span class="comment"># expected BER is 1/BPS * 1/levels * cases * 1/2 * erfc( outer oma / eyes / sqrt(2) / 2 / sigma of noise )</span></div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="comment"># for NRZ this is 1/1 * 1/2 * 2 * 1/2 *erfc( OMA/1/sqrt(2)/2/sigma) = 1/2 * erfc( OMA/sqrt(2)/2/sigma)</span></div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        <span class="comment"># for PAM-4 this is 1/2 * 1/4 * 6 * 1/2 * erfc( OMA/3/sqrt(2)/2/sigma) = 3/8 * erfc( OMA/6/sqrt(2)/sigma )</span></div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        <span class="comment"># for PAM-8 this is 1/3 * 1/8 * 14 *1/2 * erfc( OMA/7/sqrt(2)/2/sigma ) =  7/24 * erfc( OMA/14/sqrt(2)/sigma )</span></div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        <span class="comment"># we simplify this to F * erfc( 1./sqrt(2) * OMA/2/D/sigma )</span></div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <span class="comment"># where OMA/2/D/sigma is effectively the SNR</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        F= 1./self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a> * 1./numLevels * numErrorCases * 1./2</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        (FN,FD)=Rat(F)</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        D = numEyes</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160; </div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        <span class="keywordflow">if</span> <span class="stringliteral">&#39;Probabilities&#39;</span> <span class="keywordflow">in</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>.keys():</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;            <span class="keyword">import</span> scipy.special</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            BERmeas=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Gray&#39;</span>][<span class="stringliteral">&#39;Measured&#39;</span>]</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;            QFactor=min(scipy.special.erfcinv(BERmeas/F)*math.sqrt(2),1e9)</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;            QFactordB=Lin2dB(QFactor)</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160; </div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>]={<span class="stringliteral">&#39;QFactor&#39;</span>:QFactor,<span class="stringliteral">&#39;QFactordB&#39;</span>:QFactordB,<span class="stringliteral">&#39;BERMeasured&#39;</span>:BERmeas,</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                                        <span class="stringliteral">&#39;Levels&#39;</span>:{<span class="stringliteral">&#39;Total&#39;</span>:numLevels,<span class="stringliteral">&#39;Inner&#39;</span>:numInnerLevels,<span class="stringliteral">&#39;Outer&#39;</span>:numOuterLevels},</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                                        <span class="stringliteral">&#39;Eyes&#39;</span>:numEyes,<span class="stringliteral">&#39;ErrorCases&#39;</span>:numErrorCases,</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                                        <span class="stringliteral">&#39;F&#39;</span>:{<span class="stringliteral">&#39;Numerical&#39;</span>:F,<span class="stringliteral">&#39;Numerator&#39;</span>:FN,<span class="stringliteral">&#39;Denominator&#39;</span>:FD},<span class="stringliteral">&#39;D&#39;</span>:D}</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">NoiseSigma</a> &gt; 0.:</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                QFactorExpected=OMA/2/D/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">NoiseSigma</a></div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                BERexpected=F*scipy.special.erfc(1./math.sqrt(2.)*QFactorExpected)</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                QFactorExpecteddB=Lin2dB(QFactorExpected)</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                Penalty=QFactorExpecteddB-QFactordB</div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>].update({<span class="stringliteral">&#39;QFactorExpected&#39;</span>:QFactorExpected,<span class="stringliteral">&#39;QFactorExpecteddB&#39;</span>:QFactorExpecteddB,</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;                                        <span class="stringliteral">&#39;BERExpected&#39;</span>:BERexpected,<span class="stringliteral">&#39;TxPenalty&#39;</span>:Penalty})</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160; </div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abb318087e325c834857bca0b2ab115c9">Bathtub</a>(self,</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;                DecadesFromJoin=0.25,</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;                MinPointsForFit=6</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;                ):</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Generates bathtub curves on the eye diagram and calculates the error probabilities and rates</span></div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;<span class="stringliteral">        @param DecadesFromJoin float, defaults to 0.25, number of decades above the point where the PDFs join together to begin fitting</span></div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;<span class="stringliteral">        the histogram tails.  A bit further up, like 0.5-1 decade is ideal, but will cause algorithm failure for very low BER systems.</span></div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;<span class="stringliteral">        Too low, and the tail estimate will contain portions of the adjacent PDF.</span></div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;<span class="stringliteral">        @param MinPointsForFit integer, defaults to 6, minimum number of points to use to fit the tail of the PDF.  </span></div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;<span class="stringliteral">        After processing, the measDict member variable has an additional dictionary added called &#39;Bathtub&#39; and &#39;Probabilities&#39;.  Inside</span></div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;<span class="stringliteral">        the &#39;Bathtub&#39; dictionary are the following items:</span></div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;<span class="stringliteral">        Vertical - a dictionary containing:</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;<span class="stringliteral">        * Data - contains two vectors called:</span></div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;<span class="stringliteral">            - x - an x axis containing one element per row containing the voltage.</span></div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;<span class="stringliteral">            - y - a y axis containing one element per row containing the probability.</span></div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;<span class="stringliteral">        * Level - a dictionary array (each element in the dictionary is 0, 1, 2, etc.) containing, per level:</span></div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;<span class="stringliteral">            - LeftEst - a dictionary containing information on the left estimate (the PDF tail below the level in the histogram shown as a vertical slice:</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;<span class="stringliteral">                - Start - a dictionary containing Bin which is the starting row for the estimate of the PDF.</span></div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;<span class="stringliteral">                - End - a dictionary containing Bin which is the ending row for the estimate of the PDF.</span></div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;<span class="stringliteral">                - Est - a dictionary of the estimatated polynomial:</span></div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;<span class="stringliteral">                    - Coef - list of the three coefficients a0, a1, a2 for the polynomial a0+a1*x+a2*x^2 where x is the natural log of the probability.</span></div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;<span class="stringliteral">                    - Valid - if the estimate is valid.</span></div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;<span class="stringliteral">                    - Wf - a dictionary of the estimated PDF tail where:</span></div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;<span class="stringliteral">                        - x - is the x axis containing the voltage.</span></div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;<span class="stringliteral">                        - y - is the y axis containing the probability.</span></div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;<span class="stringliteral">            - RightEst - a dictionary containing information on the right estimate (the PDF tail above the level in the histogram shown as a vertical slice:</span></div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;<span class="stringliteral">                - Start - a dictionary containing Bin which is the starting row for the estimate of the PDF.</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;<span class="stringliteral">                - End - a dictionary containing Bin which is the ending row for the estimate of the PDF.</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;<span class="stringliteral">                - Est - a dictionary of the estimatated polynomial:</span></div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;<span class="stringliteral">                    - Coef - list of the three coefficients a0, a1, a2 for the polynomial a0+a1*x+a2*x^2 where x is the natural log of the probability.</span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;<span class="stringliteral">                    - Valid - if the estimate is valid.</span></div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="stringliteral">                    - Wf - a dictionary of the estimated PDF tail where:</span></div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="stringliteral">                        - x - is the x axis containing the voltage.</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="stringliteral">                        - y - is the y axis containing the probability.</span></div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="stringliteral">            - Hist - the entire, partially estimated, PDF for this level vertically across the entire vertical slice.  There is one probablity element</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="stringliteral">            per row in the eye diagram.</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="stringliteral">            - CDFFromLeft - The integrated PDF from the bottom to the top, forming the probability that a value could be below a given row.</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;<span class="stringliteral">            - CDFFromRight - The integrated PDF from the top to the bottom, forming the probability that a value could be above a given row.</span></div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;<span class="stringliteral">        * Horizontal - a dictionary array, one element per eye, where each element in the dictionary is 0, 1, 2, etc.), containing, per eye:</span></div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="stringliteral">            - Data - an instance of class Waveform, spanning the entire UI horizontally, containing the probability at the decision point for each column.</span></div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;<span class="stringliteral">            This is used to plot the jitter bathtub curves.</span></div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;<span class="stringliteral">        Inside the &#39;Probabilities&#39; dictionary are the following items:</span></div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;<span class="stringliteral">        * SymbolCodes - a list of the codes for the symbol.  This is just 0, 1, 2, etc. depending on the bits per symbol.</span></div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;<span class="stringliteral">        * GrayCodes - a list of gray coded symbols corresponding to the symbol codes.</span></div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;<span class="stringliteral">        * Interpretation - A list of lists representing a Symbols x Symbols matrix, where Interpretation[x][y] represents the probability that a</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;<span class="stringliteral">        symbol transmitted as symbol x is interpreted as symbol y.</span></div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;<span class="stringliteral">        * Symbol - the measured probability that a symbol was transmitted.</span></div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;<span class="stringliteral">        * ErrorRate - The error rates containing:</span></div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;<span class="stringliteral">            - Symbol - the symbol error rates as:</span></div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;<span class="stringliteral">                - PerSymbol - A list per symbol containing the probability of a symbol being erroneously decoded.</span></div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="stringliteral">                - Nominal - The total, nominal symbol error rate, assuming that each symbol was transmitted with equal probability.</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;<span class="stringliteral">                - Measured - The total, measured symbol error rate, considering the measured probability that a given symbol was transmitted.</span></div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;<span class="stringliteral">            - Bit - The bit error rates containing:</span></div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;<span class="stringliteral">                - Standard - The un-gray coded bit errors:</span></div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;<span class="stringliteral">                    - PerSymbol - a list per symbol containing the probability of one or more bit errors in the symbol.</span></div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;<span class="stringliteral">                    - Nominal - The total, nominal bit error rate, assuming that each bit was transmitted with equal probability.</span></div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;<span class="stringliteral">                    - Measured - the total, measured bit error rate, considering the measured probability that a given bit was transmitted.</span></div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;<span class="stringliteral">                - Gray - The gray coded bit errors:</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="stringliteral">                    - PerSymbol - a list per symbol containing the probability of one or more bit errors in the symbol.</span></div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="stringliteral">                    - Nominal - The total, nominal bit error rate, assuming that each bit was transmitted with equal probability.  Nominally, this should</span></div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="stringliteral">                    be the nominal BER divided by the number of bits per symbol.</span></div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="stringliteral">                    - Measured - the total, measured bit error rate, considering the measured probability that a given bit was transmitted.</span></div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;<span class="stringliteral">        @remark The Measure member function be called prior to this call.</span></div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        numberOfEyes=int(2**self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a>-1)</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;        UI=1./self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">BaudRate</a></div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        (R,C)=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>.shape</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        <span class="comment"># build bathtub curve waveforms</span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="comment"># one long vertical waveform for a bathtub curve</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;        c=C//2</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        <span class="comment"># a horizontal bathtub curve waveform for each eye</span></div>
<div class="line"><a name="l00966"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abb318087e325c834857bca0b2ab115c9">  966</a></span>&#160;        x=[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>+r/R*(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>) <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)]</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;        y=[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[r][c] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)]</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>]={<span class="stringliteral">&#39;Vertical&#39;</span>:{<span class="stringliteral">&#39;Data&#39;</span>:{<span class="stringliteral">&#39;x&#39;</span>:x,<span class="stringliteral">&#39;y&#39;</span>:y}},</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                                  <span class="stringliteral">&#39;Horizontal&#39;</span>:{}}</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160; </div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        XF=[[1.,v,v**2] <span class="keywordflow">for</span> v <span class="keywordflow">in</span> x]</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160; </div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>]={e:{<span class="stringliteral">&#39;LeftEst&#39;</span>:<span class="keywordtype">None</span>,<span class="stringliteral">&#39;RightEst&#39;</span>:<span class="keywordtype">None</span>} <span class="keywordflow">for</span> e <span class="keywordflow">in</span> range(numberOfEyes+1)}</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;        <span class="comment"># estimate the gaussians for the edges</span></div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;            r=0</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;            maxFit=1e-40</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;            minFit=0.</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;            gathering=<span class="keyword">False</span></div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;            X=[]; Y=[]; rStart=<span class="keywordtype">None</span>; rEnd=<span class="keywordtype">None</span>; CF=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;            <span class="keywordflow">while</span> r &lt; R:</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> gathering:</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                    <span class="keywordflow">if</span> y[r] &gt; minFit:</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                        gathering=<span class="keyword">True</span></div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;                        rStart=r</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;                <span class="keywordflow">if</span> gathering:</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;                    <span class="keywordflow">if</span> y[r] &lt;= maxFit <span class="keywordflow">or</span> len(X) &lt; MinPointsForFit:</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;                        X.append(XF[r])</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;                        <span class="keyword">with</span> np.errstate(divide=<span class="stringliteral">&#39;ignore&#39;</span>):</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                            Y.append([np.log(y[r])])</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                        rEnd=r</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;                r=r+1</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;            <span class="keywordflow">if</span> r != R:</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;                X=np.array(X); Y=np.array(Y)</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                CF = np.linalg.inv(np.transpose(X).dot(X)).dot(np.transpose(X)).dot(Y)</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][0][<span class="stringliteral">&#39;LeftEst&#39;</span>]={<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rStart},<span class="stringliteral">&#39;End&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rEnd},</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                            <span class="stringliteral">&#39;Est&#39;</span>:{<span class="stringliteral">&#39;Coef&#39;</span>:CF.tolist(),<span class="stringliteral">&#39;Valid&#39;</span>:CF[2][0]&lt;0,</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                                   <span class="stringliteral">&#39;Wf&#39;</span>:{<span class="stringliteral">&#39;x&#39;</span>:[x[v] <span class="keywordflow">for</span> v <span class="keywordflow">in</span> range(rStart,rEnd+1)],<span class="stringliteral">&#39;y&#39;</span>:[np.exp(v[0]) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> X.dot(CF)]}}}</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;                <span class="keywordflow">raise</span></div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        <span class="keywordflow">except</span> Exception <span class="keyword">as</span> ex:</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;            <span class="comment">#print(ex)</span></div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][0][<span class="stringliteral">&#39;LeftEst&#39;</span>]=\</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;                    {<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rStart},<span class="stringliteral">&#39;End&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rEnd},<span class="stringliteral">&#39;Est&#39;</span>:{<span class="stringliteral">&#39;Coef&#39;</span>:<span class="keywordtype">None</span>,<span class="stringliteral">&#39;Valid&#39;</span>:<span class="keyword">False</span>,<span class="stringliteral">&#39;Wf&#39;</span>:<span class="keywordtype">None</span>}}</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160; </div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;            r=R-1</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;            maxFit=1e-40</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            minFit=0.</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;            gathering=<span class="keyword">False</span></div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;            X=[]; Y=[]; rStart=<span class="keywordtype">None</span>; rEnd=<span class="keywordtype">None</span>; CF=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;            <span class="keywordflow">while</span> r &gt; 0:</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> gathering:</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;                    <span class="keywordflow">if</span> y[r] &gt; minFit:</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;                        gathering=<span class="keyword">True</span></div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;                        rStart=r</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;                <span class="keywordflow">if</span> gathering:</div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;                    <span class="keywordflow">if</span> y[r] &lt;= maxFit <span class="keywordflow">or</span> len(X) &lt; MinPointsForFit:</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;                        X.append(XF[r])</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;                        <span class="keyword">with</span> np.errstate(divide=<span class="stringliteral">&#39;ignore&#39;</span>):</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;                            Y.append([np.log(y[r])])</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                        rEnd=r</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;                r=r-1</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;            <span class="keywordflow">if</span> r &gt; 0:</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;                X=np.array(X); Y=np.array(Y)</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;                CF = np.linalg.inv(np.transpose(X).dot(X)).dot(np.transpose(X)).dot(Y)</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][numberOfEyes][<span class="stringliteral">&#39;RightEst&#39;</span>]={<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rStart},<span class="stringliteral">&#39;End&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rEnd},</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;                            <span class="stringliteral">&#39;Est&#39;</span>:{<span class="stringliteral">&#39;Coef&#39;</span>:CF.tolist(),<span class="stringliteral">&#39;Valid&#39;</span>:CF[2][0]&lt;0,</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;                                   <span class="stringliteral">&#39;Wf&#39;</span>:{<span class="stringliteral">&#39;x&#39;</span>:[x[v] <span class="keywordflow">for</span> v <span class="keywordflow">in</span> range(rEnd,rStart+1)],<span class="stringliteral">&#39;y&#39;</span>:[np.exp(v[0]) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> reversed(X.dot(CF).tolist())]}}}</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;                <span class="keywordflow">raise</span></div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;        <span class="keywordflow">except</span> Exception <span class="keyword">as</span> ex:</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;            <span class="comment">#print(ex)</span></div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][numberOfEyes][<span class="stringliteral">&#39;RightEst&#39;</span>]=\</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;                {<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rStart},<span class="stringliteral">&#39;End&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rEnd},<span class="stringliteral">&#39;Est&#39;</span>:{<span class="stringliteral">&#39;Coef&#39;</span>:<span class="keywordtype">None</span>,<span class="stringliteral">&#39;Valid&#39;</span>:<span class="keyword">False</span>,<span class="stringliteral">&#39;Wf&#39;</span>:<span class="keywordtype">None</span>}}</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160; </div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <span class="keywordflow">for</span> e <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>])):</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;            maxFit=1e-40</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;            minFit=1e-6</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;            minProbability=y[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][e][<span class="stringliteral">&#39;Decision&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]]</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;            <span class="keywordflow">if</span> y[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][e][<span class="stringliteral">&#39;Decision&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]]==0: <span class="comment"># there&#39;s a hole in the middle</span></div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;                minFit=0.</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;                minFit=pow(10.,np.log10(minProbability)+DecadesFromJoin)</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;                r=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][e][<span class="stringliteral">&#39;Decision&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;                gathering=<span class="keyword">False</span></div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                X=[]; Y=[]; rStart=<span class="keywordtype">None</span>; rEnd=<span class="keywordtype">None</span>; CF=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                <span class="keywordflow">while</span> r &gt; 0:</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                    <span class="keywordflow">if</span> <span class="keywordflow">not</span> gathering:</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                        <span class="keywordflow">if</span> y[r] &gt; minFit:</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                            gathering=<span class="keyword">True</span></div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                            rStart=r</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                    <span class="keywordflow">if</span> gathering:</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                        <span class="keywordflow">if</span> y[r] &lt;= maxFit <span class="keywordflow">or</span> len(X) &lt; MinPointsForFit:</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                            X.append(XF[r])</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                            <span class="keyword">with</span> np.errstate(divide=<span class="stringliteral">&#39;ignore&#39;</span>):</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                                Y.append([np.log(y[r])])</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                            rEnd=r</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                            <span class="keywordflow">break</span></div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                    r=r-1</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                <span class="keywordflow">if</span> r != 0:</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                    X=np.array(X); Y=np.array(Y)</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                    CF = np.linalg.inv(np.transpose(X).dot(X)).dot(np.transpose(X)).dot(Y)</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][e][<span class="stringliteral">&#39;RightEst&#39;</span>]={<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rStart},</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                                <span class="stringliteral">&#39;Est&#39;</span>:{<span class="stringliteral">&#39;Coef&#39;</span>:CF.tolist(),<span class="stringliteral">&#39;Valid&#39;</span>:CF[2][0]&lt;0,</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                                       <span class="stringliteral">&#39;Wf&#39;</span>:{<span class="stringliteral">&#39;x&#39;</span>:[x[v] <span class="keywordflow">for</span> v <span class="keywordflow">in</span> range(rEnd,rStart+1)],<span class="stringliteral">&#39;y&#39;</span>:[np.exp(v[0]) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> reversed(X.dot(CF).tolist())]}}}</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                    <span class="keywordflow">raise</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;            <span class="keywordflow">except</span> Exception <span class="keyword">as</span> ex:</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                <span class="comment">#print(ex)</span></div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][e][<span class="stringliteral">&#39;RightEst&#39;</span>]=\</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                    {<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rStart},<span class="stringliteral">&#39;End&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rEnd},<span class="stringliteral">&#39;Est&#39;</span>:{<span class="stringliteral">&#39;Coef&#39;</span>:<span class="keywordtype">None</span>,<span class="stringliteral">&#39;Valid&#39;</span>:<span class="keyword">False</span>,<span class="stringliteral">&#39;Wf&#39;</span>:<span class="keywordtype">None</span>}}</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160; </div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;                r=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][e][<span class="stringliteral">&#39;Decision&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;                gathering=<span class="keyword">False</span></div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;                X=[]; Y=[]; rStart=<span class="keywordtype">None</span>; rEnd=<span class="keywordtype">None</span>; CF=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;                <span class="keywordflow">while</span> r &lt; R:</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;                    <span class="keywordflow">if</span> <span class="keywordflow">not</span> gathering:</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                        <span class="keywordflow">if</span> y[r] &gt; minFit:</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                            gathering=<span class="keyword">True</span></div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                            rStart=r</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                    <span class="keywordflow">if</span> gathering:</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                        <span class="keywordflow">if</span> y[r] &lt;= maxFit  <span class="keywordflow">or</span> len(X) &lt; MinPointsForFit:</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                            X.append(XF[r])</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                            <span class="keyword">with</span> np.errstate(divide=<span class="stringliteral">&#39;ignore&#39;</span>):</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                                Y.append([np.log(y[r])])</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                            rEnd=r</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                            <span class="keywordflow">break</span></div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                    r=r+1</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                <span class="keywordflow">if</span> r != R:</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                    X=np.array(X)</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                    Y=np.array(Y)</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                    CF = np.linalg.inv(np.transpose(X).dot(X)).dot(np.transpose(X)).dot(Y)</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][e+1][<span class="stringliteral">&#39;LeftEst&#39;</span>]={<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rStart},<span class="stringliteral">&#39;End&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rEnd},</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;                                <span class="stringliteral">&#39;Est&#39;</span>:{<span class="stringliteral">&#39;Coef&#39;</span>:CF.tolist(),<span class="stringliteral">&#39;Valid&#39;</span>:CF[2][0]&lt;0,</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;                                       <span class="stringliteral">&#39;Wf&#39;</span>:{<span class="stringliteral">&#39;x&#39;</span>:[x[v] <span class="keywordflow">for</span> v <span class="keywordflow">in</span> range(rStart,rEnd+1)],<span class="stringliteral">&#39;y&#39;</span>:[np.exp(v[0]) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> X.dot(CF)]}}}</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;                    <span class="keywordflow">raise</span></div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;            <span class="keywordflow">except</span> Exception <span class="keyword">as</span> ex:</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                <span class="comment">#print(ex)</span></div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][e+1][<span class="stringliteral">&#39;LeftEst&#39;</span>]=\</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;                    {<span class="stringliteral">&#39;Start&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rStart},<span class="stringliteral">&#39;End&#39;</span>:{<span class="stringliteral">&#39;Bin&#39;</span>:rEnd},<span class="stringliteral">&#39;Est&#39;</span>:{<span class="stringliteral">&#39;Coef&#39;</span>:<span class="keywordtype">None</span>,<span class="stringliteral">&#39;Valid&#39;</span>:<span class="keyword">False</span>,<span class="stringliteral">&#39;Wf&#39;</span>:<span class="keywordtype">None</span>}}</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160; </div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;        <span class="comment"># now, gather all of the curve fits and actual data into probability histograms that span the entire</span></div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        <span class="comment"># eye</span></div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        td=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>,R,R/(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">maxV</a>-self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">minV</a>))</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;        <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(numberOfEyes+1):</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;                <span class="comment"># calculate the entire left estimate</span></div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;                <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;LeftEst&#39;</span>][<span class="stringliteral">&#39;Est&#39;</span>][<span class="stringliteral">&#39;Valid&#39;</span>]:</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;                    yleft=[np.exp(v[0]) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> np.array(XF).dot(np.array(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;LeftEst&#39;</span>][<span class="stringliteral">&#39;Est&#39;</span>][<span class="stringliteral">&#39;Coef&#39;</span>]))]</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;                    yleft=[0. <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(R)]</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;                yleftStart=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;LeftEst&#39;</span>][<span class="stringliteral">&#39;Start&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;                <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;RightEst&#39;</span>][<span class="stringliteral">&#39;Est&#39;</span>][<span class="stringliteral">&#39;Valid&#39;</span>]:</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                    yright=[np.exp(v[0]) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> np.array(XF).dot(np.array(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;RightEst&#39;</span>][<span class="stringliteral">&#39;Est&#39;</span>][<span class="stringliteral">&#39;Coef&#39;</span>]))]</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;                    yright=[0. <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(R)]</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;                yrightStart=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;RightEst&#39;</span>][<span class="stringliteral">&#39;Start&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;                yCombo=[yleft[r] <span class="keywordflow">if</span> r &lt; yleftStart <span class="keywordflow">else</span> yright[r] <span class="keywordflow">if</span> r &gt; yrightStart <span class="keywordflow">else</span> y[r] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)]</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;Hist&#39;</span>]=yCombo</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;                <span class="comment"># compute the CDF from the left and the right</span></div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;CDFFromLeft&#39;</span>]=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>(td,yCombo).Integral(addPoint=<span class="keyword">False</span>,scale=<span class="keyword">False</span>).Values()</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;CDFFromRight&#39;</span>]=[v <span class="keywordflow">for</span> v <span class="keywordflow">in</span> reversed(<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>(td,[v <span class="keywordflow">for</span> v <span class="keywordflow">in</span> reversed(yCombo)]).Integral(addPoint=<span class="keyword">False</span>,scale=<span class="keyword">False</span>).Values())]</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;            <span class="keywordflow">except</span> Exception <span class="keyword">as</span> ex:</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;                <span class="comment">#print(ex)</span></div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;                <span class="keywordflow">pass</span></div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160; </div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        <span class="comment"># SymbolProbability[s] is the probabability that a symbol sent was sent as symbol s</span></div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;        SymbolProbability=[sum(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][s][<span class="stringliteral">&#39;Hist&#39;</span>]) <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;        DecisionLevel=[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][e][<span class="stringliteral">&#39;Decision&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>] <span class="keywordflow">for</span> e <span class="keywordflow">in</span> range(numberOfEyes)]</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        LessThanCDF=[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;CDFFromLeft&#39;</span>] <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;        GreaterThanCDF=[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Level&#39;</span>][t][<span class="stringliteral">&#39;CDFFromRight&#39;</span>] <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;        <span class="comment"># SymbolLessThanDecisionLevel[s][t] is the probability that a symbol transmitted as s is lower than decision threshold t</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;        SymbolLessThanDecisionLevel=[[(LessThanCDF[b][DecisionLevel[t]] <span class="keywordflow">if</span> t &lt; numberOfEyes <span class="keywordflow">else</span> LessThanCDF[b][-1])/SymbolProbability[b] <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(numberOfEyes+1)] <span class="keywordflow">for</span> b <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;        <span class="comment"># SymbolGreaterThanDecisionLevel[s][t] is the probability that a symbol transmitted as s is higher than decision threshold t</span></div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;        SymbolGreaterThanDecisionLevel=[[(GreaterThanCDF[b][DecisionLevel[t-1]] <span class="keywordflow">if</span> t &gt; 0 <span class="keywordflow">else</span> GreaterThanCDF[b][0])/SymbolProbability[b] <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(numberOfEyes+1)] <span class="keywordflow">for</span> b <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;        <span class="comment"># SymbolInterpretedAsOther[r][c] is the probability that a symbol transmitted as r was interpreted as symbol c</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;        SymbolInterpretedAsOther=[[SymbolLessThanDecisionLevel[r][c]*SymbolGreaterThanDecisionLevel[r][c] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(numberOfEyes+1)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;        <span class="comment"># SymbolErrorRatePerSymbol[s] is the probability that a symbol transmitted as s was interpreted incorrectly</span></div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;        SymbolErrorRatePerSymbol=[sum([SymbolInterpretedAsOther[r][c] <span class="keywordflow">if</span> r!=c <span class="keywordflow">else</span> 0. <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(numberOfEyes+1)]) <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;        NominalSymbolErrorRate=sum([SymbolErrorRatePerSymbol[s]*1./(numberOfEyes+1) <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(numberOfEyes+1)])</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;        MeasuredSymbolErrorRate=sum([SymbolErrorRatePerSymbol[s]*SymbolProbability[s] <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(numberOfEyes+1)])</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160; </div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;        <span class="comment">#normal coding</span></div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;        SymbolCode=[s <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;        BitChanges=[[sum([int(v) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> bin(SymbolCode[r]^SymbolCode[c])[2:]]) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(numberOfEyes+1)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;        BitErrorRatePerSymbol=[sum([SymbolInterpretedAsOther[r][c]*BitChanges[r][c]/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a> <span class="keywordflow">if</span> r!=c <span class="keywordflow">else</span> 0. <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(numberOfEyes+1)]) <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;        NominalBitErrorRate=sum([BitErrorRatePerSymbol[s]*1./(numberOfEyes+1) <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(numberOfEyes+1)])</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;        MeasuredBitErrorRate=sum([BitErrorRatePerSymbol[s]*SymbolProbability[s] <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(numberOfEyes+1)])</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160; </div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;        <span class="comment"># this is the formula for gray coding -- each code change changes by only one bit</span></div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;        GrayCodes=[0 <span class="keywordflow">if</span> b==0 <span class="keywordflow">else</span> b^(b&gt;&gt;1) <span class="keywordflow">for</span> b <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;        GrayCodeBitChanges=[[sum([int(v) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> bin(GrayCodes[r]^GrayCodes[c])[2:]]) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(numberOfEyes+1)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;        GrayCodeBitErrorRatePerSymbol=[sum([SymbolInterpretedAsOther[r][c]*GrayCodeBitChanges[r][c]/self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a> <span class="keywordflow">if</span> r!=c <span class="keywordflow">else</span> 0. <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(numberOfEyes+1)]) <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numberOfEyes+1)]</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        GrayCodeNominalBitErrorRate=sum([GrayCodeBitErrorRatePerSymbol[s]*1./(numberOfEyes+1) <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(numberOfEyes+1)])</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;        GrayCodeMeasuredBitErrorRate=sum([GrayCodeBitErrorRatePerSymbol[s]*SymbolProbability[s] <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(numberOfEyes+1)])</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160; </div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Probabilities&#39;</span>]={<span class="stringliteral">&#39;SymbolCodes&#39;</span>:SymbolCode,<span class="stringliteral">&#39;GrayCodes&#39;</span>:GrayCodes,<span class="stringliteral">&#39;Interpretation&#39;</span>:SymbolInterpretedAsOther,<span class="stringliteral">&#39;Symbol&#39;</span>:SymbolProbability,</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                                        <span class="stringliteral">&#39;ErrorRate&#39;</span>:{<span class="stringliteral">&#39;Symbol&#39;</span>:{<span class="stringliteral">&#39;PerSymbol&#39;</span>:SymbolErrorRatePerSymbol,<span class="stringliteral">&#39;Nominal&#39;</span>:NominalSymbolErrorRate,<span class="stringliteral">&#39;Measured&#39;</span>:MeasuredSymbolErrorRate},</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                                                     <span class="stringliteral">&#39;Bit&#39;</span>:{<span class="stringliteral">&#39;Standard&#39;</span>:{<span class="stringliteral">&#39;PerSymbol&#39;</span>:BitErrorRatePerSymbol,<span class="stringliteral">&#39;Nominal&#39;</span>:NominalBitErrorRate,<span class="stringliteral">&#39;Measured&#39;</span>:MeasuredBitErrorRate},</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                                                            <span class="stringliteral">&#39;Gray&#39;</span>:{<span class="stringliteral">&#39;PerSymbol&#39;</span>:GrayCodeBitErrorRatePerSymbol,<span class="stringliteral">&#39;Nominal&#39;</span>:GrayCodeNominalBitErrorRate,<span class="stringliteral">&#39;Measured&#39;</span>:GrayCodeMeasuredBitErrorRate}}}}</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;        <span class="comment"># horizontal</span></div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;        td=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">TimeDescriptor</a>(-0.5*UI,C,C/UI)</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;        <span class="keywordflow">for</span> e <span class="keywordflow">in</span> range(numberOfEyes):</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;            r=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][e][<span class="stringliteral">&#39;Decision&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Bathtub&#39;</span>][<span class="stringliteral">&#39;Horizontal&#39;</span>][e]={<span class="stringliteral">&#39;Data&#39;</span>:<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>(td,[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>[r][c] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C)])}</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160; </div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a43a8b76b19ac3946f4a6c4df1a736eed">Annotations</a>(self,</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                    MeanLevels=True,</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;                    LevelExtents=True,</div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;                    EyeWidth=True,</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;                    EyeHeight=True,</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                    Contours=True,</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                    WhichContours=&#39;Eye&#39; <span class="comment"># &#39;Eye&#39; or &#39;All&#39;</span></div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;                    ):</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Generates an annotation bitmap that goes along with the raw bitmap containing annotation marks.  </span></div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;<span class="stringliteral">        This creates an annotationBitmap member variable of the same dimensions as the rawBitmap member variable.  Each pixel in</span></div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;<span class="stringliteral">        the bitmap contains a 1 whereever there should be an overlaid, lit pixel for the annotation.</span></div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;<span class="stringliteral">        @param MeanLevels bool, defaults to True, whether to place a horizontal line at the mean levels.</span></div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;<span class="stringliteral">        @param LevelExtents bool, defaults to True, whether to place horizontal dotted lines about the mean levels to demarcate the extents.</span></div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="stringliteral">        @param EyeWidth bool, defaults to True, whether to place a horizontal line where the eye width is measured.</span></div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="stringliteral">        @param EyeHeight bool, defaults to True, whether to place a vertical line where the eye height is measured.</span></div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;<span class="stringliteral">        @param Contours bool, defaults to True, whether to annotate the eye contour with the probability specified in the Measurement.</span></div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;<span class="stringliteral">        @param WhichContours string, &#39;Eye&#39; or &#39;All&#39;, defaults to &#39;Eye&#39;, where to annotate the contour.  &#39;Eye&#39; annotates only the contour around</span></div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="stringliteral">        the eye.  &#39;All&#39; annotates any region whose inside has the probability specified.</span></div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;<span class="stringliteral">        @remark The Measure member function be called prior to this call.</span></div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        <span class="comment"># annotations</span></div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;        (R,C)=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>.shape</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>=np.zeros(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>.shape)</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        <span class="keywordflow">if</span> MeanLevels:</div>
<div class="line"><a name="l01201"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a43a8b76b19ac3946f4a6c4df1a736eed"> 1201</a></span>&#160;            <span class="comment"># a line through the levels</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;            <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>])):</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                r=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][i][<span class="stringliteral">&#39;Mean&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;                <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C):</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][c]=1</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;                <span class="keywordflow">if</span> LevelExtents:</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                    <span class="comment"># dotted lines at the level edges</span></div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                    r = self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][i][<span class="stringliteral">&#39;Min&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(0,C,2):</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][c]=1</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;                    r = self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][i][<span class="stringliteral">&#39;Max&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(0,C,2):</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;                        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][c]=1</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        <span class="comment"># lines in the eye</span></div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>])):</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;            <span class="keywordflow">if</span> EyeWidth:</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;                <span class="comment"># horizontal line through the middle of the eye</span></div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;                r = self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Decision&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;                <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Start&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>],self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;End&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]):</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][c]=1</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;            <span class="keywordflow">if</span> EyeHeight:</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;                <span class="comment"># vertical line through the middle of the eye</span></div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;                c = C//2</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Low&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>],self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;High&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]):</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][c]=1</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;            <span class="keywordflow">if</span> Contours:</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                <span class="keywordflow">if</span> WhichContours == <span class="stringliteral">&#39;All&#39;</span>:</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                    <span class="comment"># develop the extents of the eye openings for each eye in a column (vertical slice)</span></div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                    <span class="comment"># The assumption is that there is signal or the exterior in the first row.  Stepping into</span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                    <span class="comment"># a dark area from a non-dark area starts an extent and the stepping from a dark area to a</span></div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                    <span class="comment"># non-dark area ends an extent.</span></div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                    darkExtents=[]</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C):</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;                        counter=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;                        thisExtents=[]</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;                        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(1,R):</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;                            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>[r][c]==0. <span class="keywordflow">and</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>[r-1][c]!=0.:</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;                                counter=r</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;                            <span class="keywordflow">elif</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>[r][c]!=0 <span class="keywordflow">and</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>[r-1][c]==0:</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                                <span class="keywordflow">if</span> counter != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;                                    thisExtents.append((counter,r))</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                        darkExtents.append(thisExtents)</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;                    <span class="comment"># convert the extents into sizes for comparison</span></div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(darkExtents)):</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;                        extents=darkExtents[c]</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;                        <span class="keywordflow">for</span> extent <span class="keywordflow">in</span> extents:</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[extent[0]][c]=1</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[extent[1]][c]=1</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;                    <span class="comment"># contour line</span></div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;                    <span class="comment"># walk horizontally looking at the max and min vertical extents</span></div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;                    r = self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Decision&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;                    lastrh=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;                    lastrl=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Start&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>],self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;End&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]):</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;                        rh=r</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;                        <span class="keywordflow">while</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>[rh][c]==0:</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;                            <span class="keywordflow">if</span> rh==R-1:</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;                                <span class="keywordflow">break</span></div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;                            rh=rh+1</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;                        rl=r</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;                        <span class="keywordflow">while</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>[rl][c]==0:</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;                            <span class="keywordflow">if</span> rl==0:</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;                                <span class="keywordflow">break</span></div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;                            rl=rl-1</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;                        <span class="keywordflow">if</span> lastrh==<span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[rh][c]=1</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[rl][c]=1</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;                            <span class="keywordflow">for</span> rline <span class="keywordflow">in</span> range(min(lastrh+1,rh),min(max(lastrh+1,rh)+1,R)):</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;                                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[rline][c]=1</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;                            <span class="keywordflow">for</span> rline <span class="keywordflow">in</span> range(min(lastrl+1,rl),min(max(lastrl+1,rl)+1,R)):</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;                                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[rline][c]=1</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;                        lastrh=rh</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;                        lastrl=rl</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;                    <span class="comment"># walk vertically looking at the max and min horizontal extents</span></div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;                    c=C//2</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;                    lastch=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                    lastcl=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                    <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;Low&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>],self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Eye&#39;</span>][i][<span class="stringliteral">&#39;High&#39;</span>][<span class="stringliteral">&#39;Bin&#39;</span>]):</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;                        ch=c</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                        <span class="keywordflow">while</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>[r][ch]==0:</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                            <span class="keywordflow">if</span> ch==C-1:</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                                <span class="keywordflow">break</span></div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;                            ch=ch+1</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                        cl=c</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;                        <span class="keywordflow">while</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">BitmapLog</a>[r][cl]==0:</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;                            <span class="keywordflow">if</span> cl==0:</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                                <span class="keywordflow">break</span></div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;                            cl=cl-1</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;                        <span class="keywordflow">if</span> lastch==<span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][ch]=1</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][cl]=1</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                            <span class="keywordflow">for</span> cline <span class="keywordflow">in</span> range(min(lastch+1,ch),min(max(lastch+1,ch)+1,C)):</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;                                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][cline]=1</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;                            <span class="keywordflow">for</span> cline <span class="keywordflow">in</span> range(min(lastcl+1,cl),min(max(lastcl+1,cl)+1,C)):</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;                                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][cline]=1</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;                        lastch=ch</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;                        lastcl=cl</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160; </div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aebc6f885728eb732a8678d4782fcf45a">CreateImage</a>(self,</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;                    LogIntensity=False,</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                    MinExponentLogIntensity=-6.,</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;                    MaxExponentLogIntensity=0,</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;                    NumUI=1,</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                    Saturation=20.,</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                    InvertImage=True,</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                    Color=&#39;#ffffff&#39;,</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;                    AnnotationColor=&#39;#000000&#39;,</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;                    ScaleX=100.,</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;                    ScaleY=100.,</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;                    ):</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Creates the image (picture) from the raw bitmap and the annotation bit map.  </span></div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;<span class="stringliteral">        @param LogIntensity bool, defaults to False, whether to generate the eye diagram with a logarithmic intensity.  This allows better</span></div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;<span class="stringliteral">        insight into the BER contours.</span></div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;<span class="stringliteral">        @param MinExponentLogIntensity float, defaults to -6.  If LogIntensity is specified, this is the exponent on the probablity, below which</span></div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;<span class="stringliteral">        pixels are shown a totally colored (or totally black if inverted).</span></div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;<span class="stringliteral">        @param MaxExponentLogIntensity float, defaults to 0.  If LogIntensity is specified, this is the exponent on the probablity, above which</span></div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;<span class="stringliteral">        pixels are shown a totally black (or totally colored if inverted).</span></div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;<span class="stringliteral">        @param NumUI int, defaults to 1, number of unit intervals to show in the eye diagram.</span></div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;<span class="stringliteral">        @param Saturation float, defaults to 20 (%) used to generate a saturation curve for the eye, otherwise the correct contrast is not shown.</span></div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;<span class="stringliteral">        Best values are 20 % or lower.</span></div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;<span class="stringliteral">        @param InvertImage bool, defaults to True.  Non-inverted images are shades of black on the color specified.  Inverted images are shades of</span></div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;<span class="stringliteral">        the color specified on black.</span></div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;<span class="stringliteral">        @param Color string, defaults to #ffffff, hexadecimal code where each of the three bytes represents the 0-255 value of R, G, and B, for the</span></div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;<span class="stringliteral">        eye diagram.  &#39;#ffffff&#39; is white.  &#39;#000000&#39; is black.</span></div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;<span class="stringliteral">        @param AnnotationColor string, defaults to #000000, hexadecimal code where each of the three bytes represents the 0-255 value of R, G, and B,</span></div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;<span class="stringliteral">        for the annotations.</span></div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;<span class="stringliteral">        @param ScaleX float, defaults to 100, scaling of the x axis of the image after construction.</span></div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;<span class="stringliteral">        @param ScaleY float, defaults to 100, scaling of the y axis of the image after construction. </span></div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;<span class="stringliteral">        Scaling allows for lower resolution images, requiring less processing, to create larger, beautiful eye diagrams.  </span></div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;<span class="stringliteral">        Upon completion, the image is held in the image member variable.</span></div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;        bitmap=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3ce234faa434f22d1287e9c5218fc3d9">Bitmap</a>().copy()</div>
<div class="line"><a name="l01336"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aebc6f885728eb732a8678d4782fcf45a"> 1336</a></span>&#160;        (R,C)=bitmap.shape</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;        <span class="keywordflow">if</span> LogIntensity:</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;            bitmap=bitmap/np.sum(bitmap)*C</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;            minBER=max(MinExponentLogIntensity,-20)</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;            maxBER=max(minBER,MaxExponentLogIntensity)</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;            minValue=pow(10.,minBER-1)</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;            minSat=0</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;            maxSat=1.</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160; </div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;            m=(maxSat-minSat)/(maxBER-minBER)</div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;            b=minSat-minBER*m</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;            bitmap=np.array([[math.log10(max(bitmap[r][c],minValue)) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)])</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;            bitmap=bitmap*m+b</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;            bitmap=np.array([[0. <span class="keywordflow">if</span> bitmap[r][c] &lt; minSat <span class="keywordflow">else</span> (1 <span class="keywordflow">if</span> bitmap[r][c] &gt; maxSat <span class="keywordflow">else</span> bitmap[r][c]) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)])</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">rawBitmap</a>=bitmap</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;            bitmap=255.0-bitmap*255.0</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160; </div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;        maxValue=bitmap.max()</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160; </div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;        numUI=int(NumUI+0.5)</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;        <span class="keywordflow">if</span> numUI&gt;1:</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;            bitmap=np.array([[bitmap[r][c%C] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C*numUI)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)])</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a> <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;                annotationBitmap=np.array([[self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a>[r][c%C] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C*numUI)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R)])</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        <span class="keywordflow">elif</span> <span class="keywordflow">not</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a> <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;            annotationBitmap=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a></div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160; </div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        C=C*numUI</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160; </div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> LogIntensity:</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;            P=math.log10(min(0.99,max(0.001,Saturation/100.)))/math.log10(0.5)</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;            bitmap=(((bitmap.astype(float)*-1.0+maxValue)/maxValue)**P*255.0).astype(int)</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160; </div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;        <span class="keywordflow">if</span> InvertImage:</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;            bitmap=255-bitmap</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160; </div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;        color=<span class="keyword">True</span></div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;        <span class="keywordflow">if</span> color:</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;                color=int(Color.strip(<span class="stringliteral">&#39;#&#39;</span>),16)</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;                b=color%256; g=(color//256)%256; r=(color//(256*256))%256</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;                r=256; g=256; b=256</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160; </div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;            ba=np.squeeze(np.asarray(np.array(bitmap)))</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;            rgbArray = np.zeros((ba.shape[0],ba.shape[1],3), <span class="stringliteral">&#39;uint8&#39;</span>)</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;            rgbArray[..., 0] = np.flipud(ba)*r/256</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;            rgbArray[..., 1] = np.flipud(ba)*g/256</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;            rgbArray[..., 2] = np.flipud(ba)*b/256</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160; </div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">annotationBitmap</a> <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;                <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;                    color=int(AnnotationColor.strip(<span class="stringliteral">&#39;#&#39;</span>),16)</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;                    b=color%256; g=(color//256)%256; r=(color//(256*256))%256</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;                <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;                    r=256; g=256; b=256</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160; </div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;                abm=np.flipud(annotationBitmap)</div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;                <span class="keywordflow">for</span> row <span class="keywordflow">in</span> range(rgbArray.shape[0]):</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;                    <span class="keywordflow">for</span> col <span class="keywordflow">in</span> range(rgbArray.shape[1]):</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;                        <span class="keywordflow">if</span> abm[row][col] != 0:</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;                            rgbArray[row][col][0]=r</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;                            rgbArray[row][col][1]=g</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                            rgbArray[row][col][2]=b</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160; </div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a86d0d51ceb4bc3bd26707520f257a5a4">img</a> = Image.fromarray(rgbArray)</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a86d0d51ceb4bc3bd26707520f257a5a4">img</a>=Image.fromarray(np.squeeze(np.asarray(np.array(bitmap))).astype(np.uint8))</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160; </div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;        C=int(C*ScaleX/100.); R=int(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aa831315374a492602366faa359d393d7">RowsSpecified</a>*ScaleY/100.)</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a86d0d51ceb4bc3bd26707520f257a5a4">img</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a86d0d51ceb4bc3bd26707520f257a5a4">img</a>.resize((C,R))</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a42cb5f5737262947250c709931232c69">image</a>=copy.deepcopy(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a86d0d51ceb4bc3bd26707520f257a5a4">img</a>)</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160; </div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;    <span class="keyword">def </span>Penalties(self,</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;                  NoiseSigma=0,</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;                  NoisePenaltydB=0</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;                  ):</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;        <span class="keywordflow">if</span> NoiseSigma == 0:</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&#39;Penalties&#39;</span> <span class="keywordflow">in</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>.keys():</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;                del self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Penalties&#39;</span>]</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;            numLevels=2**self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a></div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;            numEyes=numLevels-1</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;            numInnerLevels=numLevels-2</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;            numOuterLevels=numLevels-numInnerLevels</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;            numErrorCases=numOuterLevels+2*numInnerLevels</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;            <span class="comment"># expected BER is 1/BPS * 1/levels * cases * 1/2 * erfc( outer oma / eyes / sqrt(2) / 2 / sigma of noise )</span></div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;            <span class="comment"># for NRZ this is 1/1 * 1/2 * 2 * 1/2 *erfc( OMA/1/sqrt(2)/2/sigma) = 1/2 * erfc( OMA/sqrt(2)/2/sigma)</span></div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;            <span class="comment"># for PAM-4 this is 1/2 * 1/4 * 6 * 1/2 * erfc( OMA/3/sqrt(2)/2/sigma) = 3/8 * erfc( OMA/6/sqrt(2)/sigma )</span></div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;            <span class="comment"># for PAM-8 this is 1/3 * 1/8 * 14 *1/2 * erfc( OMA/7/sqrt(2)/2/sigma ) =  7/24 * erfc( OMA/14/sqrt(2)/sigma )</span></div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;            <span class="comment"># we simplify this to F * erfc( 1./sqrt(2) * OMA/2/D/sigma )</span></div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;            <span class="comment"># where OMA/2/D/sigma is effectively the SNR</span></div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;            F= 1./self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">BitsPerSymbol</a> * 1./numLevels * numErrorCases * 1./2</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;            (FN,FD)=Rat(F)</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;            D = numEyes</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160; </div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;            PH=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>])-1][<span class="stringliteral">&#39;Mean&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>]</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;            PL=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Level&#39;</span>][0][<span class="stringliteral">&#39;Mean&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>]</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;            OMA=PH-PL</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;            BERmeas=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Gray&#39;</span>][<span class="stringliteral">&#39;Measured&#39;</span>]</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160; </div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;            NoisePenalty=10**(NoisePenaltydB/10.)</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160; </div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;            QFactorExpected=OMA/2/D/NoiseSigma*NoisePenalty</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;            BERexpected=F*scipy.special.erfc(1./math.sqrt(2.)*QFactorExpected)</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;            QFactorExpecteddB=10.*math.log10(QFactorExpected)</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;            QFactor=scipy.special.erfcinv(BERmeas/F)*math.sqrt(2)</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;            QFactordB=10.*math.log10(QFactor)</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;            TxPenalty=QFactorExpecteddB-QFactordB</div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">measDict</a>[<span class="stringliteral">&#39;Penalties&#39;</span>]={<span class="stringliteral">&#39;PH&#39;</span>:PH,<span class="stringliteral">&#39;PL&#39;</span>:PL,<span class="stringliteral">&#39;MA&#39;</span>:OMA,<span class="stringliteral">&#39;QFactorExpected&#39;</span>:QFactorExpected,<span class="stringliteral">&#39;QFactorExpecteddB&#39;</span>:QFactorExpecteddB,</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;                                        <span class="stringliteral">&#39;BERMeasured&#39;</span>:BERmeas,<span class="stringliteral">&#39;BERExpected&#39;</span>:BERexpected,</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;                                        <span class="stringliteral">&#39;QFactor&#39;</span>:QFactor,<span class="stringliteral">&#39;QFactordB&#39;</span>:QFactordB,<span class="stringliteral">&#39;TxPenalty&#39;</span>:TxPenalty,</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;                                        <span class="stringliteral">&#39;NoiseSigma&#39;</span>:NoiseSigma,<span class="stringliteral">&#39;NoisePenalty&#39;</span>:NoisePenaltydB,</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;                                        <span class="stringliteral">&#39;Levels&#39;</span>:{<span class="stringliteral">&#39;Total&#39;</span>:numLevels,<span class="stringliteral">&#39;Inner&#39;</span>:numInnerLevels,<span class="stringliteral">&#39;Outer&#39;</span>:numOuterLevels},</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;                                        <span class="stringliteral">&#39;Eyes&#39;</span>:numEyes,<span class="stringliteral">&#39;ErrorCases&#39;</span>:numErrorCases,</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;                                        <span class="stringliteral">&#39;F&#39;</span>:{<span class="stringliteral">&#39;Numerical&#39;</span>:F,<span class="stringliteral">&#39;Numerator&#39;</span>:FN,<span class="stringliteral">&#39;Denominator&#39;</span>:FD},</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;                                        <span class="stringliteral">&#39;D&#39;</span>:D}</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a5ead5cf1fbb767c3ef67b6acf3b0bce3"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.HashValue</a></div><div class="ttdeci">def HashValue(self, stuffToHash='')</div><div class="ttdoc">Generates the hash for a definition.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00107">EyeDiagramBitmap.py:107</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2TimeDomain_2Waveform_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a42cb5f5737262947250c709931232c69"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a42cb5f5737262947250c709931232c69">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.image</a></div><div class="ttdeci">image</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l01409">EyeDiagramBitmap.py:1409</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a65932119268e17eaabd50a4c0164e733"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a65932119268e17eaabd50a4c0164e733">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.measDict</a></div><div class="ttdeci">measDict</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00186">EyeDiagramBitmap.py:186</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_adbb25eeb24df358818a2c5d74c95fe60"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#adbb25eeb24df358818a2c5d74c95fe60">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.aprbswf</a></div><div class="ttdeci">aprbswf</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00207">EyeDiagramBitmap.py:207</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_ab32f24ff7950181d534e61711f66762c"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ab32f24ff7950181d534e61711f66762c">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.EnhancementMode</a></div><div class="ttdeci">EnhancementMode</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00180">EyeDiagramBitmap.py:180</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a60e268a98903daa76a9025f711447f3b"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a60e268a98903daa76a9025f711447f3b">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.YMin</a></div><div class="ttdeci">YMin</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00175">EyeDiagramBitmap.py:175</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a3ce234faa434f22d1287e9c5218fc3d9"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3ce234faa434f22d1287e9c5218fc3d9">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.Bitmap</a></div><div class="ttdeci">def Bitmap(self)</div><div class="ttdoc">Returns the raw bitmap.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00273">EyeDiagramBitmap.py:273</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a41fe9b74adb6384cb21d39c983cd6466"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a41fe9b74adb6384cb21d39c983cd6466">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.NoiseSigma</a></div><div class="ttdeci">NoiseSigma</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00183">EyeDiagramBitmap.py:183</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters_1_1WaveformTrimmer_1_1WaveformTrimmer_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Filters_1_1WaveformTrimmer_1_1WaveformTrimmer.xhtml">SignalIntegrity.Lib.TimeDomain.Filters.WaveformTrimmer.WaveformTrimmer</a></div><div class="ttdoc">trims waveforms</div><div class="ttdef"><b>Definition:</b> <a href="WaveformTrimmer_8py_source.xhtml#l00028">WaveformTrimmer.py:28</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_ab63185bb31a9a8bc741a09394ff522e7"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ab63185bb31a9a8bc741a09394ff522e7">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.eyeExtentsForAlignment</a></div><div class="ttdeci">eyeExtentsForAlignment</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00463">EyeDiagramBitmap.py:463</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a9add875e7205baedfc71843a562f7999"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a9add875e7205baedfc71843a562f7999">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.annotationBitmap</a></div><div class="ttdeci">annotationBitmap</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00187">EyeDiagramBitmap.py:187</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a83c5b7515727772548c85e793fc9194a"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a83c5b7515727772548c85e793fc9194a">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.Cols</a></div><div class="ttdeci">Cols</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00177">EyeDiagramBitmap.py:177</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a7654bd82719bfde1c792d7828664dde2"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a7654bd82719bfde1c792d7828664dde2">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.BaudRate</a></div><div class="ttdeci">BaudRate</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00178">EyeDiagramBitmap.py:178</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1CallBacker_1_1CallBacker_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1CallBacker_1_1CallBacker.xhtml">SignalIntegrity.Lib.CallBacker.CallBacker</a></div><div class="ttdoc">Handles Callbacks that allow progress reporting during long calculations and capability to abort.</div><div class="ttdef"><b>Definition:</b> <a href="CallBacker_8py_source.xhtml#l00050">CallBacker.py:50</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_aea30b783ec312010e67300a5cf011d23"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aea30b783ec312010e67300a5cf011d23">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.BitsPerSymbol</a></div><div class="ttdeci">BitsPerSymbol</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00182">EyeDiagramBitmap.py:182</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1TimeDescriptor_1_1TimeDescriptor.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform.TimeDescriptor.TimeDescriptor</a></div><div class="ttdoc">time-axis for waveforms</div><div class="ttdef"><b>Definition:</b> <a href="TimeDescriptor_8py_source.xhtml#l00028">TimeDescriptor.py:28</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a5abb2c98da8f10c58456b81695cc119a"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5abb2c98da8f10c58456b81695cc119a">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.maxV</a></div><div class="ttdeci">maxV</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00213">EyeDiagramBitmap.py:213</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_abb318087e325c834857bca0b2ab115c9"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abb318087e325c834857bca0b2ab115c9">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.Bathtub</a></div><div class="ttdeci">def Bathtub(self, DecadesFromJoin=0.25, MinPointsForFit=6)</div><div class="ttdoc">Generates bathtub curves on the eye diagram and calculates the error probabilities and rates.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00966">EyeDiagramBitmap.py:966</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a86d0d51ceb4bc3bd26707520f257a5a4"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a86d0d51ceb4bc3bd26707520f257a5a4">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.img</a></div><div class="ttdeci">img</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00188">EyeDiagramBitmap.py:188</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_aebc6f885728eb732a8678d4782fcf45a"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aebc6f885728eb732a8678d4782fcf45a">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.CreateImage</a></div><div class="ttdeci">def CreateImage(self, LogIntensity=False, MinExponentLogIntensity=-6., MaxExponentLogIntensity=0, NumUI=1, Saturation=20., InvertImage=True, Color='#ffffff', AnnotationColor='#000000', ScaleX=100., ScaleY=100.)</div><div class="ttdoc">Creates the image (picture) from the raw bitmap and the annotation bit map.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l01336">EyeDiagramBitmap.py:1336</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml">SignalIntegrity.Lib.ResultsCache.ResultsCache</a></div><div class="ttdoc">base class for results caching</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00031">ResultsCache.py:31</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_abf3d39d22f11766f437fdee4614fc027"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#abf3d39d22f11766f437fdee4614fc027">SignalIntegrity.Lib.ResultsCache.ResultsCache.CacheResult</a></div><div class="ttdeci">def CacheResult(self, keeperList=None)</div><div class="ttdoc">Caches a calculated result.</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00099">ResultsCache.py:99</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a5db08daebd8dabc118d853ac16330ecb"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a5db08daebd8dabc118d853ac16330ecb">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.rawBitmap</a></div><div class="ttdeci">rawBitmap</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00192">EyeDiagramBitmap.py:192</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a43a8b76b19ac3946f4a6c4df1a736eed"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a43a8b76b19ac3946f4a6c4df1a736eed">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.Annotations</a></div><div class="ttdeci">def Annotations(self, MeanLevels=True, LevelExtents=True, EyeWidth=True, EyeHeight=True, Contours=True, WhichContours='Eye' # 'Eye' or 'All')</div><div class="ttdoc">Generates an annotation bitmap that goes along with the raw bitmap containing annotation marks.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l01201">EyeDiagramBitmap.py:1201</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_aca2c4e71bf2d54413a2b37acec2dffcc"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aca2c4e71bf2d54413a2b37acec2dffcc">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.YMax</a></div><div class="ttdeci">YMax</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00174">EyeDiagramBitmap.py:174</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a85a9afbd31ccc14de237f8149f99f6e8"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a85a9afbd31ccc14de237f8149f99f6e8">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.AutoAlign</a></div><div class="ttdeci">def AutoAlign(self, BERForAlignment=-3, AlignmentMode='Horizontal', HorizontalAlignment='Middle', VerticalAlignment='MaxMin')</div><div class="ttdoc">Automatically align the eye diagram.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00392">EyeDiagramBitmap.py:392</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a409fede69bfb7cd95c08ed90ddecd1a5"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a409fede69bfb7cd95c08ed90ddecd1a5">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.OpticalMeasure</a></div><div class="ttdeci">def OpticalMeasure(self, WaveformType='W', PinW=None)</div><div class="ttdoc">Computes optical measurements on the eye diagram.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00804">EyeDiagramBitmap.py:804</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_aabce8a96c4b34d6d89974119cd19a083"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aabce8a96c4b34d6d89974119cd19a083">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.sampledWf</a></div><div class="ttdeci">sampledWf</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00252">EyeDiagramBitmap.py:252</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_aca020d6bf17e9ab0b799b5543c2cb201"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aca020d6bf17e9ab0b799b5543c2cb201">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.Measure</a></div><div class="ttdeci">def Measure(self, BERForMeasure=-6, DecisionMode='Mid', WaveformType='V')</div><div class="ttdoc">Computes measurements on the eye diagram.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00587">EyeDiagramBitmap.py:587</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_abbff9baa971a0d19bd2b34dbf24d0559"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#abbff9baa971a0d19bd2b34dbf24d0559">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.minV</a></div><div class="ttdeci">minV</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00214">EyeDiagramBitmap.py:214</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform.Waveform.Waveform</a></div><div class="ttdoc">base class for all waveforms</div><div class="ttdef"><b>Definition:</b> <a href="Waveform_8py_source.xhtml#l00035">Waveform.py:35</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache_xhtml_acaed8551afefa9ad488b67b7a9a8ed40"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1ResultsCache_1_1ResultsCache.xhtml#acaed8551afefa9ad488b67b7a9a8ed40">SignalIntegrity.Lib.ResultsCache.ResultsCache.CheckCache</a></div><div class="ttdeci">def CheckCache(self)</div><div class="ttdoc">Called to see if the cache has results that can be used instead of processing the result.</div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00059">ResultsCache.py:59</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_aededcf789248079b119fb0daa6b0ccdf"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aededcf789248079b119fb0daa6b0ccdf">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.prbswf</a></div><div class="ttdeci">prbswf</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00179">EyeDiagramBitmap.py:179</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_aa831315374a492602366faa359d393d7"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aa831315374a492602366faa359d393d7">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.RowsSpecified</a></div><div class="ttdeci">RowsSpecified</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00176">EyeDiagramBitmap.py:176</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1CallBacker_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1CallBacker.xhtml">SignalIntegrity.Lib.CallBacker</a></div><div class="ttdef"><b>Definition:</b> <a href="CallBacker_8py_source.xhtml#l00001">CallBacker.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_aee6d6ef03843eaf236413153e66bd92f"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#aee6d6ef03843eaf236413153e66bd92f">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.YAxisMode</a></div><div class="ttdeci">YAxisMode</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00173">EyeDiagramBitmap.py:173</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a3dfeb7f58bf7781c08e0e24f3b19f8c5"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a3dfeb7f58bf7781c08e0e24f3b19f8c5">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.BitmapLog</a></div><div class="ttdeci">BitmapLog</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00185">EyeDiagramBitmap.py:185</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_ad66b8ac260dc454871a64821e28df529"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#ad66b8ac260dc454871a64821e28df529">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.EnhancementSteps</a></div><div class="ttdeci">EnhancementSteps</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00181">EyeDiagramBitmap.py:181</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a8388d249b60bce6843e31357121c36d4"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a8388d249b60bce6843e31357121c36d4">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.__init__</a></div><div class="ttdeci">def __init__(self, callback=None, cacheFileName=None, YAxisMode='Auto', YMax=None, YMin=None, Rows=None, Cols=None, BaudRate=None, prbswf=None, EnhancementMode='Auto', EnhancementSteps=10, BitsPerSymbol=1)</div><div class="ttdoc">Constructor Attempts to generate an eye diagram bitmap from the definition provided.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00172">EyeDiagramBitmap.py:172</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1CallBacker_1_1CallBacker_xhtml_ad1aebee41f7b067b9fc11c28f87b27ba"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1CallBacker_1_1CallBacker.xhtml#ad1aebee41f7b067b9fc11c28f87b27ba">SignalIntegrity.Lib.CallBacker.CallBacker.CallBack</a></div><div class="ttdeci">def CallBack(self, progressPercent)</div><div class="ttdoc">This function is called periodically, which in turn calls any installed callback function.</div><div class="ttdef"><b>Definition:</b> <a href="CallBacker_8py_source.xhtml#l00065">CallBacker.py:65</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1ResultsCache_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1ResultsCache.xhtml">SignalIntegrity.Lib.ResultsCache</a></div><div class="ttdef"><b>Definition:</b> <a href="ResultsCache_8py_source.xhtml#l00001">ResultsCache.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml_a97fc924689bb3b6243ac2fd901d7d642"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml#a97fc924689bb3b6243ac2fd901d7d642">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap.ApplyJitterNoise</a></div><div class="ttdeci">def ApplyJitterNoise(self, NoiseSigma=0., JitterSigma=0., DeterministicJitter=0., MaxPixelsKernel=100000)</div><div class="ttdoc">Applies jitter and/or noise to the eye diagram bitmap.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00299">EyeDiagramBitmap.py:299</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Rat_1_1Rat_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Rat_1_1Rat.xhtml">SignalIntegrity.Lib.Rat.Rat</a></div><div class="ttdef"><b>Definition:</b> <a href="Rat_8py_source.xhtml#l00001">Rat.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Eye_1_1EyeDiagramBitmap_1_1EyeDiagramBitmap.xhtml">SignalIntegrity.Lib.Eye.EyeDiagramBitmap.EyeDiagramBitmap</a></div><div class="ttdoc">Generates the eye diagram bitmap and many associated measurements from it.</div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramBitmap_8py_source.xhtml#l00099">EyeDiagramBitmap.py:99</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
