<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Parsers/NetworkAnalyzerSimulationNumericParser.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.15</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_527c090b61d38d7ca12ceea3c3f5cd9f.xhtml">Parsers</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NetworkAnalyzerSimulationNumericParser.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">transfer matrix generation from network analyzer model netlists</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1SimulatorNumericParser_1_1SimulatorNumericParser.xhtml">SignalIntegrity.Lib.Parsers.SimulatorNumericParser</a> <span class="keyword">import</span> SimulatorNumericParser</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Exception.xhtml">SignalIntegrity.Lib.Exception</a> <span class="keyword">import</span> SignalIntegrityExceptionNetworkAnalyzer</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SignalIntegrity.Lib.SParameters.SParameters</a> <span class="keyword">import</span> SParameters</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml">NetworkAnalyzerSimulationNumericParser</a>(<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1SimulatorNumericParser_1_1SimulatorNumericParser.xhtml">SimulatorNumericParser</a>):</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;performs numeric simulations from netlists&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a942a8dae3fea872cf36bf2679cc438e8">__init__</a>(self, f=None, DUTSParameters=None, PortConnectionList=None ,args=None,  callback=None, cacheFileName=None):</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;constructor  </span></div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml">   29</a></span>&#160;<span class="stringliteral">        frequencies may be provided at construction time (or not for symbolic solutions).</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral">        @param f (optional) list of frequencies</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="stringliteral">        @param DUTSParameters (optional) instance of class SParameters containing the DUT.</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="stringliteral">        If None is supplied, the file already in the schematic will be used, otherwise these</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral">        will replace the DUT s-parameters.</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">        @param PortConnectionList (optional) list of True or False for each port in the</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">        network analyzer indicating a DUT port connection.  If None is supplied, then all</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">        network analyzer ports are used.</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">        @param args (optional) string arguments for the circuit.</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">        @param callback (optional) function taking one argument as a callback</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">        @param cacheFileName (optional) string name of file used to cache results</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral">        Arguments are provided on a line as pairs of names and values separated by a space.</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="stringliteral">        The optional callback is used as described in the class CallBacker.</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="stringliteral">        The use of the cacheFileName is described in the class LineCache</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>=PortConnectionList</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">DutSParameters</a>=<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SParameters</a>(DUTSParameters.m_f,DUTSParameters.m_d)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        SimulatorNumericParser.__init__(self,f,args,callback,cacheFileName)</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a942a8dae3fea872cf36bf2679cc438e8">   51</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">HashValue</a>(self,stuffToHash=&#39;&#39;):</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Generates the hash for a definition  </span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="stringliteral">        It is formed by hashing the port connection with whatever else is hashed</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="stringliteral">        @param stuffToHash repr of stuff to hash</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="stringliteral">        @remark derived classes should override this method and call the base class HashValue with their stuff added</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="stringliteral">        @return integer hash value</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        <span class="keywordflow">return</span> SimulatorNumericParser.HashValue(self,repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1ParserArgs_1_1ParserArgs.xhtml#a5cc9c2eb05c53ffe2051963964fc1945">m_args</a>)+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">DutSParameters</a>.Text())+repr(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>)+stuffToHash)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">def </span>ArrangeSimulation(self):</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1LineSplitter.xhtml">SignalIntegrity.Lib.Helpers.LineSplitter</a> <span class="keyword">import</span> LineSplitter</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a733121de6808c2d0bf09a1fb7ef1be30">simulationType</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">   62</a></span>&#160;        naPortDictList=[]</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        outputDict={}</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        otherSourceList=[]</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        dutList=[]</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        newNetList=[]</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        dutFound=<span class="keyword">False</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#ad92a05bc1289cfd9cb3065aa6371e8fb">m_lines</a>:</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            tokens=LineSplitter(line)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;            <span class="keywordflow">if</span> tokens[0] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;voltagesource&#39;</span>,<span class="stringliteral">&#39;networkanalyzerport&#39;</span>]:</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                isNetworkAnalyzerPort=<span class="keyword">False</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordflow">if</span> len(tokens)&gt;3:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                    sourceDict={<span class="stringliteral">&#39;ref&#39;</span>:tokens[1],<span class="stringliteral">&#39;port&#39;</span>:tokens[2],<span class="stringliteral">&#39;line&#39;</span>:line}</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                    <span class="keywordflow">for</span> tokenIndex <span class="keywordflow">in</span> range(3,len(tokens),2):</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                        sourceDict[tokens[tokenIndex]]=tokens[tokenIndex+1]</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    <span class="keywordflow">if</span> tokens[0]:</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                        naPortDictList.append(sourceDict)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                        isNetworkAnalyzerPort=<span class="keyword">True</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> isNetworkAnalyzerPort:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    otherSourceList.append(line)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">elif</span> tokens[0]==<span class="stringliteral">&#39;currentsource&#39;</span>:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                otherSourceList.append(line)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">elif</span> tokens[0]==<span class="stringliteral">&#39;device&#39;</span>:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">if</span> len(tokens)&gt;=3:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    <span class="keywordflow">if</span> tokens[3]==<span class="stringliteral">&#39;dut&#39;</span>:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                        <span class="keywordflow">if</span> dutFound:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                            <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;multiple DUTs found&#39;</span>)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                        dutFound=<span class="keyword">True</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">DutSParameters</a> == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a23e6017bb056a3c9c4e008ae01f25bfa">dutknown</a>={}</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                            newNetList.append(line)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>=int(tokens[2])</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a> == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a> = [<span class="keyword">True</span> <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>)]</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a> != [<span class="keyword">True</span> <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>)]:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;port connection list inconsistent with DUT&#39;</span>)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">DutSParameters</a>.m_P</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a> == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a> = [<span class="keyword">True</span> <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>)]</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                            schematicDutPorts=int(tokens[2])</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                            <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>.count(<span class="keyword">True</span>) != self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>:</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                                <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;port connection list inconsistent with DUT&#39;</span>)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                            <span class="keywordflow">if</span> schematicDutPorts &lt; self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                                <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;DUT ports supplied (&#39;</span>+str(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>)+<span class="stringliteral">&#39;) are too large for the DUT, which has &#39;</span>+str(schematicDutPorts)+<span class="stringliteral">&#39; ports&#39;</span>)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                            <span class="keywordflow">elif</span> schematicDutPorts &gt; self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">simulationNumPorts</a>:</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                                <span class="comment"># DUT s-parameters supplied to the schematic need to be adjusted based on</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                                <span class="comment"># the actual s-parameters supplied and their connection</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                                <span class="keyword">from</span> numpy <span class="keyword">import</span> identity</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                                data=[identity(schematicDutPorts).tolist() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">DutSParameters</a>))]</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                                dutmap=[]</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                                <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>)):</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                                    <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>[p]:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                                        dutmap.append(p)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                                <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(data)):</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                                    <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(dutmap)):</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                                        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(dutmap)):</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                                            data[n][dutmap[r]][dutmap[c]]=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">DutSParameters</a>[n][r][c]</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a23e6017bb056a3c9c4e008ae01f25bfa">dutknown</a>={<span class="stringliteral">&#39; &#39;</span>.join(tokens[2:4]):<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SParameters</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">DutSParameters</a>.m_f,data)}</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a23e6017bb056a3c9c4e008ae01f25bfa">dutknown</a>={<span class="stringliteral">&#39; &#39;</span>.join(tokens[2:4]):self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">DutSParameters</a>}</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                            newNetList.append(<span class="stringliteral">&#39; &#39;</span>.join(tokens[0:4]))</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                    <span class="keywordflow">else</span>: newNetList.append(line)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">else</span>: newNetList.append(line)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">elif</span> tokens[0]==<span class="stringliteral">&#39;voltageoutput&#39;</span>:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keywordflow">for</span> tokenIndex <span class="keywordflow">in</span> range(1,len(tokens),3):</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    outputDict[tokens[tokenIndex]]={<span class="stringliteral">&#39;ref&#39;</span>:tokens[tokenIndex+1],<span class="stringliteral">&#39;port&#39;</span>:tokens[tokenIndex+2]}</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">elif</span> tokens[0]==<span class="stringliteral">&#39;output&#39;</span>:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">pass</span> <span class="comment"># remove unnamed outputs from the netlist</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                newNetList.append(line)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment"># at this point, we have:</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="comment"># a new netlist with all sources and outputs removed and the file (if any) stripped from the DUT</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment"># we have a list of dictionaries for all network analyzer ports and we have a list of dictionaries</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment"># for all of the named outputs (we don&#39;t know which ones we will keep yet).</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment"># we also have a list of other sources, that we will put back later, along with the outputs we want</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment"># to keep.</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="comment">#</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment"># determine the simulation type</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> dutFound:</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;no DUT found&#39;</span>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="keywordflow">if</span> len(naPortDictList)==0:</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;no network analyzer ports found&#39;</span>)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        simulationTypesFound=[]</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        simulationPortsFound=[]</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        <span class="keywordflow">for</span> naPortDict <span class="keywordflow">in</span> naPortDictList:</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> <span class="stringliteral">&#39;pn&#39;</span> <span class="keywordflow">in</span> naPortDict:</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;a network analyzer port has no port number&#39;</span>)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                simulationPortsFound.append(int(naPortDict[<span class="stringliteral">&#39;pn&#39;</span>]))</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> <span class="stringliteral">&#39;st&#39;</span> <span class="keywordflow">in</span> naPortDict:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;a network analyzer port has no type specified&#39;</span>)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> naPortDict[<span class="stringliteral">&#39;st&#39;</span>] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;CW&#39;</span>,<span class="stringliteral">&#39;TDRStep&#39;</span>,<span class="stringliteral">&#39;TDRImpulse&#39;</span>]:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;network analyzer port type not recognized: &#39;</span>+naPortDict[<span class="stringliteral">&#39;st&#39;</span>])</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> naPortDict[<span class="stringliteral">&#39;st&#39;</span>] <span class="keywordflow">in</span> simulationTypesFound:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                simulationTypesFound.append(naPortDict[<span class="stringliteral">&#39;st&#39;</span>])</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">if</span> len(simulationTypesFound)&gt;1:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;multiple network analyzer port types found&#39;</span>)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a733121de6808c2d0bf09a1fb7ef1be30">simulationType</a>=simulationTypesFound[0]</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">if</span> sorted(simulationPortsFound) != [i <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(1,len(simulationPortsFound)+1)]:</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;incorrect port number assignment&#39;</span>)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <span class="keywordflow">if</span> len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>) != len(simulationPortsFound):</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;DUT ports do not match network analyzer ports&#39;</span>)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="comment">#</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="comment"># at this point, we know the simulation type and the number of ports</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment">#</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment"># append the output lines</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a733121de6808c2d0bf09a1fb7ef1be30">simulationType</a> == <span class="stringliteral">&#39;CW&#39;</span>:</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>)):</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                name=<span class="stringliteral">&#39;A&#39;</span>+str(p+1)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> name <span class="keywordflow">in</span> outputDict:</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;missing network analyzer output: &#39;</span>+name)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>[p]:</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                        newNetList.append(<span class="stringliteral">&#39;voltageoutput &#39;</span>+name+<span class="stringliteral">&#39; &#39;</span>+outputDict[name][<span class="stringliteral">&#39;ref&#39;</span>]+<span class="stringliteral">&#39; &#39;</span>+outputDict[name][<span class="stringliteral">&#39;port&#39;</span>])</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>)):</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                name=<span class="stringliteral">&#39;B&#39;</span>+str(p+1)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> name <span class="keywordflow">in</span> outputDict:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                    <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;missing network analyzer output: &#39;</span>+name)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                    <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>[p]:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                        newNetList.append(<span class="stringliteral">&#39;voltageoutput &#39;</span>+name+<span class="stringliteral">&#39; &#39;</span>+outputDict[name][<span class="stringliteral">&#39;ref&#39;</span>]+<span class="stringliteral">&#39; &#39;</span>+outputDict[name][<span class="stringliteral">&#39;port&#39;</span>])</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160; </div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>)):</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                name=<span class="stringliteral">&#39;V&#39;</span>+str(p+1)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> name <span class="keywordflow">in</span> outputDict:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keywordflow">raise</span> SignalIntegrityExceptionNetworkAnalyzer(<span class="stringliteral">&#39;missing network analyzer output: &#39;</span>+name)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                    <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>[p]:</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        newNetList.append(<span class="stringliteral">&#39;voltageoutput &#39;</span>+name+<span class="stringliteral">&#39; &#39;</span>+outputDict[name][<span class="stringliteral">&#39;ref&#39;</span>]+<span class="stringliteral">&#39; &#39;</span>+outputDict[name][<span class="stringliteral">&#39;port&#39;</span>])</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="comment"># append the network analyzer sources in port order followed by the remaining ones.</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>)):</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            portStr=str(p+1)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">for</span> naPortDict <span class="keywordflow">in</span> naPortDictList:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">if</span> naPortDict[<span class="stringliteral">&#39;pn&#39;</span>]==portStr:</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">PortConnectionList</a>[p]:</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        newNetList.append(<span class="stringliteral">&#39; &#39;</span>.join(LineSplitter(naPortDict[<span class="stringliteral">&#39;line&#39;</span>])[0:3]))</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                        newNetList.append(<span class="stringliteral">&#39;device &#39;</span>+naPortDict[<span class="stringliteral">&#39;ref&#39;</span>]+<span class="stringliteral">&#39; &#39;</span>+naPortDict[<span class="stringliteral">&#39;port&#39;</span>]+<span class="stringliteral">&#39; ground&#39;</span>)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        newNetList.extend(otherSourceList)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#ad92a05bc1289cfd9cb3065aa6371e8fb">m_lines</a>=newNetList</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1SystemDescriptionParser_1_1SystemDescriptionParser.xhtml#a3eaad5707af3e7b0e3cc5495bc8b404d">AddKnownDevices</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a23e6017bb056a3c9c4e008ae01f25bfa">dutknown</a>)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a836e87421e9e21a6676da06625b644b1">TransferMatrices</a>(self):</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Calculates transfer matrices for simulation  </span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="stringliteral">        Simulation, insofar as this class is concerned means generating transfer matrices for</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="stringliteral">        processing waveforms with.</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="stringliteral">        @return instance of class TransferMatrices</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="stringliteral">        @remark TransferMatrices are used with a TransferMatricesProcessor to process waveforms for</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="stringliteral">        simulation.</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a65fe7015d3fb57a10910844fbef34001">ArrangeSimulation</a>()</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1TransferMatrices_1_1TransferMatrices.xhtml">SimulatorNumericParser.TransferMatrices</a>(self)</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a1beb258f006e7d30f1376fc36fcd9fba"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a1beb258f006e7d30f1376fc36fcd9fba">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.PortConnectionList</a></div><div class="ttdeci">PortConnectionList</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00052">NetworkAnalyzerSimulationNumericParser.py:52</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser</a></div><div class="ttdoc">performs numeric simulations from netlists</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00029">NetworkAnalyzerSimulationNumericParser.py:29</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1ParserArgs_1_1ParserArgs_xhtml_a5cc9c2eb05c53ffe2051963964fc1945"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1ParserArgs_1_1ParserArgs.xhtml#a5cc9c2eb05c53ffe2051963964fc1945">SignalIntegrity.Lib.Parsers.ParserArgs.ParserArgs.m_args</a></div><div class="ttdeci">m_args</div><div class="ttdef"><b>Definition:</b> <a href="ParserArgs_8py_source.xhtml#l00028">ParserArgs.py:28</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1LineSplitter_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1LineSplitter.xhtml">SignalIntegrity.Lib.Helpers.LineSplitter</a></div><div class="ttdef"><b>Definition:</b> <a href="LineSplitter_8py_source.xhtml#l00001">LineSplitter.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a836e87421e9e21a6676da06625b644b1"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a836e87421e9e21a6676da06625b644b1">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.TransferMatrices</a></div><div class="ttdeci">def TransferMatrices(self)</div><div class="ttdoc">Calculates transfer matrices for simulation   Simulation, insofar as this class is concerned means ge...</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00218">NetworkAnalyzerSimulationNumericParser.py:218</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a23e6017bb056a3c9c4e008ae01f25bfa"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a23e6017bb056a3c9c4e008ae01f25bfa">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.dutknown</a></div><div class="ttdeci">dutknown</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00095">NetworkAnalyzerSimulationNumericParser.py:95</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a65fe7015d3fb57a10910844fbef34001"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a65fe7015d3fb57a10910844fbef34001">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.ArrangeSimulation</a></div><div class="ttdeci">def ArrangeSimulation(self)</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00064">NetworkAnalyzerSimulationNumericParser.py:64</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SignalIntegrity.Lib.SParameters.SParameters.SParameters</a></div><div class="ttdoc">Class containing s-parameters.</div><div class="ttdef"><b>Definition:</b> <a href="SParameters_8py_source.xhtml#l00040">SParameters.py:40</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a733121de6808c2d0bf09a1fb7ef1be30"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a733121de6808c2d0bf09a1fb7ef1be30">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.simulationType</a></div><div class="ttdeci">simulationType</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00066">NetworkAnalyzerSimulationNumericParser.py:66</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1TransferMatrices_1_1TransferMatrices_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1TransferMatrices_1_1TransferMatrices.xhtml">SignalIntegrity.Lib.FrequencyDomain.TransferMatrices.TransferMatrices</a></div><div class="ttdoc">Class that is used for processing waveforms in simulation.</div><div class="ttdef"><b>Definition:</b> <a href="TransferMatrices_8py_source.xhtml#l00028">TransferMatrices.py:28</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a5ead5cf1fbb767c3ef67b6acf3b0bce3"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a5ead5cf1fbb767c3ef67b6acf3b0bce3">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.HashValue</a></div><div class="ttdeci">def HashValue(self, stuffToHash='')</div><div class="ttdoc">Generates the hash for a definition   It is formed by hashing the port connection with whatever else ...</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00062">NetworkAnalyzerSimulationNumericParser.py:62</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a942a8dae3fea872cf36bf2679cc438e8"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a942a8dae3fea872cf36bf2679cc438e8">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.__init__</a></div><div class="ttdeci">def __init__(self, f=None, DUTSParameters=None, PortConnectionList=None, args=None, callback=None, cacheFileName=None)</div><div class="ttdoc">constructor   frequencies may be provided at construction time (or not for symbolic solutions).</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00051">NetworkAnalyzerSimulationNumericParser.py:51</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1SimulatorNumericParser_1_1SimulatorNumericParser_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1SimulatorNumericParser_1_1SimulatorNumericParser.xhtml">SignalIntegrity.Lib.Parsers.SimulatorNumericParser.SimulatorNumericParser</a></div><div class="ttdoc">performs numeric simulations from netlists</div><div class="ttdef"><b>Definition:</b> <a href="SimulatorNumericParser_8py_source.xhtml#l00032">SimulatorNumericParser.py:32</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Exception_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Exception.xhtml">SignalIntegrity.Lib.Exception</a></div><div class="ttdef"><b>Definition:</b> <a href="Exception_8py_source.xhtml#l00001">Exception.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_ad92a05bc1289cfd9cb3065aa6371e8fb"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#ad92a05bc1289cfd9cb3065aa6371e8fb">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.m_lines</a></div><div class="ttdeci">m_lines</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00208">NetworkAnalyzerSimulationNumericParser.py:208</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1SystemDescriptionParser_1_1SystemDescriptionParser_xhtml_a3eaad5707af3e7b0e3cc5495bc8b404d"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1SystemDescriptionParser_1_1SystemDescriptionParser.xhtml#a3eaad5707af3e7b0e3cc5495bc8b404d">SignalIntegrity.Lib.Parsers.SystemDescriptionParser.SystemDescriptionParser.AddKnownDevices</a></div><div class="ttdeci">def AddKnownDevices(self, known)</div><div class="ttdoc">adds a dictionary of known devices</div><div class="ttdef"><b>Definition:</b> <a href="SystemDescriptionParser_8py_source.xhtml#l00064">SystemDescriptionParser.py:64</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a08d931fb563469a635fd65f4b06d0b99"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a08d931fb563469a635fd65f4b06d0b99">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.simulationNumPorts</a></div><div class="ttdeci">simulationNumPorts</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00097">NetworkAnalyzerSimulationNumericParser.py:97</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser_xhtml_a7864b9e6d1b327fcdfe87f31545408e6"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Parsers_1_1NetworkAnalyzerSimulationNumericParser_1_1NetworkAnalyzerSimulationNumericParser.xhtml#a7864b9e6d1b327fcdfe87f31545408e6">SignalIntegrity.Lib.Parsers.NetworkAnalyzerSimulationNumericParser.NetworkAnalyzerSimulationNumericParser.DutSParameters</a></div><div class="ttdeci">DutSParameters</div><div class="ttdef"><b>Definition:</b> <a href="NetworkAnalyzerSimulationNumericParser_8py_source.xhtml#l00053">NetworkAnalyzerSimulationNumericParser.py:53</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
