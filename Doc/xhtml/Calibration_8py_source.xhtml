<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Measurement/Calibration/Calibration.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.4.1</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_64597e4b29af68bffc48ff23d2e6147e.xhtml">Measurement</a></li><li class="navelem"><a class="el" href="dir_dcfb6f296b70e457fa328c698135798b.xhtml">Calibration</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Calibration.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">Calibration</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2021 Nubis Communications, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># Copyright (c) 2018-2020 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms</a> <span class="keyword">import</span> ErrorTerms</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SignalIntegrity.Lib.SParameters.SParameters</a> <span class="keyword">import</span> SParameters</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">from</span> numpy <span class="keyword">import</span> hstack,vstack,array</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyList_1_1FrequencyList.xhtml">SignalIntegrity.Lib.FrequencyDomain.FrequencyList</a> <span class="keyword">import</span> EvenlySpacedFrequencyList</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1SystemSParametersNumeric_1_1SystemSParametersNumeric.xhtml">SignalIntegrity.Lib.SystemDescriptions.SystemSParametersNumeric</a> <span class="keyword">import</span> SystemSParametersNumeric</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1CalibrationMeasurements.xhtml">SignalIntegrity.Lib.Measurement.Calibration.CalibrationMeasurements</a> <span class="keyword">import</span> ThruCalibrationMeasurement</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Devices_1_1Thru.xhtml">SignalIntegrity.Lib.Devices.Thru</a> <span class="keyword">import</span> Thru</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Exception.xhtml">SignalIntegrity.Lib.Exception</a> <span class="keyword">import</span> SignalIntegrityExceptionCalibration</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">import</span> sys</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">import</span> copy</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml">Calibration</a>(object):</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;Generates calibrated s-parameter measurements&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    FillInTransferThru=<span class="keyword">True</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    XtalkErrorTermsOptional=<span class="keyword">True</span></div>
<div class="line"><a name="l00037"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml">   37</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a09488d31cef60d14cb3ebfe3f29b963b">__init__</a>(self,ports,f,calibrationList=[]):</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Constructor</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">        @param ports number of ports in the calibration.</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="stringliteral">        @param f instance of class FrequencyList (or list of frequencies).</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral">        @param calibrationList (optional) list of instances of class CalibrationMeasurement</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral">        @see CalibrationMeasurement</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>=ports</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>=f</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a09488d31cef60d14cb3ebfe3f29b963b">   47</a></span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa13609521a462705a084ede48a53fc27">calibrationMatrix</a>=[[[] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;                                <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af59f1f79c72d4d05439ca44797972ba0">AddMeasurements</a>(calibrationList)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a09d744e748042e2e2403b060e71570a2">InitializeFromFixtures</a>(self,fixtureList):</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;initializes the calibration from list of fixtures</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="stringliteral">        @param fixtureList list of instances of class SParameters</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="stringliteral">        For a given number of ports P, there should be P fixtures in the list</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="stringliteral">        and each fixture should be 2P port s-parameters</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>=len(fixtureList)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>=fixtureList[0].m_f</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa13609521a462705a084ede48a53fc27">calibrationMatrix</a>=[[[] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                                <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00061"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a09d744e748042e2e2403b060e71570a2">   61</a></span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>=[<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">ErrorTerms</a>().<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a09d744e748042e2e2403b060e71570a2">InitializeFromFixtures</a>([fixture[n]</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                <span class="keywordflow">for</span> fixture <span class="keywordflow">in</span> fixtureList]) <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self))]</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aab91ae2e037c39b631a69273c277bfe9">__getitem__</a>(self,item): <span class="keywordflow">return</span> self.ET[item]</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;overloads [item]</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="stringliteral">    @param item integer row of error terms matrix to access</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="stringliteral">    @return a row of the error terms matrix</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="stringliteral">    @remark</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="stringliteral">    This method is used when access the error terms matrix like self[r][c] which</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="stringliteral">    would acess an instance of class ErrorTerms for receive port r and driven port c.</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="stringliteral">    @see ErrorTerms</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a810fdc262754b6d21f5acd0e280d4daf">__len__</a>(self): <span class="keywordflow">return</span> len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;overloads len()</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="stringliteral">    @return the number of rows in the error terms (which is the number of ports).</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ab30a42390f53eabb98739d1a20ed06e2">Fixtures</a>(self,pl=None):</div>
<div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aab91ae2e037c39b631a69273c277bfe9">   78</a></span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Fixtures</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="stringliteral">        @return the error terms as fixtures</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="stringliteral">        @param pl (optional) list of zero based port numbers of the DUT</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="stringliteral">        @remark If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a810fdc262754b6d21f5acd0e280d4daf">   83</a></span>&#160;<span class="stringliteral">        number of ports in the calibration, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">CalculateErrorTerms</a>()</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> pl <span class="keywordflow">is</span> <span class="keywordtype">None</span>: pl = [p <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        ports=len(pl)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> [<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SParameters</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>,[</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                vstack((hstack((array(self[n].Fixture(p,pl)[0][0]),</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                                array(self[n].Fixture(p,pl)[0][1]))),</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                        hstack((array(self[n].Fixture(p,pl)[1][0]),</div>
<div class="line"><a name="l00092"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ab30a42390f53eabb98739d1a20ed06e2">   92</a></span>&#160;                                array(self[n].Fixture(p,pl)[1][1]))))).tolist()</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                    <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self))]) <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(ports)]</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af7c9e9bd678f492f140e80cabc04b14b">WriteFixturesToFiles</a>(self,filename,pl=None):</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Writes the error terms to a files in the form of fixtures</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="stringliteral">        @param filename prefix of the files to write the error terms to.</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="stringliteral">        @param pl (optional) list of zero based port numbers of the DUT</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="stringliteral">        For a P port calibration, this writes P s-parameter files where each</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="stringliteral">        file is a 2P port fixture file.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="stringliteral">        @remark If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="stringliteral">        number of ports in the calibration, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">CalculateErrorTerms</a>()</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="keywordflow">if</span> pl <span class="keywordflow">is</span> <span class="keywordtype">None</span>: pl = [p <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        ports=len(pl)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        Fixture=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ab30a42390f53eabb98739d1a20ed06e2">Fixtures</a>(pl)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(ports):</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            Fixture[p].<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af7ffad83587c0aa8c9b54a7695e10373">WriteToFile</a>(filename+str(p+1))</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af7ffad83587c0aa8c9b54a7695e10373">WriteToFile</a>(self,filename,pl=None):</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af7c9e9bd678f492f140e80cabc04b14b">  113</a></span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Writes the error terms to a file in LeCroy format</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="stringliteral">        @param filename name of file to write the error terms to</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="stringliteral">        @param pl (optional) list of zero based port numbers of the DUT.</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="stringliteral">        The LeCroy format is for each row, for each column, for each error-term,</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="stringliteral">        for each frequency point, the error term is written on a line as the real and imaginary part.</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="stringliteral">        the first line of the file contains three numbers, the number of ports, the number of frequency</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="stringliteral">        points (-1) and the end frequency.</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="stringliteral">        @remark If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="stringliteral">        number of ports in the calibration, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">CalculateErrorTerms</a>()</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span> pl <span class="keywordflow">is</span> <span class="keywordtype">None</span>: pl = [p <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        ports=len(pl)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        lines=[]</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        numPoints=len(self)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        endFrequency=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>[-1]</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        lines.append(str(ports)+<span class="stringliteral">&#39; &#39;</span>+str(numPoints-1)+<span class="stringliteral">&#39; &#39;</span>+str(endFrequency)+<span class="stringliteral">&#39;\n&#39;</span>)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(ports):</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(ports):</div>
<div class="line"><a name="l00133"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af7ffad83587c0aa8c9b54a7695e10373">  133</a></span>&#160;                <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(3):</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                    <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(numPoints):</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                        et=self[n].ET[pl[r]][pl[c]][t]</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                        lines.append(<span class="stringliteral">&#39;%15.10e &#39;</span> % et.real + <span class="stringliteral">&#39;%15.10e\n&#39;</span> % et.imag)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keyword">with</span> open(filename,<span class="stringliteral">&#39;w&#39;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            f.writelines(lines)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a5666ba65921857737c2e2ff28b5192d5">ReadFromFile</a>(self,filename,callback=None,**kwargs):</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Reads the error terms to a file in LeCroy format</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="stringliteral">        @param filename name of file to read the error terms from</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="stringliteral">        @param callback function ptr (optional, defaults to None) callback function.</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="stringliteral">        @param **kwargs dict (optional, defaults to {}) dictionary of arguments for the file</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="stringliteral">        The callback function is used to pass down into s-parameter files that are actually</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="stringliteral">        SignalIntegrity projects so that progress can be tracked and the UI thread can be kept</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="stringliteral">        updated.  The callback function should have a signature like Callback(self,number,name=None),</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="stringliteral">        where the number is the progress in percent and the name is the name of the file being processed.  </span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="stringliteral">        The LeCroy format is for each row, for each column, for each error-term,</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="stringliteral">        for each frequency point, the error term is written on a line as the real and imaginary part.</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;<span class="stringliteral">        the first line of the file contains three numbers, the number of ports, the number of frequency</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="stringliteral">        points (-1) and the end frequency.</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        ext=str.lower(filename).split(<span class="stringliteral">&#39;.&#39;</span>)[-1]</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">if</span> ext == <span class="stringliteral">&#39;si&#39;</span>:</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a> <span class="keyword">import</span> ProjectCalibration</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            calibration=ProjectCalibration(filename,callback,**kwargs)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> calibration <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>=calibration.ports</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>=calibration.f</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa13609521a462705a084ede48a53fc27">calibrationMatrix</a>=calibration.calibrationMatrix</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>=calibration.ET</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00167"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a5666ba65921857737c2e2ff28b5192d5">  167</a></span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                <span class="keywordflow">raise</span> SignalIntegrityExceptionCalibration(<span class="stringliteral">&#39;error terms could not be produced by &#39;</span>+filename)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keyword">with</span> open(filename,<span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                lines=f.readlines()</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            tokens=lines[0].split(<span class="stringliteral">&#39; &#39;</span>)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>=int(tokens[0])</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;            numPoints=int(tokens[1])</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            endFrequency=float(tokens[2])</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>=<a class="code" href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyList_1_1EvenlySpacedFrequencyList.xhtml">EvenlySpacedFrequencyList</a>(endFrequency,numPoints)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa13609521a462705a084ede48a53fc27">calibrationMatrix</a>=[[[] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                                    <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>=[<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">ErrorTerms</a>().Initialize(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>) <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(numPoints+1)]</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            lineIndex=1</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                    <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(3):</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(numPoints+1):</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                            lineStrings=lines[lineIndex].split(<span class="stringliteral">&#39; &#39;</span>)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                            lineIndex=lineIndex+1</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                            self[n].ET[r][c][t]=float(lineStrings[0])+1j*float(lineStrings[1])</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af59f1f79c72d4d05439ca44797972ba0">AddMeasurements</a>(self,calibrationList=[]):</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Adds calibration measurements</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="stringliteral">        @param calibrationList list of instances of class CalibrationMeasurement.</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordflow">for</span> calibrationMeasurement <span class="keywordflow">in</span> calibrationList:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;            <span class="keywordflow">if</span> calibrationMeasurement.type==<span class="stringliteral">&#39;reflect&#39;</span>:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                portDriven=calibrationMeasurement.port</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                otherPort=portDriven</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa13609521a462705a084ede48a53fc27">calibrationMatrix</a>[otherPort][portDriven].\</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                    append(calibrationMeasurement)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;            <span class="keywordflow">elif</span> (calibrationMeasurement.type==<span class="stringliteral">&#39;thru&#39;</span>) <span class="keywordflow">or</span>\</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                (calibrationMeasurement.type==<span class="stringliteral">&#39;xtalk&#39;</span>) <span class="keywordflow">or</span>\</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                (calibrationMeasurement.type==<span class="stringliteral">&#39;reciprocal&#39;</span>):</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                portDriven=calibrationMeasurement.portDriven</div>
<div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af59f1f79c72d4d05439ca44797972ba0">  204</a></span>&#160;                otherPort=calibrationMeasurement.otherPort</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa13609521a462705a084ede48a53fc27">calibrationMatrix</a>[otherPort][portDriven].\</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    append(calibrationMeasurement)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keyword">def </span>_CalculateReflectErrorTerms(self,measurements):</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;calculates the reflect error terms ED, ER, ES for all ports and frequencies.</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="stringliteral">        @param measurements list of list of calibration measurements where each column corresponds to</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="stringliteral">        a driven port and each row corresponds to a measured port.</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">for</span> port <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            measurementList=measurements[port][port]</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self)):</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                hatGamma=[meas.gamma[n] <span class="keywordflow">for</span> meas <span class="keywordflow">in</span> measurementList]</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                Gamma=[meas.Gamma[n][0][0] <span class="keywordflow">for</span> meas <span class="keywordflow">in</span> measurementList]</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                self[n].ReflectCalibration(hatGamma,Gamma,port)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keyword">def </span>_InitializeXtalkErrorTerms(self):</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;initializes the xtalk error terms to zero to allow for non-calculation.</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a51a05212d3d72c8a4f555a789d50185a">XtalkErrorTermsOptional</a>:</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>)):</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            self[n].InitializeExCalibration()</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">def </span>_CalculateXtalkErrorTerms(self,measurements):</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;calculates the crosstalk error terms EX for all port combinations and frequencies.</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="stringliteral">        @param measurements list of list of calibration measurements where each column corresponds to</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;<span class="stringliteral">        a driven port and each row corresponds to a measured port.</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa326dcd5b8d65f7aa1ac7dcaafa99899">_InitializeXtalkErrorTerms</a>()</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">for</span> other <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            <span class="keywordflow">for</span> driven <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                <span class="keywordflow">if</span> (other != driven):</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    measurementList=measurements[other][driven]</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    xtalkMeasurementList=[]</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                    <span class="keywordflow">for</span> meas <span class="keywordflow">in</span> measurementList:</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                        <span class="keywordflow">if</span> meas.type==<span class="stringliteral">&#39;xtalk&#39;</span>: xtalkMeasurementList.append(meas)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                    <span class="keywordflow">if</span> len(xtalkMeasurementList)!=0:</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>)):</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                            self[n].ExCalibration(</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                xtalkMeasurementList[0].b2a1[n],other,driven)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    <span class="keyword">def </span>_CalculateUnknownThruErrorTerms(self,measurements):</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;calculates the unknown thru standards for each unknown thru measurement.</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="stringliteral">        @param measurements list of list of calibration measurements where each column corresponds to</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="stringliteral">        a driven port and each row corresponds to a measured port.</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;<span class="stringliteral">        @remark measurements is affected by this function and the returned measurements should be used</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="stringliteral">        subsequently.  Unknown thru measurements create thru measurements using the recovered thru standards.</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">for</span> other <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            <span class="keywordflow">for</span> driven <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                <span class="keywordflow">if</span> (other != driven):</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                    <span class="keywordflow">for</span> meas <span class="keywordflow">in</span> measurements[other][driven]:</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                        <span class="keywordflow">if</span> meas.type==<span class="stringliteral">&#39;reciprocal&#39;</span>:</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                            Sestsp= [s <span class="keywordflow">for</span> s <span class="keywordflow">in</span> meas.S] <span class="keywordflow">if</span> <span class="keywordflow">not</span> (meas.S <span class="keywordflow">is</span> <span class="keywordtype">None</span>)\</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                <span class="keywordflow">else</span> [Thru() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>))]</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                            <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>)):</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                Sestsp[n]=self[n].UnknownThruCalibration(</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                    meas.Smeasured[n],</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                                    Sestsp[n] <span class="keywordflow">if</span> <span class="keywordflow">not</span> meas.S <span class="keywordflow">is</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                                    <span class="keywordflow">else</span> Sestsp[max(n-1,0)],driven,other)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                            Sest=<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SParameters</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>,Sestsp)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                            Sest=Sest.LimitImpulseResponseLength(meas.limit)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                            <span class="comment"># pragma: silent exclude</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                            <span class="comment">#Sest.WriteToFile(&#39;RecoveredThru&#39;)</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                            <span class="comment"># pragma: include</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                            measurements[other][driven].append(</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                                <a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1CalibrationMeasurements_1_1ThruCalibrationMeasurement.xhtml">ThruCalibrationMeasurement</a>(</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                                meas.Smeasured.FrequencyResponse(1,1),</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                meas.Smeasured.FrequencyResponse(2,1),</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                Sest,other,driven))</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                            measurements[driven][other].append(</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                <a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1CalibrationMeasurements_1_1ThruCalibrationMeasurement.xhtml">ThruCalibrationMeasurement</a>(</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                meas.Smeasured.FrequencyResponse(2,2),</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                meas.Smeasured.FrequencyResponse(1,2),</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                Sest.PortReorder([1,0]),driven,other))</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">def </span>_CalculateThruErrorTerms(self,measurements):</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;calculates the thru error terms EL and ET for each port combination and frequency.</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="stringliteral">        @param measurements list of list of calibration measurements where each column corresponds to</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="stringliteral">        a driven port and each row corresponds to a measured port.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">for</span> other <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keywordflow">for</span> driven <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>):</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                <span class="keywordflow">if</span> (other != driven):</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                    measurementList=measurements[other][driven]</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    thruMeasurementList=[]</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    <span class="keywordflow">for</span> meas <span class="keywordflow">in</span> measurementList:</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                        <span class="keywordflow">if</span> meas.type==<span class="stringliteral">&#39;thru&#39;</span>: thruMeasurementList.append(meas)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    <span class="keywordflow">if</span> len(thruMeasurementList)!=0:</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>)):</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                            b1a1=[meas.b1a1[n] <span class="keywordflow">for</span> meas <span class="keywordflow">in</span> thruMeasurementList]</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                            b2a1=[meas.b2a1[n] <span class="keywordflow">for</span> meas <span class="keywordflow">in</span> thruMeasurementList]</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                            S=[meas.S[n] <span class="keywordflow">for</span> meas <span class="keywordflow">in</span> thruMeasurementList]</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                            self[n].ThruCalibration(b1a1,b2a1,S,other,driven)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="keyword">def </span>_CalculateTransferThruErrorTerms(self):</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;calculates the transfer thru error terms EL and ET for each port combination and frequency not</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="stringliteral">        already covered by an actual thru calibration.</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="stringliteral">        @param measurements list of list of calibration measurements where each column corresponds to</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="stringliteral">        a driven port and each row corresponds to a measured port.</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        <span class="keywordflow">if</span> Calibration.FillInTransferThru:</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;            <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>)): self[n].TransferThruCalibration()</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">def </span>_CheckErrorTerms(self):</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>)):</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            self[n].CheckErrorTerms()</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">CalculateErrorTerms</a>(self,force=False):</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Calculates the error terms  </span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="stringliteral">        The error terms are calculated in a specific order so that dependencies can be satisfied.  </span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="stringliteral">        The reflect error terms are computed first, then the crosstalk error terms.  The unknown thru</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="stringliteral">        error terms are calculated which need the reflect and crosstalk error terms.  The unknown thru</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="stringliteral">        recovers the thru which is passed to thru error terms calculations (the reason for this is to</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="stringliteral">        allow for multiple thru standards computations).  Finally, the transfer thru error terms are</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="stringliteral">        calculated which depend on the thru error terms.</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="stringliteral">        @param force (optional) boolean whether to force it to calculate the error terms.</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="stringliteral">        @remark If error terms have not been calculated or force, then the error terms are calculated</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="stringliteral">        from instances of CalibrationMeasurement provided during the calibration.&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        <span class="keywordflow">if</span> (<span class="keywordflow">not</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a> <span class="keywordflow">is</span> <span class="keywordtype">None</span>) <span class="keywordflow">and</span> (<span class="keywordflow">not</span> force): <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>=[<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">ErrorTerms</a>().Initialize(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>) <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(len(self))]</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        measurements=copy.deepcopy(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa13609521a462705a084ede48a53fc27">calibrationMatrix</a>)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a0994ac10d9f3241645973950921ff158">_CalculateReflectErrorTerms</a>(measurements)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aff76ffba4ac0f13cf321c90304aa83de">_CalculateXtalkErrorTerms</a>(measurements)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa80b8cc3dd6b50fc958d25106c23da19">_CalculateUnknownThruErrorTerms</a>(measurements)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ad14110f888d70b0dd318565f82f340e9">_CalculateThruErrorTerms</a>(measurements)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af88d06c8bd4802bd4a2a2d88c1a94e31">_CalculateTransferThruErrorTerms</a>()</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aac14ba20e3ac3767b1c38b8b6e3ff535">_CheckErrorTerms</a>()</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aca0ee086164e38edd3ee183565e18278">DutCalculationAlternate</a>(self,sRaw,portList=None,reciprocal=False):</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Alternate Dut Calculation</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="stringliteral">        converts the raw measured s-parameters of the DUT into calibrated s-parameter</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="stringliteral">        measurements.\n</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="stringliteral">        If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="stringliteral">        number of ports in sRaw, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="stringliteral">        @param sRaw instance of class SParameters of the raw measurement of the DUT.</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="stringliteral">        @param portList (optional) list of zero based port numbers of the DUT</span></div>
<div class="line"><a name="l00336"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">  336</a></span>&#160;<span class="stringliteral">        @param reciprocal (optional, defaults to False) whether to enforce reciprocity</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="stringliteral">        @return instance of class SParameters of the calibrated DUT measurement.</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="stringliteral">        @remark if reciprocity is True, the reciprocity is enforced in the calculation</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="stringliteral">        @deprecated This provides a DUT calculation according to the Wittwer method,</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="stringliteral">        but a better,simpler method has been found.</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">CalculateErrorTerms</a>()</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SParameters</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>,[self[n].<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aca0ee086164e38edd3ee183565e18278">DutCalculationAlternate</a>(sRaw[n],portList,reciprocal)</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                   <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self))])</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a2fd29d1d781b8f2e08de3528337c579c">DutCalculation</a>(self,sRaw,portList=None,reciprocal=False):</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;calculates the Dut.\n</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="stringliteral">        converts the raw measured s-parameters of the DUT into calibrated s-parameter</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="stringliteral">        measurements.\n</span></div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="stringliteral">        If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="stringliteral">        number of ports in sRaw, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="stringliteral">        @param sRaw instance of class SParameters of the raw measurement of the DUT.</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="stringliteral">        @param portList (optional) list of zero based port numbers of the DUT</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="stringliteral">        @param reciprocal (optional, defaults to False) whether to enforce reciprocity</span></div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="stringliteral">        @return instance of class SParameters of the calibrated DUT measurement.</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="stringliteral">        @remark if reciprocity is True, the reciprocity is enforced in the calculation</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">CalculateErrorTerms</a>()</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SParameters</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>,[self[n].<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a2fd29d1d781b8f2e08de3528337c579c">DutCalculation</a>(sRaw[n],portList,reciprocal)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                   <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self))])</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a4d3944daa360dac4cb097fcfee541d5b">DutUnCalculationAlternate</a>(self,S,portList=None):</div>
<div class="line"><a name="l00361"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aca0ee086164e38edd3ee183565e18278">  361</a></span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Un-calcualates the DUT.\n</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;<span class="stringliteral">        This calculates the expected raw measured DUT based on the DUT actually calculated.\n</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;<span class="stringliteral">        @see DutCalculation</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="stringliteral">        @param S instance of class SParameters of measured DUT from these error-terms.</span></div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="stringliteral">        @param portList (optional) list of zero based port numbers used for the DUT calcualtion</span></div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="stringliteral">        @return instance of class SParameters of the raw measured s-parameters that calculated this DUT</span></div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="stringliteral">        @remark If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;<span class="stringliteral">        number of ports in sRaw, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;<span class="stringliteral">        @deprecated This method utilizes fixtures and embeds them.  Originally, I could not figure out</span></div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;<span class="stringliteral">        how to do this with just the error-terms.  This was figured out finally and is more efficient, but</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="stringliteral">        this method is retained for comparison of results.</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="stringliteral">        @see DutUnCalculation</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">CalculateErrorTerms</a>()</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="keywordflow">if</span> portList <span class="keywordflow">is</span> <span class="keywordtype">None</span>: portList=[p <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">ports</a>)]</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        ports=len(portList)</div>
<div class="line"><a name="l00377"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a2fd29d1d781b8f2e08de3528337c579c">  377</a></span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        sspn=<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1SystemSParametersNumeric_1_1SystemSParametersNumeric.xhtml">SystemSParametersNumeric</a>()</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        sspn.AddDevice(<span class="stringliteral">&#39;F&#39;</span>,2*ports)</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        sspn.AddDevice(<span class="stringliteral">&#39;D&#39;</span>,ports)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(ports):</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;            sspn.AddPort(<span class="stringliteral">&#39;F&#39;</span>,p+1,p+1)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            sspn.ConnectDevicePort(<span class="stringliteral">&#39;F&#39;</span>,ports+p+1,<span class="stringliteral">&#39;D&#39;</span>,p+1)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160; </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        rd=[<span class="keywordtype">None</span> <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>))]</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        fixtureList=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ab30a42390f53eabb98739d1a20ed06e2">Fixtures</a>(portList)</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>)):</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;            rm=[[<span class="keywordtype">None</span> <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(ports)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(ports)]</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            sspn.AssignSParameters(<span class="stringliteral">&#39;D&#39;</span>,S[n])</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;            <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(ports):</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                sspn.AssignSParameters(<span class="stringliteral">&#39;F&#39;</span>,fixtureList[p][n])</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                spp=sspn.SParameters()</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(ports):</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                    rm[r][p]=spp[r][p]</div>
<div class="line"><a name="l00395"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a4d3944daa360dac4cb097fcfee541d5b">  395</a></span>&#160;            rd[n]=rm</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SParameters</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>,rd)</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a3ba5b62a478aead01d3dd9646a7372a3">DutUnCalculation</a>(self,S,portList=None):</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Un-calcualates the DUT.\n</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="stringliteral">        This calculates the expected raw measured DUT based on the DUT actually calculated.\n</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="stringliteral">        @see DutCalculation</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="stringliteral">        @param S instance of class SParameters of measured DUT from these error-terms.</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="stringliteral">        @param portList (optional) list of zero based port numbers used for the DUT calcualtion</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="stringliteral">        @return instance of class SParameters of the raw measured s-parameters that calculated this DUT</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="stringliteral">        @remark If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="stringliteral">        number of ports in sRaw, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">CalculateErrorTerms</a>()</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SParameters</a>(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">f</a>,[self[n].<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a3ba5b62a478aead01d3dd9646a7372a3">DutUnCalculation</a>(S[n],portList)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                                   <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self))])</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a810fdc262754b6d21f5acd0e280d4daf"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a810fdc262754b6d21f5acd0e280d4daf">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.__len__</a></div><div class="ttdeci">def __len__(self)</div><div class="ttdoc">overloads len()</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00083">Calibration.py:83</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a97348b9e4c449174b1e735563e3a8a9c"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a97348b9e4c449174b1e735563e3a8a9c">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.CalculateErrorTerms</a></div><div class="ttdeci">def CalculateErrorTerms(self, force=False)</div><div class="ttdoc">Calculates the error terms   The error terms are calculated in a specific order so that dependencies ...</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00336">Calibration.py:336</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_af7c9e9bd678f492f140e80cabc04b14b"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af7c9e9bd678f492f140e80cabc04b14b">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.WriteFixturesToFiles</a></div><div class="ttdeci">def WriteFixturesToFiles(self, filename, pl=None)</div><div class="ttdoc">Writes the error terms to a files in the form of fixtures.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00113">Calibration.py:113</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a></div><div class="ttdef"><b>Definition:</b> <a href="SignalIntegrityAppHeadless_8py_source.xhtml#l00001">SignalIntegrityAppHeadless.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1CalibrationMeasurements_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1CalibrationMeasurements.xhtml">SignalIntegrity.Lib.Measurement.Calibration.CalibrationMeasurements</a></div><div class="ttdef"><b>Definition:</b> <a href="CalibrationMeasurements_8py_source.xhtml#l00001">CalibrationMeasurements.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_aab91ae2e037c39b631a69273c277bfe9"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aab91ae2e037c39b631a69273c277bfe9">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.__getitem__</a></div><div class="ttdeci">def __getitem__(self, item)</div><div class="ttdoc">overloads [item]</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00078">Calibration.py:78</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_af7ffad83587c0aa8c9b54a7695e10373"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af7ffad83587c0aa8c9b54a7695e10373">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.WriteToFile</a></div><div class="ttdeci">def WriteToFile(self, filename, pl=None)</div><div class="ttdoc">Writes the error terms to a file in LeCroy format.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00133">Calibration.py:133</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a09d744e748042e2e2403b060e71570a2"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a09d744e748042e2e2403b060e71570a2">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.InitializeFromFixtures</a></div><div class="ttdeci">def InitializeFromFixtures(self, fixtureList)</div><div class="ttdoc">initializes the calibration from list of fixtures</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00061">Calibration.py:61</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_ac5a965d3aaf532842d02995e58c647e0"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ac5a965d3aaf532842d02995e58c647e0">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.ports</a></div><div class="ttdeci">ports</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00048">Calibration.py:48</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyList_1_1FrequencyList_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyList_1_1FrequencyList.xhtml">SignalIntegrity.Lib.FrequencyDomain.FrequencyList.FrequencyList</a></div><div class="ttdoc">Frequency lists.</div><div class="ttdef"><b>Definition:</b> <a href="FrequencyList_8py_source.xhtml#l00032">FrequencyList.py:32</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_aa13609521a462705a084ede48a53fc27"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa13609521a462705a084ede48a53fc27">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.calibrationMatrix</a></div><div class="ttdeci">calibrationMatrix</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00051">Calibration.py:51</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms</a></div><div class="ttdoc">Error terms for VNA and TDR based s-parameter calculations.</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00046">ErrorTerms.py:46</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_aa326dcd5b8d65f7aa1ac7dcaafa99899"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa326dcd5b8d65f7aa1ac7dcaafa99899">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration._InitializeXtalkErrorTerms</a></div><div class="ttdeci">def _InitializeXtalkErrorTerms(self)</div><div class="ttdoc">initializes the xtalk error terms to zero to allow for non-calculation.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00236">Calibration.py:236</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a2fd29d1d781b8f2e08de3528337c579c"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a2fd29d1d781b8f2e08de3528337c579c">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.DutCalculation</a></div><div class="ttdeci">def DutCalculation(self, sRaw, portList=None, reciprocal=False)</div><div class="ttdoc">calculates the Dut.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00377">Calibration.py:377</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameters_1_1SParameters.xhtml">SignalIntegrity.Lib.SParameters.SParameters.SParameters</a></div><div class="ttdoc">Class containing s-parameters.</div><div class="ttdef"><b>Definition:</b> <a href="SParameters_8py_source.xhtml#l00042">SParameters.py:42</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1SystemSParametersNumeric_1_1SystemSParametersNumeric_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1SystemSParametersNumeric_1_1SystemSParametersNumeric.xhtml">SignalIntegrity.Lib.SystemDescriptions.SystemSParametersNumeric.SystemSParametersNumeric</a></div><div class="ttdoc">Class for computing s-parameters of interconnected systems.</div><div class="ttdef"><b>Definition:</b> <a href="SystemSParametersNumeric_8py_source.xhtml#l00035">SystemSParametersNumeric.py:35</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a5666ba65921857737c2e2ff28b5192d5"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a5666ba65921857737c2e2ff28b5192d5">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.ReadFromFile</a></div><div class="ttdeci">def ReadFromFile(self, filename, callback=None, **kwargs)</div><div class="ttdoc">Reads the error terms to a file in LeCroy format.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00167">Calibration.py:167</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_af59f1f79c72d4d05439ca44797972ba0"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af59f1f79c72d4d05439ca44797972ba0">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.AddMeasurements</a></div><div class="ttdeci">def AddMeasurements(self, calibrationList=[])</div><div class="ttdoc">Adds calibration measurements.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00204">Calibration.py:204</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_aac14ba20e3ac3767b1c38b8b6e3ff535"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aac14ba20e3ac3767b1c38b8b6e3ff535">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration._CheckErrorTerms</a></div><div class="ttdeci">def _CheckErrorTerms(self)</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00322">Calibration.py:322</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a633de4b0c14ca52ea2432a3c8a5c4c31"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a633de4b0c14ca52ea2432a3c8a5c4c31">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.f</a></div><div class="ttdeci">f</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00049">Calibration.py:49</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_aff76ffba4ac0f13cf321c90304aa83de"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aff76ffba4ac0f13cf321c90304aa83de">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration._CalculateXtalkErrorTerms</a></div><div class="ttdeci">def _CalculateXtalkErrorTerms(self, measurements)</div><div class="ttdoc">calculates the crosstalk error terms EX for all port combinations and frequencies.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00246">Calibration.py:246</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Exception_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Exception.xhtml">SignalIntegrity.Lib.Exception</a></div><div class="ttdef"><b>Definition:</b> <a href="Exception_8py_source.xhtml#l00001">Exception.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration</a></div><div class="ttdoc">Generates calibrated s-parameter measurements.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00037">Calibration.py:37</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_ad14110f888d70b0dd318565f82f340e9"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ad14110f888d70b0dd318565f82f340e9">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration._CalculateThruErrorTerms</a></div><div class="ttdeci">def _CalculateThruErrorTerms(self, measurements)</div><div class="ttdoc">calculates the thru error terms EL and ET for each port combination and frequency.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00299">Calibration.py:299</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_af88d06c8bd4802bd4a2a2d88c1a94e31"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#af88d06c8bd4802bd4a2a2d88c1a94e31">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration._CalculateTransferThruErrorTerms</a></div><div class="ttdeci">def _CalculateTransferThruErrorTerms(self)</div><div class="ttdoc">calculates the transfer thru error terms EL and ET for each port combination and frequency not alread...</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00319">Calibration.py:319</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a51a05212d3d72c8a4f555a789d50185a"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a51a05212d3d72c8a4f555a789d50185a">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.XtalkErrorTermsOptional</a></div><div class="ttdeci">bool XtalkErrorTermsOptional</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00039">Calibration.py:39</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Devices_1_1Thru_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Devices_1_1Thru.xhtml">SignalIntegrity.Lib.Devices.Thru</a></div><div class="ttdef"><b>Definition:</b> <a href="Thru_8py_source.xhtml#l00001">Thru.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a8da5dc0c13d32bfb119255f7ac781b21"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.ET</a></div><div class="ttdeci">ET</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00050">Calibration.py:50</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a3ba5b62a478aead01d3dd9646a7372a3"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a3ba5b62a478aead01d3dd9646a7372a3">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.DutUnCalculation</a></div><div class="ttdeci">def DutUnCalculation(self, S, portList=None)</div><div class="ttdoc">Un-calcualates the DUT.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00429">Calibration.py:429</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a0994ac10d9f3241645973950921ff158"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a0994ac10d9f3241645973950921ff158">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration._CalculateReflectErrorTerms</a></div><div class="ttdeci">def _CalculateReflectErrorTerms(self, measurements)</div><div class="ttdoc">calculates the reflect error terms ED, ER, ES for all ports and frequencies.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00225">Calibration.py:225</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_aa80b8cc3dd6b50fc958d25106c23da19"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aa80b8cc3dd6b50fc958d25106c23da19">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration._CalculateUnknownThruErrorTerms</a></div><div class="ttdeci">def _CalculateUnknownThruErrorTerms(self, measurements)</div><div class="ttdoc">calculates the unknown thru standards for each unknown thru measurement.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00266">Calibration.py:266</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyList_1_1EvenlySpacedFrequencyList_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyList_1_1EvenlySpacedFrequencyList.xhtml">SignalIntegrity.Lib.FrequencyDomain.FrequencyList.EvenlySpacedFrequencyList</a></div><div class="ttdoc">A evenly spaced list of frequencies.</div><div class="ttdef"><b>Definition:</b> <a href="FrequencyList_8py_source.xhtml#l00193">FrequencyList.py:193</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a4d3944daa360dac4cb097fcfee541d5b"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a4d3944daa360dac4cb097fcfee541d5b">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.DutUnCalculationAlternate</a></div><div class="ttdeci">def DutUnCalculationAlternate(self, S, portList=None)</div><div class="ttdoc">Un-calcualates the DUT.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00395">Calibration.py:395</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1CalibrationMeasurements_1_1ThruCalibrationMeasurement_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1CalibrationMeasurements_1_1ThruCalibrationMeasurement.xhtml">SignalIntegrity.Lib.Measurement.Calibration.CalibrationMeasurements.ThruCalibrationMeasurement</a></div><div class="ttdoc">A thru calibration measurement taken between two ports.</div><div class="ttdef"><b>Definition:</b> <a href="CalibrationMeasurements_8py_source.xhtml#l00070">CalibrationMeasurements.py:70</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_ab30a42390f53eabb98739d1a20ed06e2"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#ab30a42390f53eabb98739d1a20ed06e2">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.Fixtures</a></div><div class="ttdeci">def Fixtures(self, pl=None)</div><div class="ttdoc">Fixtures.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00092">Calibration.py:92</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_aca0ee086164e38edd3ee183565e18278"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#aca0ee086164e38edd3ee183565e18278">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.DutCalculationAlternate</a></div><div class="ttdeci">def DutCalculationAlternate(self, sRaw, portList=None, reciprocal=False)</div><div class="ttdoc">Alternate Dut Calculation converts the raw measured s-parameters of the DUT into calibrated s-paramet...</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00361">Calibration.py:361</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration_xhtml_a09488d31cef60d14cb3ebfe3f29b963b"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1Calibration_1_1Calibration.xhtml#a09488d31cef60d14cb3ebfe3f29b963b">SignalIntegrity.Lib.Measurement.Calibration.Calibration.Calibration.__init__</a></div><div class="ttdeci">def __init__(self, ports, f, calibrationList=[])</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="Calibration_8py_source.xhtml#l00047">Calibration.py:47</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
