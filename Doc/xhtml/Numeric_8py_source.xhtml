<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/SystemDescriptions/Numeric.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.4.1</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_b1cfbe88f76e92679e406af529b188cc.xhtml">SystemDescriptions</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Numeric.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">Numeric.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2021 Nubis Communications, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># Copyright (c) 2018-2020 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Devices.xhtml">SignalIntegrity.Lib.Devices</a> <span class="keyword">import</span> TeeThreePortSafe</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml">Numeric</a>(object):</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;handles numeric details of derived class solutions&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    alwaysUseSVD=<span class="keyword">False</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    trySVD=<span class="keyword">True</span></div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml">   28</a></span>&#160;    singularValueLimit=1e-10</div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#ab68a1b423941c51e8ccefab1d0e03680">   29</a></span>&#160;    conditionNumberLimit=1e-10</div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a4988712fe9d27667a418ba322755b771">   30</a></span>&#160;    checkConditionNumber=<span class="keyword">True</span></div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a1c2157bee115aa144fec375764475eea">   31</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a4eb86bd2d19cfe0680acd7763cf7ced4">InstallSafeTees</a>(self,Z=0.00001):</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a08b8b3235dd64fbd582af36b14ad9978">   32</a></span>&#160;        <span class="stringliteral">&quot;&quot;&quot;obsolete</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral">        @deprecated this function is no longer needed with the svd calculation.</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">        @see Dagger</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        <span class="keywordflow">for</span> d <span class="keywordflow">in</span> range(len(self)):</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&#39;#&#39;</span> <span class="keywordflow">in</span> self[d].Name:</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;                self[d].AssignSParameters(TeeThreePortSafe(0.000000001))</div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a4eb86bd2d19cfe0680acd7763cf7ced4">   39</a></span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#ab5426fd52fdb799a9317c38b09b7e40a">Dagger</a>(self,A,Left=None,Right=None,Mul=False):</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral">        Special computation of \f$\mathbf{A}^\dagger\f$ where</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral">        \f$\mathbf{L}\cdot\mathbf{A}^\dagger\cdot\mathbf{R}\f$ needs to be computed\n</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="stringliteral">        @param A matrix \f$\mathbf{A}\f$ to be inverted</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="stringliteral">        @param Left optional matrix that appears to the left of \f$\mathbf{A}^\dagger\f$</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="stringliteral">        @param Right optional matrix that appears to the right of \f$\mathbf{A}^\dagger\f$</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral">        @param Mul (optional) whether to provide the result \f$\mathbf{L}\cdot\mathbf{A}^\dagger\cdot\mathbf{R}\f$.</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="stringliteral">        Otherwise, by default, \$A^\dagger\f$ is returned.</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="stringliteral">        @return matrix \f$\mathbf{A}^\dagger\f$</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="stringliteral">        @throw LinAlgError if matrix cannot be inverted</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="stringliteral">        @remark All matrices supplied can be either list of list or numpy matrix, but</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="stringliteral">        the return type is always a numpy matrix</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="stringliteral">        @details if trySVD if False and alwaysUseSVD is False, then the Left and Right</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="stringliteral">        arguments are ignored and an attempt is made at calculating the Moore-Penrose</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="stringliteral">        pseudo-inverse of \f$\mathbf{A}\f$.  if the condition number of the resulting inverse is less</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="stringliteral">        than the conditionNumberLimit, then this method fails.\n</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="stringliteral">        If alwaysUseSVD is True or there is a failure and trySVD is True, then the svd</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="stringliteral">        is used.  The svd is not _better_ than the pseudo-inverse, per se, but it is able</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="stringliteral">        to make use of the left and right matrices.\n</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="stringliteral">        Many of the problems are of the form \f$\mathbf{L}\cdot\mathbf{A}^{-1}\cdot\mathbf{R}\f$.</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="stringliteral">        In many cases, the matrices \f$\mathbf{L}\f$</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="stringliteral">        and/or \f$\mathbf{R}\f$ are such that the all of the elements of the inverse of</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="stringliteral">        \f$\mathbf{A}\f$ are not used.</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="stringliteral">        Think of it as we only want to find certain elements of the inverse.  Situations like</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="stringliteral">        this arise, for example, when we have two wires in parallel connected to two circuit</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="stringliteral">        nodes.  We are not able to calculate the current through each of the wires, but we</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="stringliteral">        are able to calculate the current into and out of the parallel combination.  Another</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="stringliteral">        example is a circuit with no ground reference provided and we are calculating the</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="stringliteral">        differential voltage across an element in the circuit.  In cases like this, it is</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="stringliteral">        not possible to calculate the values of each circuit node, yet the answer exists and</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="stringliteral">        can be found.\n</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="stringliteral">        Using the svd, \f$\mathbf{A}\f$ is decomposed into \f$\mathbf{U}\cdot diag\left(\sigma\right)\cdot\mathbf{V}^H\f$</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="stringliteral">        where if \f$\mathbf{U}\f$ is \f$R\times C\f$, \f$diag\left(\sigma\right)\f$</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="stringliteral">        is \f$C\times C\f$ and \f$\mathbf{V}\f$ is \f$C\times C\f$.  The inverse of \f$\mathbf{A}\f$</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="stringliteral">        can be written as \f$\mathbf{V}\cdot diag\left(\sigma\right)^{-1}\cdot\mathbf{U}^H\f$.\n</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="stringliteral">        Here, we multiply the matrix \f$\mathbf{L}\cdot\mathbf{V}\f$ and the matrix \f$\mathbf{U}^H\cdot\mathbf{R}\f$.</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="stringliteral">        Then, if a column \f$rc\f$ of \f$\mathbf{L}\cdot\mathbf{V}\f$ is</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="stringliteral">        all zeros or a row \f$rc\f$ of \f$\mathbf{U}^H\cdot\mathbf{R}\f$ is zero,</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="stringliteral">        we know that the singular value \f$\sigma\left[rc\right]\f$ is</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="stringliteral">        not used and is irrelevant - we set it to one so that it can&#39;t harm us and return</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="stringliteral">        the inverse.</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="stringliteral">        @see trySVD</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="stringliteral">        @see alwaysUseSVD</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="stringliteral">        @see conditionNumberLimit</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="stringliteral">        @see singularValueLimit</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="stringliteral">        @throw LinAlgError if anything fails.</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keyword">from</span> numpy <span class="keyword">import</span> linalg,array,diag,ndarray</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keyword">from</span> numpy.linalg.linalg <span class="keyword">import</span> LinAlgError,svd</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keywordflow">if</span> A <span class="keywordflow">is</span> <span class="keywordtype">None</span>: <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">if</span> isinstance(A,list): A=array(A)</div>
<div class="line"><a name="l00091"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#ab5426fd52fdb799a9317c38b09b7e40a">   91</a></span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#ab68a1b423941c51e8ccefab1d0e03680">alwaysUseSVD</a>:</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a77672ee20d8e046fde62c78083939f75">checkConditionNumber</a>:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                    <span class="comment"># without this check, there is a gray zone where the matrix is really uninvertible</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    <span class="comment"># yet, produces total garbage without raising the exception.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    <span class="keywordflow">if</span> 1.0/linalg.cond(A) &lt; self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a08b8b3235dd64fbd582af36b14ad9978">conditionNumberLimit</a>:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                        <span class="keywordflow">raise</span> LinAlgError</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                Adagger=linalg.inv(A)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                <span class="keywordflow">if</span> Mul:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="keywordflow">if</span> Left <span class="keywordflow">is</span> <span class="keywordtype">None</span>: Left=array(1.)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="keywordflow">elif</span> isinstance(Left,list):</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                        Left=array(Left)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                        <span class="keywordflow">if</span> Left.shape == (1,1):</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                            Left=array(Left[0,0])</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    <span class="keywordflow">if</span> Right <span class="keywordflow">is</span> <span class="keywordtype">None</span>: Right=array(1.)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="keywordflow">elif</span> isinstance(Right,list):</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        Right=array(Right)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        <span class="keywordflow">if</span> Right.shape == (1,1):</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                            Right=array(Right[0,0])</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="keywordflow">return</span> Left.dot(Adagger).dot(Right)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                    <span class="keywordflow">return</span> Adagger</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="comment"># the regular matrix inverse failed</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="keywordflow">pass</span> <span class="comment"># will get another try at it</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="keywordflow">if</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a4988712fe9d27667a418ba322755b771">trySVD</a>:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                U,sigma,VH = svd(A,full_matrices=<span class="keyword">False</span>)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                sigma=sigma.tolist()</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                <span class="keywordflow">if</span> Left <span class="keywordflow">is</span> <span class="keywordtype">None</span>: Left=array(1.)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="keywordflow">elif</span> isinstance(Left,(list,ndarray)):</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                    Left=array(Left)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                    <span class="keywordflow">if</span> Left.shape == (1,1):</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                        Left=array(Left[0,0])</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="keywordflow">if</span> Right <span class="keywordflow">is</span> <span class="keywordtype">None</span>: Right=array(1.)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                <span class="keywordflow">elif</span> isinstance(Right,(list,ndarray)):</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    Right=array(Right)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="keywordflow">if</span> Right.shape == (1,1):</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                        Right=array(Right[0,0])</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                V=VH.conj().T</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                lv=Left.dot(V)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                UH=U.conj().T</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                uhr=UH.dot(Right)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                <span class="comment"># assume that the singular value is unused according to left matrix</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                sl=[<span class="keyword">False</span>]*len(sigma)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="comment"># if there is any element in column c that is nonzero</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                <span class="comment"># then the singular value is used</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(lv)):</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(lv[0])):</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                        <span class="keywordflow">if</span> abs(lv[r][c])&gt;self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a1c2157bee115aa144fec375764475eea">singularValueLimit</a>:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                            sl[c]=<span class="keyword">True</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                <span class="comment"># assume that the singular value is unused according to the right matrix</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                sr=[<span class="keyword">False</span>]*len(sigma)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                <span class="comment"># if there is any element in column c that is nonzero</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                <span class="comment"># then the singular value is used</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(uhr)):</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(uhr[0])):</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        <span class="keywordflow">if</span> abs(uhr[r][c])&gt;self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a1c2157bee115aa144fec375764475eea">singularValueLimit</a>:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                            sr[r]=<span class="keyword">True</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                sUsed=[l <span class="keywordflow">and</span> r <span class="keywordflow">for</span> l,r <span class="keywordflow">in</span> zip(sl,sr)]</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                <span class="keywordflow">for</span> u,s <span class="keywordflow">in</span> zip(sUsed,sigma):</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    <span class="keywordflow">if</span> u <span class="keywordflow">and</span> (s&lt;self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a1c2157bee115aa144fec375764475eea">singularValueLimit</a>):</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                        <span class="keywordflow">raise</span> LinAlgError</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                sigmaInv=[1./self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a1c2157bee115aa144fec375764475eea">singularValueLimit</a> <span class="keywordflow">if</span> (<span class="keywordflow">not</span> sUsed[i] <span class="keywordflow">and</span> s&lt;self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a1c2157bee115aa144fec375764475eea">singularValueLimit</a>) <span class="keywordflow">else</span> 1./sigma[i]</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(sigma))]</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                <span class="keywordflow">if</span> Mul:</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                    <span class="keywordflow">return</span> lv.dot(diag(sigmaInv)).dot(uhr)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                    <span class="keywordflow">return</span> V.dot(diag(sigmaInv)).dot(UH)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                <span class="keywordflow">raise</span> LinAlgError</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            <span class="keywordflow">raise</span> LinAlgError</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a0219d0273e733c10fc33cd240d9beac9">PermutationMatrix</a>(self,rowList,Elements):</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Row permutation matrix</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral">        @param rowList list of integer row elements to extract from matrix to right - in order</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="stringliteral">        @param Elements integer number of elements in matrix to right</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="stringliteral">        @return Row permutation matrix that if multiplied by matrix to the right, extracts</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="stringliteral">        the rows in rowList</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="stringliteral">        @note if the transpose of this matrix is post-multiplied by a matrix from the right,</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="stringliteral">        the columns in rowList would be exracted.</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        P=[[0 <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(Elements)] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(len(rowList))]</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(rowList)): P[r][rowList[r]]=1</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">return</span> P</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            </div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml_a77672ee20d8e046fde62c78083939f75"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a77672ee20d8e046fde62c78083939f75">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric.checkConditionNumber</a></div><div class="ttdeci">bool checkConditionNumber</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00033">Numeric.py:33</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric</a></div><div class="ttdoc">handles numeric details of derived class solutions</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00028">Numeric.py:28</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml_ab68a1b423941c51e8ccefab1d0e03680"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#ab68a1b423941c51e8ccefab1d0e03680">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric.alwaysUseSVD</a></div><div class="ttdeci">bool alwaysUseSVD</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00029">Numeric.py:29</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml_a4988712fe9d27667a418ba322755b771"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a4988712fe9d27667a418ba322755b771">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric.trySVD</a></div><div class="ttdeci">bool trySVD</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00030">Numeric.py:30</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml_a1c2157bee115aa144fec375764475eea"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a1c2157bee115aa144fec375764475eea">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric.singularValueLimit</a></div><div class="ttdeci">int singularValueLimit</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00031">Numeric.py:31</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Devices_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Devices.xhtml">SignalIntegrity.Lib.Devices</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2Devices_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml_a4eb86bd2d19cfe0680acd7763cf7ced4"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a4eb86bd2d19cfe0680acd7763cf7ced4">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric.InstallSafeTees</a></div><div class="ttdeci">def InstallSafeTees(self, Z=0.00001)</div><div class="ttdoc">obsolete</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00039">Numeric.py:39</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml_a08b8b3235dd64fbd582af36b14ad9978"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a08b8b3235dd64fbd582af36b14ad9978">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric.conditionNumberLimit</a></div><div class="ttdeci">int conditionNumberLimit</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00032">Numeric.py:32</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml_a0219d0273e733c10fc33cd240d9beac9"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#a0219d0273e733c10fc33cd240d9beac9">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric.PermutationMatrix</a></div><div class="ttdeci">def PermutationMatrix(self, rowList, Elements)</div><div class="ttdoc">Row permutation matrix.</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00181">Numeric.py:181</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric_xhtml_ab5426fd52fdb799a9317c38b09b7e40a"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SystemDescriptions_1_1Numeric_1_1Numeric.xhtml#ab5426fd52fdb799a9317c38b09b7e40a">SignalIntegrity.Lib.SystemDescriptions.Numeric.Numeric.Dagger</a></div><div class="ttdeci">def Dagger(self, A, Left=None, Right=None, Mul=False)</div><div class="ttdef"><b>Definition:</b> <a href="Numeric_8py_source.xhtml#l00091">Numeric.py:91</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
