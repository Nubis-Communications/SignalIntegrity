<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Utilities/ERL/ERL.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.5.0</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_97cc71f5c0ef0cd167ee5cb90fe0d2ce.xhtml">Utilities</a></li><li class="navelem"><a class="el" href="dir_542c3bef2b2a3ec9cfad6e4f3e0c39c9.xhtml">ERL</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ERL.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceERL.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">ERL.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2021 Nubis Communications, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018-2020 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1ToSI.xhtml">SignalIntegrity.Lib.ToSI</a> <span class="keyword">import</span> FromSI,ToSI</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a> <span class="keyword">import</span> SignalIntegrityAppHeadless</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">import</span> numpy <span class="keyword">as</span> np</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">import</span> math</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">import</span> os</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">def </span><a class="code" href="namespaceERL.xhtml#a0b18915e26f4db28999ce7c86690b9fa">ERL</a>(filename,args,debug=False,verbose=False):</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;computes effective return loss (ERL) mostly according to IEEE COM</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="stringliteral">    @param filename absolute path of four-port s-parameter file</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral">    @param args dictionary of arguments for the ERL calculation (defined below).</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="stringliteral">    @param debug boolean (optional, defaults to False) whether to show debug information.</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="stringliteral">    @param verbose boolean (optional, defaults to False) whether to show intermediate output messages. </span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral">    The valid arguments are:</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">    |key           | units |required    |description                                                          |</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">    |:------------:|:----:|:-----------:|:------------------------------------------------------------------- |</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">    | port_reorder | --   | no, 1,2,3,4 | port ordering of 1p,1n,2p,2n of the .s4p file (default is 1,2,3,4). |</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">    | T_r          | s    | yes         | transition time associated with a pulse                             |</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">    | beta_x       | Hz   | yes         | incremental available signal loss factor                            |</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">    | rho_x        | --   | yes         | permitted reflection from a transmission line external to the DUT   |</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="stringliteral">    | N            | UI   | yes         | length of reflection signal                                         |</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral">    | N_bx         | UI   | yes         | equalizer length associated with reflection signal                  |</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral">    | Z0           | ohm  | no 100      | intended differential-mode characteristic impedance                 |</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="stringliteral">    | T_fx         | s    | no 0        | time-gated propagation delay                                        |</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="stringliteral">    | f_b          | Baud | yes         | Baud rate                                                           |</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="stringliteral">    | DER_0        | --   | yes         | target detector error ratio                                         |</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral">    | bps          | --   | no 1        | bits per symbol (1=NRZ, 2=PAM-4)                                    |</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="stringliteral">    | phi          | --   | no 32       | number of sample phases in ptdr (essentially an upsample factor     |</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keyword">class </span>ERL_Exception(si.SignalIntegrityException):</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        <span class="keyword">def </span>__init__(self,message):</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="namespaceERL.xhtml#a0b18915e26f4db28999ce7c86690b9fa">   51</a></span>&#160;            si.SignalIntegrityException.__init__(self,<span class="stringliteral">&#39;ERL&#39;</span>,message)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;            <span class="keywordflow">if</span> debug <span class="keywordflow">or</span> verbose:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;                print(message)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    path=os.getcwd()</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160; </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keywordflow">if</span> debug <span class="keywordflow">or</span> verbose:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        print(args)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    required_keywords = [<span class="stringliteral">&#39;T_r&#39;</span>,<span class="stringliteral">&#39;beta_x&#39;</span>,<span class="stringliteral">&#39;rho_x&#39;</span>,<span class="stringliteral">&#39;N&#39;</span>,<span class="stringliteral">&#39;N_bx&#39;</span>,<span class="stringliteral">&#39;f_b&#39;</span>,<span class="stringliteral">&#39;DER_0&#39;</span>]</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> key <span class="keywordflow">in</span> required_keywords:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">if</span> key <span class="keywordflow">not</span> <span class="keywordflow">in</span> args:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;            <span class="keywordflow">raise</span> ERL_Exception(f<span class="stringliteral">&#39;error: {key} must be specified&#39;</span>)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    port_reorder = <span class="stringliteral">&#39;1,2,3,4&#39;</span> <span class="keywordflow">if</span> <span class="stringliteral">&#39;port_reorder&#39;</span> <span class="keywordflow">not</span> <span class="keywordflow">in</span> args <span class="keywordflow">else</span> args[<span class="stringliteral">&#39;port_reorder&#39;</span>]</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    T_r = args[<span class="stringliteral">&#39;T_r&#39;</span>]</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    beta_x = args[<span class="stringliteral">&#39;beta_x&#39;</span>]</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    rho_x = args[<span class="stringliteral">&#39;rho_x&#39;</span>]</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    N = args[<span class="stringliteral">&#39;N&#39;</span>]</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    N_bx = args[<span class="stringliteral">&#39;N_bx&#39;</span>]</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    Z0 = 100.0 <span class="keywordflow">if</span> <span class="stringliteral">&#39;Z0&#39;</span> <span class="keywordflow">not</span> <span class="keywordflow">in</span> args <span class="keywordflow">else</span> args[<span class="stringliteral">&#39;Z0&#39;</span>]</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    T_fx = 0 <span class="keywordflow">if</span> <span class="stringliteral">&#39;T_fx&#39;</span> <span class="keywordflow">not</span> <span class="keywordflow">in</span> args <span class="keywordflow">else</span> args[<span class="stringliteral">&#39;T_fx&#39;</span>]</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    f_b = args[<span class="stringliteral">&#39;f_b&#39;</span>]</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    DER_0 = args[<span class="stringliteral">&#39;DER_0&#39;</span>]</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    bps = 1 <span class="keywordflow">if</span> <span class="stringliteral">&#39;bps&#39;</span> <span class="keywordflow">not</span> <span class="keywordflow">in</span> args <span class="keywordflow">else</span> int(args[<span class="stringliteral">&#39;bps&#39;</span>])</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    phi = 32 <span class="keywordflow">if</span> <span class="stringliteral">&#39;phi&#39;</span> <span class="keywordflow">not</span> <span class="keywordflow">in</span> args <span class="keywordflow">else</span> int(args[<span class="stringliteral">&#39;phi&#39;</span>])</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> debug <span class="keywordflow">or</span> verbose:</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        print(f<span class="stringliteral">&quot;filename = {filename}&quot;</span>)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        print(f<span class="stringliteral">&quot;port_reorder = {port_reorder}&quot;</span>)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        print(f<span class="stringliteral">&quot;T_r = {ToSI(T_r,&#39;s&#39;)}&quot;</span>)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        print(f<span class="stringliteral">&quot;beta_x = {ToSI(beta_x,&#39;Hz&#39;)}&quot;</span>)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        print(f<span class="stringliteral">&quot;rho_x = {ToSI(rho_x,None)}&quot;</span>)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        print(f<span class="stringliteral">&quot;N = {ToSI(N,&#39;UI&#39;)}&quot;</span>)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        print(f<span class="stringliteral">&quot;N_bx = {ToSI(N_bx,&#39;UI&#39;)}&quot;</span>)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        print(f<span class="stringliteral">&quot;Z0 = {ToSI(Z0,&#39;ohm&#39;)}&quot;</span>)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        print(f<span class="stringliteral">&quot;T_fx = {ToSI(T_fx,&#39;s&#39;)}&quot;</span>)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        print(f<span class="stringliteral">&quot;f_b = {ToSI(f_b,&#39;Baud&#39;)}&quot;</span>)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        print(f<span class="stringliteral">&quot;DER_0 = {ToSI(DER_0,None)}&quot;</span>)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        print(f<span class="stringliteral">&quot;bps = {ToSI(bps,None)}&quot;</span>)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        print(f<span class="stringliteral">&quot;phi = {ToSI(phi,None)}&quot;</span>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        print(f<span class="stringliteral">&quot;verbose = {str(verbose)}&quot;</span>)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        print(f<span class="stringliteral">&quot;debug = {str(debug)}&quot;</span>)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    args = {<span class="stringliteral">&#39;file_name&#39;</span>:os.path.abspath(filename),</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="stringliteral">&#39;port_reordering&#39;</span>:port_reorder,</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;            <span class="stringliteral">&#39;Z0&#39;</span>:Z0/2.,</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            <span class="stringliteral">&#39;f_b&#39;</span>:f_b,</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="stringliteral">&#39;T_r&#39;</span>:T_r,</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;            <span class="stringliteral">&#39;N&#39;</span>:N,</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="stringliteral">&#39;phi&#39;</span>:phi</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            }</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordflow">if</span> debug: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        kwPairs=<span class="stringliteral">&#39; &#39;</span>.join([key+<span class="stringliteral">&#39; &#39;</span>+str(args[key]) <span class="keywordflow">for</span> key <span class="keywordflow">in</span> args.keys()])</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        pwdArgString=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        result=os.system(<span class="stringliteral">&#39;SignalIntegrity &quot;&#39;</span>+os.path.abspath(os.path.join(os.path.dirname(__file__),<span class="stringliteral">&#39;Projects&#39;</span>,<span class="stringliteral">&#39;ERL_S11_Impulse.si&#39;</span>))+<span class="stringliteral">&#39;&quot;&#39;</span>+pwdArgString+<span class="stringliteral">&#39; --external &#39;</span>+kwPairs)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    siapp = SignalIntegrityAppHeadless()</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    opened = siapp.OpenProjectFile(os.path.abspath(os.path.join(os.path.dirname(__file__),<span class="stringliteral">&#39;Projects&#39;</span>,<span class="stringliteral">&#39;ERL_S11_Impulse.si&#39;</span>)), args)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160; </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> opened: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        <span class="keywordflow">raise</span> ERL_Exception(<span class="stringliteral">&#39;error: project file ERL_S11_Impulse.si could not be opened&#39;</span>)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    result = siapp.Simulate()</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="keywordflow">if</span> result == {}:</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">raise</span> ERL_Exception(<span class="stringliteral">&#39;error: project file ERL_S11_Impulse.si could not be simulated&#39;</span>)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    outputWaveformLabels = result[<span class="stringliteral">&#39;output waveform labels&#39;</span>]</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    outputWaveformList = result[<span class="stringliteral">&#39;output waveforms&#39;</span>]</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;    PTDR_wf = outputWaveformList[outputWaveformLabels.index(<span class="stringliteral">&#39;PTDR&#39;</span>)]</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; </div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keyword">def </span>G_rr(t):</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span> t &lt; T_fx:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            <span class="keywordflow">return</span> 0.</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">elif</span> t &lt; T_fx + (N_bx + 1)/f_b:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">return</span> rho_x*(1+rho_x)*np.exp(-((t-T_fx)*f_b-(N_bx+1))**2/(N_bx+1)**2)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            <span class="keywordflow">return</span> 1.0</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keyword">def </span>G_loss(t):</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span> t &lt; T_fx:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> 0.</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">elif</span> t &lt; T_fx + (N_bx + 1)/f_b:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            <span class="keywordflow">return</span> np.power(10.,beta_x/f_b*((t-T_fx)*f_b-(N_bx+1))/20.)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            <span class="keywordflow">return</span> 1.0</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> debug: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        G_rr_wf = si.td.wf.Waveform(PTDR_wf.td,[G_rr(t) <span class="keywordflow">for</span> t <span class="keywordflow">in</span> PTDR_wf.Times()])</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        G_loss_wf = si.td.wf.Waveform(PTDR_wf.td,[G_loss(t) <span class="keywordflow">for</span> t <span class="keywordflow">in</span> PTDR_wf.Times()])</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    R_eff_wf = si.td.wf.Waveform(PTDR_wf.td,[v*G_rr(t)*G_loss(t) <span class="keywordflow">for</span> t,v <span class="keywordflow">in</span> zip(PTDR_wf.Times(),PTDR_wf.Values())])</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> debug: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        plt.plot([t*f_b <span class="keywordflow">for</span> t <span class="keywordflow">in</span> G_rr_wf.Times()],G_rr_wf.Values(),label=<span class="stringliteral">&#39;G_rr&#39;</span>)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        plt.plot([t*f_b <span class="keywordflow">for</span> t <span class="keywordflow">in</span> G_loss_wf.Times()],G_loss_wf.Values(),label=<span class="stringliteral">&#39;G_loss&#39;</span>)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        plt.axvline(T_fx*f_b,linestyle=<span class="stringliteral">&#39;--&#39;</span>,color=<span class="stringliteral">&#39;red&#39;</span>)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        plt.axvline((T_fx + (N_bx + 1)/f_b)*f_b,linestyle=<span class="stringliteral">&#39;--&#39;</span>,color=<span class="stringliteral">&#39;red&#39;</span>)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        plt.xlabel(<span class="stringliteral">&#39;time (samples)&#39;</span>)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        plt.ylabel(<span class="stringliteral">&#39;amplitude (V)&#39;</span>)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        plt.title(<span class="stringliteral">&#39;gating functions&#39;</span>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        plt.grid()</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        plt.legend()</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        plt.show()</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        plt.cla()</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    K = int(R_eff_wf.td.K/phi)*phi</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    phi_max=0</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    sigma_max=0</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    <span class="keywordflow">for</span> ph <span class="keywordflow">in</span> range(0,phi):</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        x=[R_eff_wf[k*phi+ph] <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(0,K//phi)]</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        sigma=np.std(x)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="comment"># print(sigma)</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keywordflow">if</span> sigma &gt; sigma_max:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;            phi_max = ph</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            sigma_max = sigma</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160; </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keywordflow">if</span> debug <span class="keywordflow">or</span> verbose:</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        print(f<span class="stringliteral">&#39;maximum sigma of {sigma_max} at phi={phi_max}&#39;</span>)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    worst_phase_wf = si.td.wf.Waveform(si.td.wf.TimeDescriptor(R_eff_wf.Times()[0*phi+phi_max],</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                                                               K//phi,</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                                                               R_eff_wf.td.Fs/phi),</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                                        [R_eff_wf[k*phi+phi_max] <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(0,K//phi)])</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;    epsilon=1e-5</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">def </span>kmin():</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(0,worst_phase_wf.td.K):</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordflow">if</span> abs(worst_phase_wf[k]) &gt; epsilon:</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                <span class="keywordflow">return</span> k</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160; </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">def </span>kmax():</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(0,worst_phase_wf.td.K):</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            index = worst_phase_wf.td.K-1-k</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;            <span class="keywordflow">if</span> abs(worst_phase_wf[index]) &gt; epsilon:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                <span class="keywordflow">return</span> index</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160; </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    kmin=kmin()</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    kmax=kmax()</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    K=kmax-kmin+1</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    worst_phase_wf = si.td.wf.Waveform(si.td.wf.TimeDescriptor(worst_phase_wf.Times()[kmin],</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                                                               kmax-kmin+1,</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                                                               worst_phase_wf.td.Fs),</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                                        worst_phase_wf.Values()[kmin:kmax+1])</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">if</span> debug <span class="keywordflow">or</span> verbose:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        print(f<span class="stringliteral">&quot;min: {kmin}, max: {kmax}&quot;</span>)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160; </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <span class="keywordflow">if</span> debug: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        plt.plot([t*f_b <span class="keywordflow">for</span> t <span class="keywordflow">in</span> R_eff_wf.Times()],R_eff_wf.Values(),label=<span class="stringliteral">&#39;R_eff&#39;</span>)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        plt.plot([t*f_b <span class="keywordflow">for</span> t <span class="keywordflow">in</span> PTDR_wf.Times()],PTDR_wf.Values(),label=<span class="stringliteral">&#39;PTDR&#39;</span>)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        plt.stem([t*f_b <span class="keywordflow">for</span> t <span class="keywordflow">in</span> worst_phase_wf.Times()],worst_phase_wf.Values(),label=<span class="stringliteral">&#39;R_eff_worst_phase&#39;</span>)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        plt.xlabel(<span class="stringliteral">&#39;time (samples)&#39;</span>)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        plt.ylabel(<span class="stringliteral">&#39;amplitude (V)&#39;</span>)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        plt.title(<span class="stringliteral">&#39;pulse TDR&#39;</span>)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        plt.grid()</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        plt.legend()</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        plt.show()</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        plt.cla()</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    worst_phase_wf.WriteToFile(<span class="stringliteral">&#39;ERL_Filter.txt&#39;</span>)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    args = {<span class="stringliteral">&#39;Nbits&#39;</span>:4e6,</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="stringliteral">&#39;f_b&#39;</span>:f_b,</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;            <span class="stringliteral">&#39;bps&#39;</span>:bps</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keywordflow">if</span> debug: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        kwPairs=<span class="stringliteral">&#39; &#39;</span>.join([key+<span class="stringliteral">&#39; &#39;</span>+str(args[key]) <span class="keywordflow">for</span> key <span class="keywordflow">in</span> args.keys()])</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        pwdArgString=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        result=os.system(<span class="stringliteral">&#39;SignalIntegrity &quot;&#39;</span>+os.path.abspath(<span class="stringliteral">&#39;ERL_S11_Error.si&#39;</span>)+<span class="stringliteral">&#39;&quot;&#39;</span>+pwdArgString+<span class="stringliteral">&#39; --external &#39;</span>+kwPairs)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160; </div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    siapp = SignalIntegrityAppHeadless()</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    opened = siapp.OpenProjectFile(<span class="stringliteral">&#39;ERL_S11_Error.si&#39;</span>, args)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> opened: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordflow">raise</span> ERL_Exception(<span class="stringliteral">&#39;error: project file ERL_S11_Error.si could not be opened&#39;</span>)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160; </div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    result = siapp.Simulate()</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;    <span class="keywordflow">if</span> result == {}: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordflow">raise</span> ERL_Exception(<span class="stringliteral">&#39;error: project file ERL_S11_Error.si could not be simulated&#39;</span>)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160; </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    outputWaveformLabels=result[<span class="stringliteral">&#39;output waveform labels&#39;</span>]</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    outputWaveformList=result[<span class="stringliteral">&#39;output waveforms&#39;</span>]</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160; </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;    error_wf = outputWaveformList[outputWaveformLabels.index(<span class="stringliteral">&#39;V_error&#39;</span>)]</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    sigma=np.std(error_wf)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160; </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keywordflow">if</span> debug <span class="keywordflow">or</span> verbose:</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        print(f<span class="stringliteral">&quot;min error: {min(error_wf)}, max error: {max(error_wf)}&quot;</span>)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    histo,bin_edges = np.histogram(error_wf.Values(),</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                         bins = 1000,</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                         range=(-5.*sigma,5.*sigma),</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                         )</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    histo = histo / error_wf.td.K</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    bin_centers=[(bin_edges[b]+bin_edges[b+1])/2. <span class="keywordflow">for</span> b <span class="keywordflow">in</span> range(bin_edges.shape[0]-1)]</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    cdf=list(histo)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    <span class="keywordflow">for</span> b <span class="keywordflow">in</span> range(1,len(cdf)):</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        cdf[b]=cdf[b-1]+histo[b]</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160; </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">def </span>linearly_interpolate(xi,yi,xf,yf,T):</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">if</span> yi &lt; 10**-300/10: <span class="comment"># protection when CDF just rose above zero</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            <span class="keywordflow">return</span> xi</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        yi=np.log10(yi)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        yf=np.log10(yf)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        T=np.log10(T)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        m=(yf-yi)/(xf-xi)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        b=yi-m*xi</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        x=(T-b)/m</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">return</span> x</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160; </div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keywordflow">for</span> b <span class="keywordflow">in</span> range(len(cdf)):</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">if</span> cdf[b] &gt; DER_0:</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            bin_value = linearly_interpolate(bin_centers[b-1],</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                                             cdf[b-1],</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                             bin_centers[b],</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                             cdf[b],</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                             DER_0)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">break</span></div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160; </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    <span class="keywordflow">if</span> debug <span class="keywordflow">or</span> verbose:</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        print(f<span class="stringliteral">&quot;DER intercept at: {ToSI(bin_value,&#39;V&#39;)}&quot;</span>)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160; </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    ERL = -20.*np.log10(-bin_value)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160; </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">if</span> debug: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        sigma_estimate = [0.5*math.erf(0.5*np.sqrt(2)*bin_centers[b]/sigma)+0.5 <span class="keywordflow">for</span> b <span class="keywordflow">in</span> range(len(bin_centers))]</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160; </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        plt.semilogy(bin_centers,cdf,label=<span class="stringliteral">&#39;cdf&#39;</span>)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        plt.semilogy(bin_centers,sigma_estimate,label=<span class="stringliteral">&#39;cdf estimate&#39;</span>)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        plt.xlabel(<span class="stringliteral">&#39;bin&#39;</span>)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        plt.ylabel(<span class="stringliteral">&#39;probability&#39;</span>)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        plt.title(<span class="stringliteral">&#39;cdf&#39;</span>)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        plt.axhline(DER_0,linestyle=<span class="stringliteral">&#39;--&#39;</span>,color=<span class="stringliteral">&#39;red&#39;</span>)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        plt.axvline(bin_value,linestyle=<span class="stringliteral">&#39;--&#39;</span>,color=<span class="stringliteral">&#39;red&#39;</span>)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        plt.grid()</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        plt.legend()</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        plt.show()</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        plt.cla()</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160; </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    <span class="keywordflow">if</span> debug <span class="keywordflow">or</span> verbose:</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        print(f<span class="stringliteral">&quot;ERL: -20*Log_10(-DER intercept = {ToSI(-bin_value,&#39;V&#39;)}) = {ToSI(ERL,&#39;dB&#39;,round=5)}&quot;</span>)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> ERL</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160; </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="keyword">def </span>ERL_Main():</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">import</span> argparse</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    <span class="keyword">from</span> argparse <span class="keyword">import</span> RawTextHelpFormatter</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    parser = argparse.ArgumentParser(</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                    prog=<span class="stringliteral">&#39;ERL&#39;</span>,</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    description=<span class="stringliteral">&quot;&quot;&quot;Effective Return Loss Calculator</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;<span class="stringliteral">                    Calculates ERL mostly according to the IEEE standard.</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="stringliteral">                    &quot;&quot;&quot;</span>,</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    epilog=<span class="stringliteral">&#39;&#39;</span>,</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    formatter_class=RawTextHelpFormatter)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;filename&#39;</span>,nargs=<span class="stringliteral">&#39;?&#39;</span>,default=<span class="keywordtype">None</span>, help=<span class="stringliteral">&#39;name of .s4p file for the ERL measurement&#39;</span>)           <span class="comment"># positional argument</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-debug&#39;</span>,<span class="stringliteral">&#39;--debug&#39;</span>,action=<span class="stringliteral">&#39;store_true&#39;</span>, help=<span class="stringliteral">&#39;shows debug information and plots as the computation proceeds&#39;</span>)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-p&#39;</span>,<span class="stringliteral">&#39;--profile&#39;</span>,action=<span class="stringliteral">&#39;store_true&#39;</span>, help=<span class="stringliteral">&#39;profiles the software&#39;</span>)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-v&#39;</span>,<span class="stringliteral">&#39;--verbose&#39;</span>,action=<span class="stringliteral">&#39;store_true&#39;</span>, help=<span class="stringliteral">&#39;prints information as calculation proceeds.\n\</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="stringliteral">this should not be set if you are relying on stdout for the return value.&#39;</span>)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-port_reorder&#39;</span>, type=str, help=<span class="stringliteral">&#39;(optional) port ordering of 1p,1n,2p,2n of the .s4p file (default is 1,2,3,4).&#39;</span>,default=<span class="stringliteral">&#39;1,2,3,4&#39;</span>)</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-T_r&#39;</span>, type=str, help=<span class="stringliteral">&#39;(required) transition time associated with a pulse,\n\</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="stringliteral">specified with units of s or UI (like 5ps or 5e-12 or 0.5UI).&#39;</span>)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-beta_x&#39;</span>, type=str, help=<span class="stringliteral">&#39;(required) incremental available signal loss factor,\n\</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="stringliteral">specified with units of Hz (like 2.53GHz or 2.53e9).&#39;</span>)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-rho_x&#39;</span>, type=str, help=<span class="stringliteral">&#39;(required) permitted reflection from a transmission line external to the DUT,\n\</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="stringliteral">must be between 0 and 1, specified unitless (like 0.5).&#39;</span>)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-N&#39;</span>, type=str, help=<span class="stringliteral">&#39;(required) length of reflection signal,\n\</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;<span class="stringliteral">specified with units of UI (like 400UI or 400).&#39;</span>)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-N_bx&#39;</span>, type=str, help=<span class="stringliteral">&#39;(required) equalizer length associated with reflection signal,\n\</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="stringliteral">specified with units of UI (like 16UI or 16).&#39;</span>)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-T_fx&#39;</span>, type=str, default=<span class="stringliteral">&#39;0&#39;</span>, help=<span class="stringliteral">&#39;(optional) time-gated propagation delay,\n\</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="stringliteral">specified with units of s (like 1ns or 1e-9),\n\</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="stringliteral">defaults to 0.&#39;</span>)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-f_b&#39;</span>, type=str,  help=<span class="stringliteral">&#39;(required) baud rate\n\</span></div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="stringliteral">specified with units of Baud (like 106.25GBaud or 106.25e9).&#39;</span>)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-Z0&#39;</span>, type=str,  help=<span class="stringliteral">&#39;(optional) intended differential-mode characteristic impedance\n\</span></div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="stringliteral">specified with units of ohm (like 100ohm or 100),\n\</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="stringliteral">defaults to 100.&#39;</span>,default=<span class="stringliteral">&#39;100ohm&#39;</span>)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-DER_0&#39;</span>, type=str,  help=<span class="stringliteral">&#39;(required) target detector error ratio\n\</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="stringliteral">specified unitless (like 1e-6).&#39;</span>)</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-bps&#39;</span>,type=str, default=<span class="stringliteral">&#39;1&#39;</span>,help=<span class="stringliteral">&#39;bits per symbol\n\</span></div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;<span class="stringliteral">1 is NRZ (default), 2 is PAM-4.&#39;</span>)</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    parser.add_argument(<span class="stringliteral">&#39;-phi&#39;</span>,type=str, default=<span class="stringliteral">&#39;32&#39;</span>,help=<span class="stringliteral">&#39;sample phases in ptdr (essentially upsample factor)\n\</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="stringliteral">defaults to 32&#39;</span>)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    args, unknown = parser.parse_known_args()</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160; </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    argsDict=dict(zip(unknown[0::2],unknown[1::2]))</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160; </div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;    <span class="keyword">def </span>Error(message):</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        <span class="keywordflow">if</span> args.verbose <span class="keywordflow">or</span> args.debug:</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            print(message)</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        print(<span class="stringliteral">&#39;error&#39;</span>)</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        exit(1)</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160; </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keyword">import</span> sys</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    <span class="keywordflow">if</span> len(sys.argv)==1:</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="comment"># parser.print_help()</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="comment"># parser.exit()</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        Error(<span class="stringliteral">&#39;file name and keyword values must be specified&#39;</span>)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160; </div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    <span class="keywordflow">if</span> len(unknown):</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="comment"># parser.print_usage()</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="comment"># parser.exit()</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        Error(f<span class="stringliteral">&#39;unknown keyword {unknown[0]} encountered&#39;</span>)</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;    argsDict[<span class="stringliteral">&#39;port_reorder&#39;</span>] = args.port_reorder</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160; </div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        argsDict[<span class="stringliteral">&#39;f_b&#39;</span>]=FromSI(args.f_b,<span class="stringliteral">&#39;Baud&#39;</span>)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;f_b&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        Error(<span class="stringliteral">&#39;error: f_b must be specified&#39;</span>)</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160; </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        argsDict[<span class="stringliteral">&#39;T_r&#39;</span>]=FromSI(args.T_r,<span class="stringliteral">&#39;s&#39;</span>)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;T_r&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            argsDict[<span class="stringliteral">&#39;T_r&#39;</span>]=FromSI(args.T_r,<span class="stringliteral">&#39;UI&#39;</span>)/argsDict[<span class="stringliteral">&#39;f_b&#39;</span>]</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;T_r&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        Error(<span class="stringliteral">&#39;error: T_r must be specified&#39;</span>)</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160; </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        argsDict[<span class="stringliteral">&#39;beta_x&#39;</span>]=FromSI(args.beta_x,<span class="stringliteral">&#39;Hz&#39;</span>)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;beta_x&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        Error(<span class="stringliteral">&#39;error: beta_x must be specified&#39;</span>)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160; </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        argsDict[<span class="stringliteral">&#39;rho_x&#39;</span>]=FromSI(args.rho_x,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;rho_x&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        Error(<span class="stringliteral">&#39;error: rho_x must be specified&#39;</span>)</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        argsDict[<span class="stringliteral">&#39;N&#39;</span>]=FromSI(args.N,<span class="stringliteral">&#39;UI&#39;</span>)</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;N&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        Error(<span class="stringliteral">&#39;error: N must be specified&#39;</span>)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        argsDict[<span class="stringliteral">&#39;N_bx&#39;</span>]=FromSI(args.N_bx,<span class="stringliteral">&#39;UI&#39;</span>)</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;N_bx&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        Error(<span class="stringliteral">&#39;error: N_bx must be specified&#39;</span>)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160; </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        argsDict[<span class="stringliteral">&#39;Z0&#39;</span>]=FromSI(args.Z0,<span class="stringliteral">&#39;ohm&#39;</span>)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;Z0&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        Error(<span class="stringliteral">&#39;error: Z0 must be specified&#39;</span>)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160; </div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;        argsDict[<span class="stringliteral">&#39;T_fx&#39;</span>]=FromSI(args.T_fx,<span class="stringliteral">&#39;s&#39;</span>)</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;T_fx&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        Error(<span class="stringliteral">&#39;error: T_fx must be specified&#39;</span>)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160; </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        argsDict[<span class="stringliteral">&#39;DER_0&#39;</span>]=FromSI(args.DER_0,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;DER_0&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        Error(<span class="stringliteral">&#39;error: DER_0 must be specified&#39;</span>)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        argsDict[<span class="stringliteral">&#39;bps&#39;</span>]=int(FromSI(args.bps,<span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;bps&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        Error(<span class="stringliteral">&#39;error: bps must be specified&#39;</span>)</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        argsDict[<span class="stringliteral">&#39;phi&#39;</span>]=int(FromSI(args.phi,<span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keywordflow">if</span> argsDict[<span class="stringliteral">&#39;phi&#39;</span>] == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            raise(AttributeError)</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">except</span> (AttributeError,TypeError):</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        Error(<span class="stringliteral">&#39;error: phi must be specified&#39;</span>)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160; </div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    runProfiler=args.profile</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160; </div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">if</span> runProfiler: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <span class="keyword">import</span> cProfile</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        globals()[<span class="stringliteral">&#39;args&#39;</span>]=args</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        globals()[<span class="stringliteral">&#39;argsDict&#39;</span>]=argsDict</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        cProfile.run(<span class="stringliteral">&#39;ERL(args.filename,args=argsDict,debug=args.debug,verbose=args.verbose)&#39;</span>,<span class="stringliteral">&#39;stats&#39;</span>)</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160; </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="keyword">import</span> pstats</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        p = pstats.Stats(<span class="stringliteral">&#39;stats&#39;</span>)</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        p.strip_dirs().sort_stats(<span class="stringliteral">&#39;cumulative&#39;</span>).print_stats(100)</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            erl=<a class="code" href="namespaceERL.xhtml">ERL</a>(args.filename,args=argsDict,debug=args.debug,verbose=args.verbose)</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            erl=<span class="stringliteral">&#39;error&#39;</span></div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        print(erl)</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        exit(1 <span class="keywordflow">if</span> erl == <span class="stringliteral">&#39;error&#39;</span> <span class="keywordflow">else</span> 0)</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160; </div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;<span class="keywordflow">if</span> __name__ == <span class="stringliteral">&#39;__main__&#39;</span>: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    ERL_Main()</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a></div><div class="ttdef"><b>Definition:</b> <a href="SignalIntegrityAppHeadless_8py_source.xhtml#l00001">SignalIntegrityAppHeadless.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1ToSI_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1ToSI.xhtml">SignalIntegrity.Lib.ToSI</a></div><div class="ttdef"><b>Definition:</b> <a href="ToSI_8py_source.xhtml#l00001">ToSI.py:1</a></div></div>
<div class="ttc" id="anamespaceERL_xhtml_a0b18915e26f4db28999ce7c86690b9fa"><div class="ttname"><a href="namespaceERL.xhtml#a0b18915e26f4db28999ce7c86690b9fa">ERL.ERL</a></div><div class="ttdeci">def ERL(filename, args, debug=False, verbose=False)</div><div class="ttdoc">computes effective return loss (ERL) mostly according to IEEE COM</div><div class="ttdef"><b>Definition:</b> <a href="ERL_8py_source.xhtml#l00051">ERL.py:51</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="anamespaceERL_xhtml"><div class="ttname"><a href="namespaceERL.xhtml">ERL</a></div><div class="ttdef"><b>Definition:</b> <a href="ERL_8py_source.xhtml#l00001">ERL.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
