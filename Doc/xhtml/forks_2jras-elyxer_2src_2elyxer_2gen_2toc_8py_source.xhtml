<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrityPages/SignalIntegrity/App/Help/elyxer-1.2.5/forks/jras-elyxer/src/elyxer/gen/toc.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.13</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_b9fdada3f2e13cef1825d6786bc9035d.xhtml">SignalIntegrityPages</a></li><li class="navelem"><a class="el" href="dir_028a9223bee22939bccc3f6c1a6cb3a3.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_5b686ebfb9be912765538ef193999c48.xhtml">App</a></li><li class="navelem"><a class="el" href="dir_4fd30fa432b1bd9f918b04bf58ad3f14.xhtml">Help</a></li><li class="navelem"><a class="el" href="dir_99d9149e1df89b2e91206bbd6265a65c.xhtml">elyxer-1.2.5</a></li><li class="navelem"><a class="el" href="dir_8eec2e1300d6de011d8246002f659316.xhtml">forks</a></li><li class="navelem"><a class="el" href="dir_48a46efab03d400ddc57ce85017e0eca.xhtml">jras-elyxer</a></li><li class="navelem"><a class="el" href="dir_a68b885dac379979dc7bf40032c2e450.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d5a55205e7b6d77c8572f365e3b0b8be.xhtml">elyxer</a></li><li class="navelem"><a class="el" href="dir_16e759543ee6fdc88508ca0e8b1ee2e3.xhtml">gen</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">toc.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceelyxer_1_1gen_1_1toc.xhtml">    1</a></span>&#160;<span class="comment">#! /usr/bin/env python</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"># -*- coding: utf-8 -*-</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">#   eLyXer -- convert LyX source files to HTML output.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#   Copyright (C) 2009 Alex Fern√°ndez</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#   This program is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#   it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">#   the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">#   (at your option) any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#   This program is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#   GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">#   You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">#   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"># --end--</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"># Alex 20091006</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"># eLyXer TOC generation</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment"># http://www.nongnu.org/elyxer/</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160; </div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1gen_1_1header.xhtml">elyxer.gen.header</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1ref_1_1label.xhtml">elyxer.ref.label</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1util_1_1docparams.xhtml">elyxer.util.docparams</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">class </span>TOCEntry(Container):</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  <span class="stringliteral">&quot;A container for a TOC entry.&quot;</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    Container.__init__(self)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    self.branches = []</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160; </div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  <span class="keyword">def </span>create(self, container):</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="stringliteral">&quot;Create the TOC entry for a container, consisting of a single link.&quot;</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    <span class="keywordflow">if</span> container.partkey.header:</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;      <span class="keywordflow">return</span> self.header(container)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    self.contents = [self.createlink(container)]</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    self.output = TaggedOutput().settag(<span class="stringliteral">&#39;div class=&quot;toc&quot;&#39;</span>, <span class="keyword">True</span>)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;    self.partkey = container.partkey</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keyword">def </span>header(self, container):</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="stringliteral">&quot;Create a TOC entry for header and footer (0 depth).&quot;</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    self.partkey = container.partkey</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    self.output = EmptyOutput()</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; </div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="keyword">def </span>createlink(self, container):</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="stringliteral">&quot;Create the link that will make the whole TOC entry.&quot;</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    labels = container.searchall(Label)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    link = Link()</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordflow">if</span> self.isanchor(labels):</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      link.url = <span class="stringliteral">&#39;#&#39;</span> + container.partkey.partkey</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <span class="keywordflow">if</span> Options.tocfor:</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        link.url = Options.tocfor + link.url</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      label = labels[0]</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      link.destination = label</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordflow">if</span> container.partkey.tocentry:</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      link.complete(container.partkey.tocentry)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keywordflow">if</span> container.partkey.titlecontents:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;      <span class="keywordflow">if</span> Options.notoclabels:</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        separator = <span class="stringliteral">u&#39;‚ÄÉ&#39;</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;      <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        separator = <span class="stringliteral">u&#39;:‚ÄÉ&#39;</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <span class="keywordflow">if</span> container.partkey.tocentry:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        link.contents.append(Constant(separator))</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      link.contents += container.partkey.titlecontents</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordflow">return</span> link</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160; </div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keyword">def </span>isanchor(self, labels):</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="stringliteral">&quot;Decide if the link is an anchor based on a set of labels.&quot;</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordflow">if</span> len(labels) == 0:</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> Options.tocfor:</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keywordflow">if</span> Options.splitpart:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keyword">def </span>__unicode__(self):</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="stringliteral">&quot;Return a printable representation.&quot;</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.partkey.tocentry:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keywordflow">return</span> <span class="stringliteral">&#39;Unnamed TOC entry&#39;</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&#39;TOC entry: &#39;</span> + self.partkey.tocentry</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">class </span>Indenter(object):</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;  <span class="stringliteral">&quot;Manages and writes indentation for the TOC.&quot;</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    self.depth = 0</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keyword">def </span>getindent(self, depth):</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    indent = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordflow">if</span> depth &gt; self.depth:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;      indent = self.openindent(depth - self.depth)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">elif</span> depth &lt; self.depth:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      indent = self.closeindent(self.depth - depth)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    self.depth = depth</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    <span class="keywordflow">return</span> Constant(indent)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <span class="keyword">def </span>openindent(self, times):</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="stringliteral">&quot;Open the indenting div a few times.&quot;</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    indent = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(times):</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      indent += <span class="stringliteral">&#39;&lt;div class=&quot;tocindent&quot;&gt;\n&#39;</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">return</span> indent</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160; </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  <span class="keyword">def </span>closeindent(self, times):</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;    <span class="stringliteral">&quot;Close the indenting div a few times.&quot;</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    indent = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(times):</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;      indent += <span class="stringliteral">&#39;&lt;/div&gt;\n&#39;</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">return</span> indent</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160; </div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="keyword">class </span>IndentedEntry(Container):</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  <span class="stringliteral">&quot;An entry with an indentation.&quot;</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160; </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    self.output = ContentsOutput()</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keyword">def </span>create(self, indent, entry):</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <span class="stringliteral">&quot;Create the indented entry.&quot;</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    self.entry = entry</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    self.contents = [indent, entry]</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  <span class="keyword">def </span>__unicode__(self):</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="stringliteral">&quot;Return a printable documentation.&quot;</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&#39;Indented &#39;</span> + unicode(self.entry)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160; </div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">class </span>TOCTree(object):</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  <span class="stringliteral">&quot;A tree that contains the full TOC.&quot;</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    self.tree = []</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    self.branches = []</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;  <span class="keyword">def </span>store(self, entry):</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="stringliteral">&quot;Place the entry in a tree of entries.&quot;</span></div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">while</span> len(self.tree) &lt; entry.partkey.level:</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;      self.tree.append(<span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span> len(self.tree) &gt; entry.partkey.level:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      self.tree = self.tree[:entry.partkey.level]</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    stem = self.findstem()</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keywordflow">if</span> len(self.tree) == 0:</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      self.branches.append(entry)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    self.tree.append(entry)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="keywordflow">if</span> stem:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;      entry.stem = stem</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      stem.branches.append(entry)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160; </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  <span class="keyword">def </span>findstem(self):</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    <span class="stringliteral">&quot;Find the stem where our next element will be inserted.&quot;</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="keywordflow">for</span> element <span class="keywordflow">in</span> reversed(self.tree):</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;      <span class="keywordflow">if</span> element:</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="keywordflow">return</span> element</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160; </div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="keyword">class </span>TOCConverter(object):</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <span class="stringliteral">&quot;A converter from elyxer.containers to TOC entries.&quot;</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  cache = dict()</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  tree = TOCTree()</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160; </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    self.indenter = Indenter()</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keyword">def </span>convertindented(self, container):</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    <span class="stringliteral">&quot;Convert a container into an indented TOC entry.&quot;</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    entry = self.convert(container)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> entry:</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> self.indent(entry)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160; </div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  <span class="keyword">def </span>indent(self, entry):</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="stringliteral">&quot;Indent a TOC entry.&quot;</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    indent = self.indenter.getindent(entry.partkey.level)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> IndentedEntry().create(indent, entry)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160; </div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keyword">def </span>convert(self, container):</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="stringliteral">&quot;Convert a container to a TOC entry.&quot;</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> container.partkey:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;      <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">if</span> container.partkey.partkey <span class="keywordflow">in</span> self.cache:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;      <span class="keywordflow">return</span> TOCConverter.cache[container.partkey.partkey]</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;    <span class="keywordflow">if</span> container.partkey.level &gt; DocumentParameters.tocdepth:</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;      <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    entry = TOCEntry().create(container)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    TOCConverter.cache[container.partkey.partkey] = entry</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    TOCConverter.tree.store(entry)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">return</span> entry</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160; </div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceelyxer_1_1util_1_1docparams_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1util_1_1docparams.xhtml">elyxer.util.docparams</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2util_2docparams_8py_source.xhtml#l00001">docparams.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1gen_1_1header_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1gen_1_1header.xhtml">elyxer.gen.header</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2gen_2header_8py_source.xhtml#l00001">header.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1ref_1_1label_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1ref_1_1label.xhtml">elyxer.ref.label</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2ref_2label_8py_source.xhtml#l00001">label.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
