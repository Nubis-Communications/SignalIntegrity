<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Helpers/LaTeX.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.17</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_4d8778b16d091b78a9d58d178624b2a8.xhtml">Helpers</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">LaTeX.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1LaTeX.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">LaTeX.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> numpy <span class="keyword">import</span> empty,sign</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">import</span> math</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1lfrac.xhtml">SignalIntegrity.Lib.Helpers.lfrac</a> <span class="keyword">import</span> lfrac</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">def </span>RationalString(val):</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    data = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keywordflow">if</span> isinstance(val,int):</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        data = str(val)</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keywordflow">elif</span> isinstance(val,float):</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Rat.xhtml">SignalIntegrity.Lib.Rat</a> <span class="keyword">import</span> Rat</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="keyword">from</span> numpy <span class="keyword">import</span> sign</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;        sn=sign(val)</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        <span class="keywordflow">if</span> sn == 0:</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&#39;0&#39;</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        signStr=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">if</span> sn == -1:</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;            val=val*-1.</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;            signStr=<span class="stringliteral">&#39;-&#39;</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        (n,d)=Rat(val)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">if</span> d==1:</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keywordflow">return</span> signStr+str(n)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">elif</span> d&lt;n:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">return</span> signStr+str(val)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="keywordflow">elif</span> d==n:</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;            <span class="keywordflow">return</span> signStr+<span class="stringliteral">&#39;1&#39;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        <span class="keywordflow">elif</span> ((d&lt;10) <span class="keywordflow">and</span> (n&lt;10)):</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;            <span class="keywordflow">return</span> signStr+lfrac(str(n),str(d))</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        <span class="comment"># check for square-root of 2</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        valsq2=val*math.sqrt(2.)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        (n,d)=Rat(valsq2)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">if</span> d&lt;n:</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            <span class="keywordflow">return</span> signStr+str(val)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">elif</span> ((d&lt;10) <span class="keywordflow">and</span> (n&lt;10)):</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            denstr=<span class="stringliteral">&#39;\\sqrt{2}&#39;</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">if</span> d != 1:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                denstr=str(d)+<span class="stringliteral">&#39;\\cdot&#39;</span>+denstr</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">return</span> signStr+lfrac(str(n),denstr)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        <span class="keywordflow">return</span> signStr+str(val)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; </div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">def </span>Matrix2Text(M):</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keywordflow">if</span> isinstance(M,list):</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        R = len(M)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">if</span> isinstance(M[0],list):</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            C = len(M[0])</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;            M2=[]</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;            M2.append(M)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;            <span class="keywordflow">return</span> Matrix2Text(M2)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        <span class="keywordflow">return</span> M</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    Result =empty(shape=(R,C)).tolist()</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R):</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C):</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            val = M[r][c]</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            data = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;            <span class="keywordflow">if</span> isinstance(val,int):</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                data = str(val)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">elif</span> isinstance(val,float):</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                data=RationalString(val)</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;            <span class="keywordflow">elif</span> isinstance(val,complex):</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                data = str(val.real)+<span class="stringliteral">&#39;j&#39;</span>+float(val.imag)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                data = val</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                <span class="keywordflow">if</span> data == <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    data = <span class="stringliteral">&#39;0&#39;</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                subscripted=data.split(<span class="stringliteral">&#39;_&#39;</span>)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                <span class="keywordflow">if</span> len(subscripted) == 2:</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;                    <span class="keywordflow">if</span> subscripted[1][0] != <span class="stringliteral">&#39;{&#39;</span> <span class="keywordflow">and</span> subscripted[1][-1] != <span class="stringliteral">&#39;}&#39;</span>:</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;                        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;                            _=int(subscripted[1])</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                            data=subscripted[0]+<span class="stringliteral">&#39;_{&#39;</span>+subscripted[1]+<span class="stringliteral">&#39;}&#39;</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;                            doublestring=subscripted[1].split(<span class="stringliteral">&#39;,&#39;</span>)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                            <span class="keywordflow">if</span> len(doublestring)==2:</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                                <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                                    _=int(doublestring[0])</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                                    _=int(doublestring[1])</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                    data=subscripted[0]+<span class="stringliteral">&#39;_{&#39;</span>+subscripted[1]+<span class="stringliteral">&#39;}&#39;</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                                <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                                    <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;            Result[r][c] = data</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">return</span> Result</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160; </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="keyword">def </span>Matrix2LaTeX(M,small=False):</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    M = Matrix2Text(M)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">if</span> isinstance(M,list):</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        R = len(M)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">if</span> isinstance(M[0],list):</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            C = len(M[0])</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            M2=[]</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            M2.append(M)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">return</span> Matrix2LaTeX(M2)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    <span class="keywordflow">if</span> R==1 <span class="keywordflow">and</span> C==1:</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        line = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">if</span> small:</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            line = <span class="stringliteral">&#39;\\left(\\begin{smallmatrix} &#39;</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            line=<span class="stringliteral">&#39;\\left(\\begin{array}{&#39;</span>+<span class="stringliteral">&#39;c&#39;</span>*C+<span class="stringliteral">&#39;} &#39;</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(R):</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        <span class="keywordflow">if</span> r &gt; 0:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;            line = line + <span class="stringliteral">&#39; \\\\ &#39;</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(C):</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            <span class="keywordflow">if</span> c&gt;0:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                line=line+<span class="stringliteral">&#39; &amp; &#39;</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            data = M[r][c]</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            line=line+data</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="keywordflow">if</span> R==1 <span class="keywordflow">and</span> C==1:</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="keywordflow">if</span> small:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            line = line + <span class="stringliteral">&#39; \\end{smallmatrix}\\right)&#39;</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            line = line + <span class="stringliteral">&#39; \\end{array}\\right)&#39;</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keywordflow">return</span> line</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160; </div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="keyword">def </span>MatrixMultiply(ML, MR):</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    ML = Matrix2Text(ML)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    MR = Matrix2Text(MR)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    rowsResult = len(ML)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    colsResult = len(MR[0])</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    Result = empty(shape=(rowsResult, colsResult)).tolist()</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(rowsResult):</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(colsResult):</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            <span class="comment"># result[r][c] = ML[r][i]*MR[i][c] for all i in cols of ML (rows of MR)</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            cell = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(MR)):</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                prod = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keywordflow">if</span> ML[r][i] == <span class="stringliteral">&#39;0&#39;</span> <span class="keywordflow">or</span> MR[i][c] == <span class="stringliteral">&#39;0&#39;</span>:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    prod = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    <span class="keywordflow">if</span> ML[r][i] == <span class="stringliteral">&#39;1&#39;</span>:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                        <span class="keywordflow">if</span> MR[i][c] == <span class="stringliteral">&#39;1&#39;</span>:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                            prod = <span class="stringliteral">&#39;1&#39;</span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;                            prod = MR[i][c]</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                    <span class="keywordflow">elif</span> MR[i][c] == <span class="stringliteral">&#39;1&#39;</span>:</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;                        prod = ML[r][i]</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;                        prod = ML[r][i] + <span class="stringliteral">&#39; \\cdot &#39;</span> + MR[i][c]</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                <span class="keywordflow">if</span> cell == <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                    cell = prod</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                    <span class="keywordflow">if</span> prod != <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                        cell = cell + <span class="stringliteral">&#39; + &#39;</span> + prod</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            <span class="keywordflow">if</span> cell == <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                cell = <span class="stringliteral">&#39;0&#39;</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            Result[r][c] = cell</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span> Result</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160; </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">def </span>SubscriptedVector(v):</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    lv=[]</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">for</span> node <span class="keywordflow">in</span> v:</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">if</span> isinstance(node,str):</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            idxs = [i <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(0, len(node)) <span class="keywordflow">if</span> node[i].isdigit()]</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            <span class="keywordflow">if</span> len(idxs)&gt;0:</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                <span class="keywordflow">if</span> idxs[0]&gt;0:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                    node=(node[0:idxs[0]]+<span class="stringliteral">&#39;_&#39;</span>+node[idxs[0]:])</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            lv.append(node)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">else</span>: lv.append(node)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">return</span> [[i] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> lv]</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1lfrac_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Helpers_1_1lfrac.xhtml">SignalIntegrity.Lib.Helpers.lfrac</a></div><div class="ttdef"><b>Definition:</b> <a href="lfrac_8py_source.xhtml#l00001">lfrac.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Rat_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Rat.xhtml">SignalIntegrity.Lib.Rat</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2Rat_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
