<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrityPages/SignalIntegrity/App/Help/elyxer-1.2.5/forks/jras-elyxer/src/elyxer/bib/tag.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.13</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_b9fdada3f2e13cef1825d6786bc9035d.xhtml">SignalIntegrityPages</a></li><li class="navelem"><a class="el" href="dir_028a9223bee22939bccc3f6c1a6cb3a3.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_5b686ebfb9be912765538ef193999c48.xhtml">App</a></li><li class="navelem"><a class="el" href="dir_4fd30fa432b1bd9f918b04bf58ad3f14.xhtml">Help</a></li><li class="navelem"><a class="el" href="dir_99d9149e1df89b2e91206bbd6265a65c.xhtml">elyxer-1.2.5</a></li><li class="navelem"><a class="el" href="dir_8eec2e1300d6de011d8246002f659316.xhtml">forks</a></li><li class="navelem"><a class="el" href="dir_48a46efab03d400ddc57ce85017e0eca.xhtml">jras-elyxer</a></li><li class="navelem"><a class="el" href="dir_a68b885dac379979dc7bf40032c2e450.xhtml">src</a></li><li class="navelem"><a class="el" href="dir_d5a55205e7b6d77c8572f365e3b0b8be.xhtml">elyxer</a></li><li class="navelem"><a class="el" href="dir_6d0c8642aa8031b475e5028d7f9dcbc3.xhtml">bib</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">tag.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceelyxer_1_1bib_1_1tag.xhtml">    1</a></span>&#160;<span class="comment">#! /usr/bin/env python</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"># -*- coding: utf-8 -*-</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160; </div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">#   eLyXer -- convert LyX source files to HTML output.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#   Copyright (C) 2009 Alex Fern√°ndez</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#   This program is free software: you can redistribute it and/or modify</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#   it under the terms of the GNU General Public License as published by</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">#   the Free Software Foundation, either version 3 of the License, or</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">#   (at your option) any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#   This program is distributed in the hope that it will be useful,</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">#   but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#   GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">#   You should have received a copy of the GNU General Public License</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">#   along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"># --end--</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"># Alex 20101027</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"># eLyXer BibTeX tag parsing</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1util_1_1trace.xhtml">elyxer.util.trace</a> <span class="keyword">import</span> Trace</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1util_1_1clone.xhtml">elyxer.util.clone</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1conf_1_1config.xhtml">elyxer.conf.config</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1parse_1_1position.xhtml">elyxer.parse.position</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1gen_1_1container.xhtml">elyxer.gen.container</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1maths_1_1formula.xhtml">elyxer.maths.formula</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1maths_1_1command.xhtml">elyxer.maths.command</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceelyxer_1_1tex_1_1texcode.xhtml">elyxer.tex.texcode</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span>BibTagParser(object):</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  <span class="stringliteral">&quot;A parser for BibTeX tags.&quot;</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160; </div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  nameseparators = [<span class="stringliteral">&#39;{&#39;</span>, <span class="stringliteral">&#39;=&#39;</span>, <span class="stringliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&#39;#&#39;</span>]</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160; </div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    self.key = <span class="keywordtype">None</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    tags = BibStylesConfig.defaulttags</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    self.tags = dict((x, BibTag().constant(tags[x])) <span class="keywordflow">for</span> x <span class="keywordflow">in</span> tags)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160; </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keyword">def </span>parse(self, pos):</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="stringliteral">&quot;Parse the entry between {}.&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    self.type = pos.globexcluding(self.nameseparators).strip()</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> pos.checkskip(<span class="stringliteral">&#39;{&#39;</span>):</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;      pos.error(<span class="stringliteral">&#39;Entry should start with {&#39;</span>)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    pos.pushending(<span class="stringliteral">&#39;}&#39;</span>)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    self.parsetags(pos)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    pos.popending(<span class="stringliteral">&#39;}&#39;</span>)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    pos.skipspace()</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160; </div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  <span class="keyword">def </span>parsetags(self, pos):</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="stringliteral">&quot;Parse all tags in the entry.&quot;</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    pos.skipspace()</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">while</span> <span class="keywordflow">not</span> pos.finished():</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;      <span class="keywordflow">if</span> pos.checkskip(<span class="stringliteral">&#39;{&#39;</span>):</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        pos.error(<span class="stringliteral">&#39;Unmatched {&#39;</span>)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;      pos.pushending(<span class="stringliteral">&#39;,&#39;</span>, <span class="keyword">True</span>)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      self.parsetag(pos)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      <span class="keywordflow">if</span> pos.checkfor(<span class="stringliteral">&#39;,&#39;</span>):</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        pos.popending(<span class="stringliteral">&#39;,&#39;</span>)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  <span class="keyword">def </span>parsetag(self, pos):</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="stringliteral">&quot;Parse a single tag.&quot;</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    (key, value) = self.getkeyvalue(pos)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> key:</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> value:</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      self.key = key</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    name = key.lower()</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    self.tags[name] = value</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span> hasattr(self, <span class="stringliteral">&#39;dissect&#39;</span> + name):</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;      dissector = getattr(self, <span class="stringliteral">&#39;dissect&#39;</span> + name)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      dissector(value.extracttext())</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> pos.finished():</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;      remainder = pos.globexcluding(<span class="stringliteral">&#39;,&#39;</span>)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      pos.error(<span class="stringliteral">&#39;Ignored &#39;</span> + remainder + <span class="stringliteral">&#39; before comma&#39;</span>)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keyword">def </span>getkeyvalue(self, pos):</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    <span class="stringliteral">&quot;Parse a string of the form key=value.&quot;</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    piece = pos.globexcluding(self.nameseparators).strip()</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    <span class="keywordflow">if</span> pos.finished():</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;      <span class="keywordflow">return</span> (piece, <span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> pos.checkskip(<span class="stringliteral">&#39;=&#39;</span>):</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      pos.error(<span class="stringliteral">&#39;Undesired character in tag name &#39;</span> + piece)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      pos.skipcurrent()</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;      <span class="keywordflow">return</span> (piece, <span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    key = piece.lower()</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    pos.skipspace()</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    value = self.parsevalue(pos)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordflow">return</span> (key, value)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160; </div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keyword">def </span>parsevalue(self, pos):</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="stringliteral">&quot;Parse the value for a tag.&quot;</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    tag = BibTag()</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    pos.skipspace()</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordflow">if</span> pos.checkfor(<span class="stringliteral">&#39;,&#39;</span>):</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;      pos.error(<span class="stringliteral">&#39;Unexpected ,&#39;</span>)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;      <span class="keywordflow">return</span> tag.error()</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    tag.parse(pos)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keywordflow">return</span> tag</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  <span class="keyword">def </span>dissectauthor(self, authortag):</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="stringliteral">&quot;Dissect the author tag into pieces.&quot;</span></div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    authorsplit = authortag.split(<span class="stringliteral">&#39; and &#39;</span>)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span> len(authorsplit) == 0:</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    authorlist = []</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">for</span> authorname <span class="keywordflow">in</span> authorsplit:</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      author = BibAuthor().parse(authorname)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;      authorlist.append(author)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    initials = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    authors = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    <span class="keywordflow">if</span> len(authorlist) == 1:</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      initials = authorlist[0].surname[0:3]</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      authors = unicode(authorlist[0])</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      <span class="keywordflow">for</span> author <span class="keywordflow">in</span> authorlist:</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        initials += author.surname[0:1]</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        authors += unicode(author) + <span class="stringliteral">&#39;, &#39;</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;      authors = authors[:-2]</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    self.tags[<span class="stringliteral">&#39;surname&#39;</span>] = BibTag().constant(authorlist[0].surname)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    self.tags[<span class="stringliteral">&#39;Sur&#39;</span>] = BibTag().constant(initials)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    self.tags[<span class="stringliteral">&#39;authors&#39;</span>] = BibTag().constant(authors)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160; </div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="keyword">def </span>dissectyear(self, yeartag):</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="stringliteral">&quot;Dissect the year tag into pieces, looking for 4 digits in a row.&quot;</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    pos = TextPosition(yeartag)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">while</span> <span class="keywordflow">not</span> pos.finished():</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      <span class="keywordflow">if</span> pos.current().isdigit():</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        number = pos.globnumber()</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        <span class="keywordflow">if</span> len(number) == 4:</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;          self.tags[<span class="stringliteral">&#39;YY&#39;</span>] = BibTag().constant(number[2:])</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;          <span class="keywordflow">return</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;      <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        pos.skipcurrent()</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160; </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <span class="keyword">def </span>dissectfile(self, filetag):</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="stringliteral">&quot;Extract the filename from elyxer.the file tag as &#39;:filename:FORMAT&#39;.&quot;</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> filetag.startswith(<span class="stringliteral">&#39;:&#39;</span>):</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    bits = filetag.split(<span class="stringliteral">&#39;:&#39;</span>)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span> len(bits) != 3:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    self.tags[<span class="stringliteral">&#39;filename&#39;</span>] = BibTag().constant(bits[1])</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    self.tags[<span class="stringliteral">&#39;format&#39;</span>] = BibTag().constant(bits[2])</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160; </div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  <span class="keyword">def </span>gettag(self, key):</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    <span class="stringliteral">&quot;Get the tag for a given key.&quot;</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> key <span class="keywordflow">in</span> self.tags:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;      <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> self.tags[key]</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160; </div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <span class="keyword">def </span>gettagtext(self, key):</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="stringliteral">&quot;Get the tag for a key as raw text.&quot;</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordflow">return</span> self.gettag(key).extracttext()</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160; </div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">class </span>BibTag(Container):</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <span class="stringliteral">&quot;A tag in a BibTeX file.&quot;</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160; </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  valueseparators = [<span class="stringliteral">&#39;{&#39;</span>, <span class="stringliteral">&#39;&quot;&#39;</span>, <span class="stringliteral">&#39;#&#39;</span>, <span class="stringliteral">&#39;}&#39;</span>]</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  stringdefs = dict()</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    self.contents = []</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    self.output = ContentsOutput()</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keyword">def </span>constant(self, text):</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="stringliteral">&quot;Initialize for a single constant.&quot;</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;    self.contents = [Constant(text)]</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="keyword">def </span>error(self):</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="stringliteral">&quot;To use when parsing resulted in an error.&quot;</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;    <span class="keywordflow">return</span> self.constant(<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  <span class="keyword">def </span>parse(self, pos):</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="stringliteral">&quot;Parse brackets or quotes at the first level.&quot;</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">while</span> <span class="keywordflow">not</span> pos.finished():</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;      self.parsetext(pos)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      <span class="keywordflow">if</span> pos.finished():</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="keywordflow">return</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;      <span class="keywordflow">elif</span> pos.checkfor(<span class="stringliteral">&#39;{&#39;</span>):</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        self.parsebracket(pos)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;      <span class="keywordflow">elif</span> pos.checkfor(<span class="stringliteral">&#39;&quot;&#39;</span>):</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        self.parsequoted(pos)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;      <span class="keywordflow">elif</span> pos.checkfor(<span class="stringliteral">&#39;#&#39;</span>):</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        self.parsehash(pos)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;      <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        pos.error(<span class="stringliteral">&#39;Unexpected character &#39;</span> + pos.current())</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        pos.skipcurrent()</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160; </div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keyword">def </span>parsetext(self, pos):</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="stringliteral">&quot;Parse a bit of text, try to substitute strings with string defs.&quot;</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    text = pos.globexcluding(self.valueseparators)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    key = text.strip()</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="keywordflow">if</span> key == <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keywordflow">if</span> key <span class="keywordflow">in</span> self.stringdefs:</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      self.add(self.stringdefs[key])</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    self.add(Constant(key))</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160; </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  <span class="keyword">def </span>add(self, piece):</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <span class="stringliteral">&quot;Add a new piece to the tag.&quot;</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    self.contents.append(piece)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160; </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  <span class="keyword">def </span>parsetex(self, pos):</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="stringliteral">&quot;Parse some TeX code.&quot;</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    tex = TeXCode()</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    tex.parse(pos)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    self.add(tex)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160; </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  <span class="keyword">def </span>parsebracket(self, pos):</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="stringliteral">&quot;Parse a {} bracket&quot;</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> pos.checkskip(<span class="stringliteral">&#39;{&#39;</span>):</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      pos.error(<span class="stringliteral">&#39;Missing opening { in bracket&#39;</span>)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    pos.pushending(<span class="stringliteral">&#39;}&#39;</span>)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    self.parsetex(pos)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    pos.popending(<span class="stringliteral">&#39;}&#39;</span>)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160; </div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  <span class="keyword">def </span>parsequoted(self, pos):</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;    <span class="stringliteral">&quot;Parse a piece of quoted text&quot;</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> pos.checkskip(<span class="stringliteral">&#39;&quot;&#39;</span>):</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      pos.error(<span class="stringliteral">&#39;Missing opening &quot; in quote&#39;</span>)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    pos.pushending(<span class="stringliteral">&#39;&quot;&#39;</span>)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    self.parsetex(pos)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    pos.popending(<span class="stringliteral">&#39;&quot;&#39;</span>)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    pos.skipspace()</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160; </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keyword">def </span>parsehash(self, pos):</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    <span class="stringliteral">&quot;Parse a hash mark #.&quot;</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> pos.checkskip(<span class="stringliteral">&#39;#&#39;</span>):</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;      pos.error(<span class="stringliteral">&#39;Missing # in hash&#39;</span>)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160; </div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  <span class="keyword">def </span>__unicode__(self):</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="stringliteral">&quot;Return a printable representation.&quot;</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&#39;BibTag: &#39;</span> + self.extracttext()</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160; </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;<span class="keyword">class </span>BibAuthor(object):</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="stringliteral">&quot;A BibTeX individual author.&quot;</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160; </div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    self.surname = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    self.firstnames = []</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160; </div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  <span class="keyword">def </span>parse(self, tag):</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="stringliteral">&quot;Parse an individual author tag.&quot;</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keywordflow">if</span> <span class="stringliteral">&#39;,&#39;</span> <span class="keywordflow">in</span> tag:</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;      self.parsecomma(tag)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      self.parsewithoutcomma(tag)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160; </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keyword">def </span>parsecomma(self, tag):</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="stringliteral">&quot;Parse an author with a comma: Python, M.&quot;</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    bits = tag.split(<span class="stringliteral">&#39;,&#39;</span>)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keywordflow">if</span> len(bits) &gt; 2:</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      Trace.error(<span class="stringliteral">&#39;Too many commas in &#39;</span> + tag)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    self.surname = bits[0].strip()</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    self.parsefirstnames(bits[1].strip())</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160; </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="keyword">def </span>parsewithoutcomma(self, tag):</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="stringliteral">&quot;Parse an author without a comma: M. Python.&quot;</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    bits = tag.rsplit(<span class="keywordtype">None</span>, 1)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">if</span> len(bits) == 0:</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;      Trace.error(<span class="stringliteral">&#39;Empty author&#39;</span>)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;      ppp()</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;    self.surname = bits[-1].strip()</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    <span class="keywordflow">if</span> len(bits) == 1:</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      <span class="keywordflow">return</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    self.parsefirstnames(bits[0].strip())</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160; </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  <span class="keyword">def </span>parsefirstnames(self, firstnames):</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="stringliteral">&quot;Parse the first name.&quot;</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    <span class="keywordflow">for</span> firstname <span class="keywordflow">in</span> firstnames.split():</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;      self.firstnames.append(firstname)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keyword">def </span>getinitial(self):</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    <span class="stringliteral">&quot;Get the main initial for the author.&quot;</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">if</span> len(self.surname) == 0:</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;      <span class="keywordflow">return</span> <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">return</span> self.surname[0].toupper()</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160; </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="keyword">def </span>__unicode__(self):</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    <span class="stringliteral">&quot;Return a printable representation.&quot;</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;    result = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    <span class="keywordflow">for</span> firstname <span class="keywordflow">in</span> self.firstnames:</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;      result += firstname + <span class="stringliteral">&#39; &#39;</span></div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keywordflow">return</span> result + self.surname</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160; </div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceelyxer_1_1util_1_1clone_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1util_1_1clone.xhtml">elyxer.util.clone</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2util_2clone_8py_source.xhtml#l00001">clone.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1tex_1_1texcode_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1tex_1_1texcode.xhtml">elyxer.tex.texcode</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2tex_2texcode_8py_source.xhtml#l00001">texcode.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1util_1_1trace_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1util_1_1trace.xhtml">elyxer.util.trace</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2util_2trace_8py_source.xhtml#l00001">trace.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1conf_1_1config_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1conf_1_1config.xhtml">elyxer.conf.config</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2conf_2config_8py_source.xhtml#l00001">config.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1parse_1_1position_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1parse_1_1position.xhtml">elyxer.parse.position</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2parse_2position_8py_source.xhtml#l00001">position.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1maths_1_1formula_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1maths_1_1formula.xhtml">elyxer.maths.formula</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2maths_2formula_8py_source.xhtml#l00001">formula.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1gen_1_1container_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1gen_1_1container.xhtml">elyxer.gen.container</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2gen_2container_8py_source.xhtml#l00001">container.py:1</a></div></div>
<div class="ttc" id="anamespaceelyxer_1_1maths_1_1command_xhtml"><div class="ttname"><a href="namespaceelyxer_1_1maths_1_1command.xhtml">elyxer.maths.command</a></div><div class="ttdef"><b>Definition:</b> <a href="forks_2jras-elyxer_2src_2elyxer_2maths_2command_8py_source.xhtml#l00001">command.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
