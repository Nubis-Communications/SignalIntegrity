<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/App/Drawing.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.5.0</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_970ef3fb0b92f0060bb9423c44cad0f7.xhtml">App</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Drawing.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1App_1_1Drawing.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">Drawing.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2021 Nubis Communications, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018-2020 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">import</span> copy</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160; </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Schematic.xhtml">SignalIntegrity.App.Schematic</a> <span class="keyword">import</span> Schematic</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1DrawingStateMachine.xhtml">SignalIntegrity.App.DrawingStateMachine</a> <span class="keyword">import</span> DrawingStateMachine</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1DeviceProperties.xhtml">SignalIntegrity.App.DeviceProperties</a> <span class="keyword">import</span> DevicePropertiesDialog</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1PartPicture.xhtml">SignalIntegrity.App.PartPicture</a> <span class="keyword">import</span> PartPicture</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Wire.xhtml">SignalIntegrity.App.Wire</a> <span class="keyword">import</span> Wire</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">class </span>Drawing(tk.Frame):</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">def </span>__init__(self,parent):</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        tk.Frame.__init__(self,parent)</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        self.parent=parent</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        self.canvas = tk.Canvas(self,relief=tk.SUNKEN,borderwidth=1,width=600,height=600)</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        self.canvas.pack(side=tk.TOP, fill=tk.BOTH, expand=tk.YES)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        self.schematic = Schematic()</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        self.deviceTearOffMenu=tk.Menu(self, tearoff=0)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        self.deviceTearOffMenu.add_command(label=<span class="stringliteral">&quot;Edit Properties&quot;</span>,command=self.EditSelectedDevice)</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        self.deviceTearOffMenu.add_command(label=<span class="stringliteral">&quot;Duplicate&quot;</span>,command=self.DuplicateSelectedDevice)</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        self.deviceTearOffMenu.add_command(label=<span class="stringliteral">&quot;Delete&quot;</span>,command=self.DeleteSelectedDevice)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        self.deviceTearOffMenu.add_command(label=<span class="stringliteral">&#39;Convert&#39;</span>,command=self.ConvertSelectedDevice)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        self.canvasTearOffMenu=tk.Menu(self, tearoff=0)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        self.canvasTearOffMenu.add_command(label=<span class="stringliteral">&#39;Add Part&#39;</span>,command=self.parent.onAddPart)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        self.canvasTearOffMenu.add_command(label=<span class="stringliteral">&#39;Add Wire&#39;</span>,command=self.parent.onAddWire)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        self.canvasTearOffMenu.add_command(label=<span class="stringliteral">&#39;Add Port&#39;</span>,command=self.parent.onAddPort)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        self.wireTearOffMenu=tk.Menu(self, tearoff=0)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        self.wireTearOffMenu.add_command(label=<span class="stringliteral">&quot;Delete Vertex&quot;</span>,command=self.DeleteSelectedVertex)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        self.wireTearOffMenu.add_command(label=<span class="stringliteral">&quot;Duplicate Vertex&quot;</span>,command=self.DuplicateSelectedVertex)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        self.wireTearOffMenu.add_command(label=<span class="stringliteral">&quot;Delete Wire&quot;</span>,command=self.DeleteSelectedWire)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        self.multipleSelectionsTearOffMenu=tk.Menu(self, tearoff=0)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        self.multipleSelectionsTearOffMenu.add_command(label=<span class="stringliteral">&quot;Cut Selected&quot;</span>,command=self.CutMultipleSelections)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        self.multipleSelectionsTearOffMenu.add_command(label=<span class="stringliteral">&quot;Delete Selected&quot;</span>,command=self.DeleteMultipleSelections)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        self.multipleSelectionsTearOffMenu.add_command(label=<span class="stringliteral">&quot;Duplicate Selected&quot;</span>,command=self.DuplicateMultipleSelections)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        self.stateMachine = DrawingStateMachine(self)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keyword">def </span>NearestGridCoordinate(self,x,y):</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        drawingPropertiesProject=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.DrawingProperties&#39;</span>]</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        grid=drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>]</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        originx=drawingPropertiesProject[<span class="stringliteral">&#39;Originx&#39;</span>]</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        originy=drawingPropertiesProject[<span class="stringliteral">&#39;Originy&#39;</span>]</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">return</span> (int(round(float(x)/grid))-originx,int(round(float(y)/grid))-originy)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    <span class="keyword">def </span>AugmentorToGridCoordinate(self,x,y):</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        drawingPropertiesProject=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.DrawingProperties&#39;</span>]</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        grid=drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>]</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        originx=drawingPropertiesProject[<span class="stringliteral">&#39;Originx&#39;</span>]</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        originy=drawingPropertiesProject[<span class="stringliteral">&#39;Originy&#39;</span>]</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        (nearestGridx,nearestGridy)=self.NearestGridCoordinate(x,y)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">return</span> (float(x)/grid-originx-nearestGridx,float(y)/grid-originy-nearestGridy)</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    <span class="keyword">def </span>DrawSchematic(self,canvas=None):</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        <span class="keywordflow">if</span> canvas <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            canvas=self.canvas</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            canvas.delete(tk.ALL)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        <span class="keywordflow">if</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a> <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;            <span class="keywordflow">return</span> canvas</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        drawingPropertiesProject=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.DrawingProperties&#39;</span>]</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> canvas <span class="keywordflow">is</span> <span class="keywordtype">None</span> <span class="keywordflow">and</span> hasattr(self, <span class="stringliteral">&#39;Drawing&#39;</span>):</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            drawingPropertiesProject[<span class="stringliteral">&#39;Geometry&#39;</span>]=self.root.geometry()</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        grid=drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>]</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        originx=drawingPropertiesProject[<span class="stringliteral">&#39;Originx&#39;</span>]</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        originy=drawingPropertiesProject[<span class="stringliteral">&#39;Originy&#39;</span>]</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        SignalIntegrity.App.Project.EvaluateEquations()</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        schematicPropertiesList=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables&#39;</span>].DisplayStrings(<span class="keyword">True</span>,<span class="keyword">False</span>,<span class="keyword">False</span>)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        V=len(schematicPropertiesList)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        locations=[(0+7,0+PartPicture.textSpacing*(v+1)+3) <span class="keywordflow">for</span> v <span class="keywordflow">in</span> range(V)]</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        <span class="keywordflow">for</span> v <span class="keywordflow">in</span> range(V):</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            canvas.create_text(locations[v][0],locations[v][1],text=schematicPropertiesList[v],anchor=<span class="stringliteral">&#39;sw&#39;</span>,fill=<span class="stringliteral">&#39;black&#39;</span>)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        devicePinConnectedList=self.schematic.DevicePinConnectedList()</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        numPortsFound=0</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        foundAPort=<span class="keyword">False</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        foundASource=<span class="keyword">False</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        foundAnOutput=<span class="keyword">False</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        foundSomething=<span class="keyword">False</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        foundAMeasure=<span class="keyword">False</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        foundAStim=<span class="keyword">False</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        foundAnUnknown=<span class="keyword">False</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        foundASystem=<span class="keyword">False</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        foundACalibration=<span class="keyword">False</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        foundANetworkAnalyzerModel=<span class="keyword">False</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        foundAWaveform=<span class="keyword">False</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="keywordflow">for</span> deviceIndex <span class="keywordflow">in</span> range(len(self.schematic.deviceList)):</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            device = self.schematic.deviceList[deviceIndex]</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="keywordflow">if</span> device[<span class="stringliteral">&#39;element_state&#39;</span>] != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                <span class="keywordflow">if</span> device[<span class="stringliteral">&#39;element_state&#39;</span>].GetValue() <span class="keywordflow">in</span> [<span class="stringliteral">&#39;thru&#39;</span>,<span class="stringliteral">&#39;thru_wires&#39;</span>]:</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Device.xhtml">SignalIntegrity.App.Device</a> <span class="keyword">import</span> DeviceThru</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    element_state=device[<span class="stringliteral">&#39;element_state&#39;</span>].GetValue()</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    device=DeviceThru.ConvertDeviceToThru(device)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="keywordflow">if</span> element_state == <span class="stringliteral">&#39;thru_wires&#39;</span>:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1PartProperty.xhtml">SignalIntegrity.App.PartProperty</a> <span class="keyword">import</span> PartPropertyElementState</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                        device.AddPartProperty(PartPropertyElementState(element_state))</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;            foundSomething=<span class="keyword">True</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;            devicePinsConnected=devicePinConnectedList[deviceIndex]</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            device.DrawDevice(canvas,grid,originx,originy,devicePinsConnected)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;            deviceType = device[<span class="stringliteral">&#39;partname&#39;</span>].GetValue()</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            <span class="keywordflow">if</span>  deviceType == <span class="stringliteral">&#39;Port&#39;</span>:</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                foundAPort = <span class="keyword">True</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                numPortsFound=numPortsFound+1</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            <span class="keywordflow">elif</span> deviceType <span class="keywordflow">in</span> [<span class="stringliteral">&#39;Output&#39;</span>,<span class="stringliteral">&#39;DifferentialVoltageOutput&#39;</span>,<span class="stringliteral">&#39;CurrentOutput&#39;</span>,<span class="stringliteral">&#39;EyeProbe&#39;</span>,<span class="stringliteral">&#39;DifferentialEyeProbe&#39;</span>]:</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                foundAnOutput = <span class="keyword">True</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="keywordflow">elif</span> deviceType <span class="keywordflow">in</span> [<span class="stringliteral">&#39;EyeWaveform&#39;</span>,<span class="stringliteral">&#39;Waveform&#39;</span>]:</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                foundAWaveform = <span class="keyword">True</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="keywordflow">elif</span> deviceType == <span class="stringliteral">&#39;Stim&#39;</span>:</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                foundAStim = <span class="keyword">True</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;            <span class="keywordflow">elif</span> deviceType == <span class="stringliteral">&#39;Measure&#39;</span>:</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                foundAMeasure = <span class="keyword">True</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;            <span class="keywordflow">elif</span> deviceType == <span class="stringliteral">&#39;System&#39;</span>:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                foundASystem = <span class="keyword">True</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            <span class="keywordflow">elif</span> deviceType == <span class="stringliteral">&#39;Unknown&#39;</span>:</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                foundAnUnknown = <span class="keyword">True</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">elif</span> device.netlist[<span class="stringliteral">&#39;DeviceName&#39;</span>] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;voltagesource&#39;</span>,<span class="stringliteral">&#39;currentsource&#39;</span>,<span class="stringliteral">&#39;networkanalyzerport&#39;</span>]:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                foundASource = <span class="keyword">True</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            <span class="keywordflow">elif</span> device.netlist[<span class="stringliteral">&#39;DeviceName&#39;</span>] == <span class="stringliteral">&#39;calibration&#39;</span>:</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                foundACalibration=<span class="keyword">True</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">elif</span> deviceType == <span class="stringliteral">&#39;NetworkAnalyzerModel&#39;</span>:</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                foundANetworkAnalyzerModel=<span class="keyword">True</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">for</span> wireProject <span class="keywordflow">in</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic.Wires&#39;</span>]:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            foundSomething=<span class="keyword">True</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            wireProject.DrawWire(canvas,grid,originx,originy)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="keywordflow">for</span> dot <span class="keywordflow">in</span> self.schematic.DotList():</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            size=grid/8</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            canvas.create_oval((dot[0]+originx)*grid-size,(dot[1]+originy)*grid-size,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                    (dot[0]+originx)*grid+size,(dot[1]+originy)*grid+size,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                    fill=<span class="stringliteral">&#39;black&#39;</span>,outline=<span class="stringliteral">&#39;black&#39;</span>)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        canSimulate = ((foundASource <span class="keywordflow">and</span> foundAnOutput) <span class="keywordflow">or</span> foundAWaveform) <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAPort <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAStim <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAMeasure <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnUnknown <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundASystem <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundACalibration</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        canCalculateSParameters = foundAPort <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnOutput <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAMeasure <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAStim <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnUnknown <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundASystem <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundACalibration <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAWaveform</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        canRLGC=canCalculateSParameters <span class="keywordflow">and</span> (numPortsFound == 2)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        canVirtualProbe = foundAStim <span class="keywordflow">and</span> foundAnOutput <span class="keywordflow">and</span> foundAMeasure <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAPort <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundASource <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnUnknown <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundASystem <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundACalibration</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        canDeembed = foundAPort <span class="keywordflow">and</span> foundAnUnknown <span class="keywordflow">and</span> foundASystem <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAStim <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAMeasure <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnOutput <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundACalibration <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAWaveform</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        canCalculateErrorTerms = foundACalibration <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundASource <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnOutput <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAPort <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAStim <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAMeasure <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnUnknown <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundASystem <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAWaveform</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        canSimulateNetworkAnalyzerModel = foundANetworkAnalyzerModel <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAPort <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnOutput <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAMeasure <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAStim <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAnUnknown <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundASystem <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundACalibration  <span class="keywordflow">and</span> <span class="keywordflow">not</span> foundAWaveform</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        canCalculateSParametersFromNetworkAnalyzerModel = canSimulateNetworkAnalyzerModel</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        canCalculate = canSimulate <span class="keywordflow">or</span> canCalculateSParameters <span class="keywordflow">or</span> canVirtualProbe <span class="keywordflow">or</span> canDeembed <span class="keywordflow">or</span> canCalculateErrorTerms <span class="keywordflow">or</span> canSimulateNetworkAnalyzerModel <span class="keywordflow">or</span> canCalculateSParametersFromNetworkAnalyzerModel</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        canGenerateTransferMatrices = (canSimulate <span class="keywordflow">and</span> foundASource <span class="keywordflow">and</span> foundAnOutput) <span class="keywordflow">or</span> canVirtualProbe</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        self.parent.SimulateDoer.Activate(canSimulate <span class="keywordflow">or</span> canSimulateNetworkAnalyzerModel)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        self.parent.TransferParametersDoer.Activate(canGenerateTransferMatrices)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        self.parent.CalculateDoer.Activate(canCalculate)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        self.parent.CalculateSParametersDoer.Activate(canCalculateSParameters <span class="keywordflow">or</span> canCalculateSParametersFromNetworkAnalyzerModel)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        self.parent.RLGCDoer.Activate(canRLGC)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        self.parent.VirtualProbeDoer.Activate(canVirtualProbe)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        self.parent.DeembedDoer.Activate(canDeembed)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        self.parent.CalculateErrorTermsDoer.Activate(canCalculateErrorTerms)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        self.parent.CalculateSParametersFromNetworkAnalyzerModelDoer.Activate(canCalculateSParametersFromNetworkAnalyzerModel)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        self.parent.SimulateNetworkAnalyzerModelDoer.Activate(canSimulateNetworkAnalyzerModel)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        self.parent.ClearProjectDoer.Activate(foundSomething)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        self.parent.ExportNetListDoer.Activate(foundSomething)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        self.parent.ExportTpXDoer.Activate(foundSomething)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        self.parent.ExportPngDoer.Activate(foundSomething)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        self.parent.PanDoer.Activate(foundSomething)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        self.parent.ZoomInDoer.Activate(foundSomething)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        self.parent.ZoomOutDoer.Activate(foundSomething)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordflow">return</span> canvas</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keyword">def </span>EditSelectedDevice(self):</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keywordflow">if</span> self.stateMachine.state==<span class="stringliteral">&#39;DeviceSelected&#39;</span>:</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            dpe=DevicePropertiesDialog(self.parent,self.deviceSelected)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;            <span class="keywordflow">if</span> dpe.result != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;                self.deviceSelected = dpe.result</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;                self.schematic.deviceList[self.deviceSelectedIndex] = self.deviceSelected</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;                self.schematic.Consolidate()</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                self.DrawSchematic()</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                self.parent.history.Event(<span class="stringliteral">&#39;edit device&#39;</span>)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <span class="keyword">def </span>DuplicateSelectedDevice(self):</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordflow">if</span> self.stateMachine.state==<span class="stringliteral">&#39;DeviceSelected&#39;</span>:</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            self.partLoaded=copy.deepcopy(self.deviceSelected)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            <span class="keywordflow">if</span> self.partLoaded[<span class="stringliteral">&#39;partname&#39;</span>].GetValue() == <span class="stringliteral">&#39;Port&#39;</span>:</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                portNumberList=[]</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                <span class="keywordflow">for</span> device <span class="keywordflow">in</span> self.schematic.deviceList:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keywordflow">if</span> device[<span class="stringliteral">&#39;partname&#39;</span>].GetValue() == <span class="stringliteral">&#39;Port&#39;</span>:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        portNumberList.append(int(device[<span class="stringliteral">&#39;pn&#39;</span>].GetValue()))</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                portNumber=1</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                <span class="keywordflow">while</span> portNumber <span class="keywordflow">in</span> portNumberList:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    portNumber=portNumber+1</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                self.partLoaded[<span class="stringliteral">&#39;pn&#39;</span>].SetValueFromString(str(portNumber))</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;            <span class="keywordflow">elif</span> self.partLoaded[<span class="stringliteral">&#39;partname&#39;</span>].GetValue() == <span class="stringliteral">&#39;NetworkAnalyzerStimulus&#39;</span>:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                portNumberList=[]</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                <span class="keywordflow">for</span> device <span class="keywordflow">in</span> self.schematic.deviceList:</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    <span class="keywordflow">if</span> device[<span class="stringliteral">&#39;partname&#39;</span>].GetValue() == <span class="stringliteral">&#39;NetworkAnalyzerStimulus&#39;</span>:</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                        portNumberList.append(int(device[<span class="stringliteral">&#39;pn&#39;</span>].GetValue()))</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                portNumber=1</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="keywordflow">while</span> portNumber <span class="keywordflow">in</span> portNumberList:</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                    portNumber=portNumber+1</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                self.partLoaded[<span class="stringliteral">&#39;pn&#39;</span>].SetValueFromString(str(portNumber))</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            defaultProperty = self.partLoaded[<span class="stringliteral">&#39;defref&#39;</span>]</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">if</span> defaultProperty != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                defaultPropertyValue = defaultProperty.GetValue()</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                uniqueReferenceDesignator = self.schematic.NewUniqueReferenceDesignator(defaultPropertyValue)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                <span class="keywordflow">if</span> uniqueReferenceDesignator != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                    self.partLoaded[<span class="stringliteral">&#39;ref&#39;</span>].SetValueFromString(uniqueReferenceDesignator)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            self.stateMachine.PartLoaded()</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">def </span>DeleteSelected(self):</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="keywordflow">if</span> self.stateMachine.state==<span class="stringliteral">&#39;WireSelected&#39;</span>:</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;            self.DeleteSelectedWire()</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        <span class="keywordflow">elif</span> self.stateMachine.state==<span class="stringliteral">&#39;DeviceSelected&#39;</span>:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;            self.DeleteSelectedDevice()</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <span class="keywordflow">elif</span> self.stateMachine.state==<span class="stringliteral">&#39;Multiple Selections&#39;</span>:</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            self.DeleteMultipleSelections()</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keyword">def </span>DeleteSelectedDevice(self):</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        del self.schematic.deviceList[self.deviceSelectedIndex]</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        self.stateMachine.Nothing()</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        self.parent.history.Event(<span class="stringliteral">&#39;delete device&#39;</span>)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    <span class="keyword">def </span>ConvertSelectedDevice(self):</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        self.parent.onConvertPart()</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keyword">def </span>DeleteSelectedVertex(self):</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        del <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic.Wires&#39;</span>][self.w][<span class="stringliteral">&#39;Vertices&#39;</span>][self.v]</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        self.stateMachine.Nothing()</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        self.parent.history.Event(<span class="stringliteral">&#39;delete vertex&#39;</span>)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keyword">def </span>DuplicateSelectedVertex(self):</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        wireProject=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic.Wires&#39;</span>][self.w]</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        vertexProject=copy.deepcopy(wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>][self.v])</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        self.stateMachine.UnselectAllWires()</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>]=wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>][:self.v]+[vertexProject]+wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>][self.v:]</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        self.stateMachine.WireSelected()</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">def </span>DeleteSelectedWire(self):</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        del <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic.Wires&#39;</span>][self.w]</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        self.stateMachine.Nothing()</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        self.parent.history.Event(<span class="stringliteral">&#39;delete wire&#39;</span>)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keyword">def </span>DeleteMultipleSelections(self,advanceStateMachine=True):</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        newDeviceList=[]</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        <span class="keywordflow">for</span> device <span class="keywordflow">in</span> self.schematic.deviceList:</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> device.selected:</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                newDeviceList.append(copy.deepcopy(device))</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        newWireListProject=[]</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">for</span> wireProject <span class="keywordflow">in</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic.Wires&#39;</span>]:</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;            newWire= []</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;            <span class="keywordflow">for</span> vertexProject <span class="keywordflow">in</span> wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>]:</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> vertexProject[<span class="stringliteral">&#39;Selected&#39;</span>]:</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                    newWire.append(copy.deepcopy(vertexProject))</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;            <span class="keywordflow">if</span> len(newWire) &gt;= 2:</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                newWireProject=Wire()</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                newWireProject[<span class="stringliteral">&#39;Vertices&#39;</span>]=newWire</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                newWireListProject.append(copy.deepcopy(newWireProject))</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic.Wires&#39;</span>]=newWireListProject</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        self.schematic.deviceList=newDeviceList</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        <span class="keywordflow">if</span> advanceStateMachine:</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;            self.stateMachine.Nothing()</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        self.parent.history.Event(<span class="stringliteral">&#39;delete selections&#39;</span>)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keyword">def </span>CutMultipleSelections(self):</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        <span class="keywordflow">if</span> self.stateMachine.state==<span class="stringliteral">&#39;Multiple Selections&#39;</span>:</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;            self.DuplicateMultipleSelections(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            self.DeleteMultipleSelections(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            self.stateMachine.MultipleItemsOnClipboard()</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keyword">def </span>DuplicateSelected(self):</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">if</span> self.stateMachine.state==<span class="stringliteral">&#39;Multiple Selections&#39;</span>:</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            self.DuplicateMultipleSelections()</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">elif</span> self.stateMachine.state==<span class="stringliteral">&#39;DeviceSelected&#39;</span>:</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            self.DuplicateSelectedDevice()</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    <span class="keyword">def </span>DuplicateMultipleSelections(self,advanceStateMachine=True):</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordflow">if</span> self.stateMachine.state==<span class="stringliteral">&#39;Multiple Selections&#39;</span>:</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            self.devicesToDuplicate=[]</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            originSet=<span class="keyword">False</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            originx=0</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            originy=0</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            <span class="keywordflow">for</span> device <span class="keywordflow">in</span> self.schematic.deviceList:</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                <span class="keywordflow">if</span> device.selected:</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                    self.devicesToDuplicate.append(copy.deepcopy(device))</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                    <span class="keywordflow">if</span> <span class="keywordflow">not</span> originSet:</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                        originSet=<span class="keyword">True</span></div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                        originx=device.partPicture.current.origin[0]</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                        originy=device.partPicture.current.origin[1]</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                        originx=min(originx,device.partPicture.current.origin[0])</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        originy=min(originy,device.partPicture.current.origin[1])</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            self.wiresToDuplicate=[]</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            wireListProject=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic.Wires&#39;</span>]</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;            <span class="keywordflow">for</span> wireProject <span class="keywordflow">in</span> wireListProject:</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                newWireProject = Wire()</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                numVerticesSelected = 0</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                firstVertexSelected = -1</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                lastVertexSelected=-1</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <span class="keywordflow">for</span> vertexIndex <span class="keywordflow">in</span> range(len(wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>])):</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    vertexProject=wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>][vertexIndex]</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <span class="keywordflow">if</span> vertexProject[<span class="stringliteral">&#39;Selected&#39;</span>]:</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                        numVerticesSelected=numVerticesSelected+1</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                        <span class="keywordflow">if</span> firstVertexSelected == -1:</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                            firstVertexSelected = vertexIndex</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                        lastVertexSelected = vertexIndex</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                <span class="keywordflow">if</span> numVerticesSelected &gt;= 2:</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                    <span class="keywordflow">for</span> vertexIndex <span class="keywordflow">in</span> range(len(wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>])):</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                        <span class="keywordflow">if</span> vertexIndex &gt;= firstVertexSelected <span class="keywordflow">and</span> vertexIndex &lt;= lastVertexSelected:</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                            vertexProject=wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>][vertexIndex]</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                            newWireProject[<span class="stringliteral">&#39;Vertices&#39;</span>].append(copy.deepcopy(vertexProject))</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                            vertexCoord=vertexProject[<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                            <span class="keywordflow">if</span> <span class="keywordflow">not</span> originSet:</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                originSet=<span class="keyword">True</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                originx=vertexCoord[0]</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                originy=vertexCoord[1]</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                                originx=min(originx,vertexCoord[0])</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                                originy=min(originy,vertexCoord[1])</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">if</span> len(newWireProject[<span class="stringliteral">&#39;Vertices&#39;</span>]) &gt;= 2:</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    self.wiresToDuplicate.append(newWireProject)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> originSet:</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                <span class="keywordflow">return</span></div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="comment"># originx and originy are the upper leftmost coordinates in the selected stuff</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;            <span class="keywordflow">for</span> device <span class="keywordflow">in</span> self.devicesToDuplicate:</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                device.partPicture.current.SetOrigin((device.partPicture.current.origin[0]-originx,device.partPicture.current.origin[1]-originy))</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">for</span> wireProject <span class="keywordflow">in</span> self.wiresToDuplicate:</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                <span class="keywordflow">for</span> vertexProject <span class="keywordflow">in</span> wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>]:</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                    vertexCoord=vertexProject[<span class="stringliteral">&#39;Coord&#39;</span>]</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    vertexProject[<span class="stringliteral">&#39;Coord&#39;</span>]=(vertexCoord[0]-originx,vertexCoord[1]-originy)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            <span class="keywordflow">if</span> advanceStateMachine:</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                self.stateMachine.MultipleItemsOnClipboard()</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">def </span>InitFromProject(self):</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        drawingProperties=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.DrawingProperties&#39;</span>]</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        <span class="comment"># the canvas and geometry must be set prior to the remainder of the schematic initialization</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="comment"># otherwise it will not be the right size.  In the past, the xml happened to have the drawing</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="comment"># properties first, which made it work, but it was an accident.</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="comment">#self.canvas.config(width=drawingProperties[&#39;Width&#39;],height=drawingProperties[&#39;Height&#39;])</span></div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        self.parent.root.geometry(drawingProperties[<span class="stringliteral">&#39;Geometry&#39;</span>].split(<span class="stringliteral">&#39;+&#39;</span>)[0])</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        self.schematic = Schematic()</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        self.schematic.InitFromProject()</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        self.stateMachine = DrawingStateMachine(self)</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Device_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Device.xhtml">SignalIntegrity.App.Device</a></div><div class="ttdef"><b>Definition:</b> <a href="App_2Device_8py_source.xhtml#l00001">Device.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1PartProperty_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1PartProperty.xhtml">SignalIntegrity.App.PartProperty</a></div><div class="ttdef"><b>Definition:</b> <a href="PartProperty_8py_source.xhtml#l00001">PartProperty.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Project_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div><div class="ttdef"><b>Definition:</b> <a href="Project_8py_source.xhtml#l00001">Project.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1DrawingStateMachine_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1DrawingStateMachine.xhtml">SignalIntegrity.App.DrawingStateMachine</a></div><div class="ttdef"><b>Definition:</b> <a href="DrawingStateMachine_8py_source.xhtml#l00001">DrawingStateMachine.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1DeviceProperties_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1DeviceProperties.xhtml">SignalIntegrity.App.DeviceProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="DeviceProperties_8py_source.xhtml#l00001">DeviceProperties.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1PartPicture_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1PartPicture.xhtml">SignalIntegrity.App.PartPicture</a></div><div class="ttdef"><b>Definition:</b> <a href="PartPicture_8py_source.xhtml#l00001">PartPicture.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Wire_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Wire.xhtml">SignalIntegrity.App.Wire</a></div><div class="ttdef"><b>Definition:</b> <a href="Wire_8py_source.xhtml#l00001">Wire.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Schematic_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Schematic.xhtml">SignalIntegrity.App.Schematic</a></div><div class="ttdef"><b>Definition:</b> <a href="Schematic_8py_source.xhtml#l00001">Schematic.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
