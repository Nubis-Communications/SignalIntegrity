<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/SParameters/SParameterManipulation.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.3.2</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_7a5914954a2ba190c03fc4996ae21a6a.xhtml">SParameters</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SParameterManipulation.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral"> s-parameter manipulations base class</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> numpy <span class="keyword">import</span> linalg,dot,diag,array</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">import</span> math</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml">SParameterManipulation</a>(object):</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;Class for manipulations on s-parameters involving passivity, causality, etc.&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="comment"># locations where the largest singular value exceeds 1 are locations</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="comment"># where there are passivity violations</span></div>
<div class="line"><a name="l00028"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml">   28</a></span>&#160;    <span class="keyword">def </span>_LargestSingularValues(self):</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        <span class="keywordflow">return</span> [linalg.svd(m,full_matrices=<span class="keyword">False</span>,compute_uv=<span class="keyword">False</span>)[0]</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;            <span class="keywordflow">for</span> m <span class="keywordflow">in</span> self.m_d]</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a39c856ddb77d77db3db1944a18fe6009">EnforcePassivity</a>(self,maxSingularValue=1.):</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Enforces passivity on the s-parameters.</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral">        @param maxSingularValue (optional, defaults to 1) float maximumum singular value allowed</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">        Enforces passivity by clipping all singular values to a maximum value.</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">        the optional maximum value allows for adjusting devices with gain to a maximum</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">        value.  For passive devices, the maximum singular value is the default value of 1.</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.m_d)):</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;            (u,s,vh)=linalg.svd(self.m_d[n],full_matrices=1,compute_uv=1)</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;            <span class="keywordflow">for</span> si <span class="keywordflow">in</span> range(len(s)): s[si]=min(maxSingularValue,s[si])</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a39c856ddb77d77db3db1944a18fe6009">   42</a></span>&#160;            self.m_d[n]=dot(u,dot(diag(s),vh)).tolist()</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a4bb07518fdccfa71483dc4e98eb83083">IsCausal</a>(self,threshold=0.):</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Checks whether the s-parameters are causal.</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral">        @param threshold (optional, defaults to 0) positive float threshold for causality detection</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="stringliteral">        @return boolean True if the absolute value of all values in the impulse response</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="stringliteral">        of each s-parameter before time zero are less</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="stringliteral">        than the threshold provided otherwise returns False.</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="stringliteral">        This is checked by generating the impulse response corresponding to the frequency</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="stringliteral">        response of each s-parameter from and to port combination.</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        <span class="keywordflow">for</span> toPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;            <span class="keywordflow">for</span> fromPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                fr=self.FrequencyResponse(toPort,fromPort)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                ir=fr.ImpulseResponse()</div>
<div class="line"><a name="l00058"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a4bb07518fdccfa71483dc4e98eb83083">   58</a></span>&#160;                <span class="keywordflow">if</span> ir <span class="keywordflow">is</span> <span class="keywordtype">None</span>: <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                    t=ir.td</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                    Ts=1./ir.td.Fs</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                    <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(t)):</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                        <span class="keywordflow">if</span> t[k]&lt;=-Ts:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                            <span class="keywordflow">if</span> abs(ir[k])&gt;threshold:</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                                <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ab0534e987c24d15ff3bcba7ef74ec1d1">EnforceCausality</a>(self):</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Enforces causality by setting all of the values before time zero in the impulse</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="stringliteral">        responses of the s-parameters to zero.&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">for</span> toPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">for</span> fromPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                fr=self.FrequencyResponse(toPort+1,fromPort+1)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                ir=fr.ImpulseResponse()</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                <span class="keywordflow">if</span> ir <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00075"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ab0534e987c24d15ff3bcba7ef74ec1d1">   75</a></span>&#160;                    t=ir.td; Ts=1./ir.td.Fs</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                    <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(t)):</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                        <span class="keywordflow">if</span> t[k]&lt;=-Ts: ir[k]=0.</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    fr=ir.FrequencyResponse()</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                    frv=fr.Response()</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                    <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(frv)): self.m_d[n][toPort][fromPort]=frv[n]</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ac1a7d5f1f86019b82b3d88b59c25e3a8">WaveletDenoise</a>(self,threshold=0.00001):</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Denoises the s-parameters</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="stringliteral">        @param threshold (optional) float threshold for the wavelets (defaults to 0.00001).</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="stringliteral">        Denoises the s-parameter by computing the wavelet transform of the impulse response</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="stringliteral">        for each s-parameter from and to port combination and keeping only the wavelets whoe</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="stringliteral">        absolute value is above the threshold.&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Wavelets.xhtml">SignalIntegrity.Lib.Wavelets</a> <span class="keyword">import</span> WaveletDaubechies4</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        w=WaveletDaubechies4()</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">for</span> toPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            <span class="keywordflow">for</span> fromPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;                fr=self.FrequencyResponse(toPort+1,fromPort+1)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;                ir=fr.ImpulseResponse()</div>
<div class="line"><a name="l00094"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ac1a7d5f1f86019b82b3d88b59c25e3a8">   94</a></span>&#160;                <span class="keywordflow">if</span> ir <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;                    irl=len(ir)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;                    nirl=int(pow(2.,math.ceil(math.log(float(irl))/math.log(2.))))</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;                    ir=ir._Pad(nirl)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                    y=ir.Values()</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                    Y=w.DWT(y)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                    Y=[0. <span class="keywordflow">if</span> abs(Yv) &lt;= threshold <span class="keywordflow">else</span> Yv <span class="keywordflow">for</span> Yv <span class="keywordflow">in</span> Y]</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                    y=w.IDWT(Y)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                    <span class="comment">#ir.x=y</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;                    <span class="comment"># @todo get rid of this hack</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                    ir.__init__(ir.TimeDescriptor(),y)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;                    ir=ir._Pad(irl)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                    fr=ir.FrequencyResponse()</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                    frv=fr.Response()</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                    <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(frv)):</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                        self.m_d[n][toPort][fromPort]=frv[n]</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a979f42e9c8bf72ce90999a24da8a839d">PortReorder</a>(self,pr):</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Reorders the ports to port ordering of the port numbers supplied.</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="stringliteral">        @param pr list of integer one-based port numbers</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="stringliteral">        @return new instance of reordered s-parameters</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="keyword">import</span> copy</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        sp=copy.deepcopy(self)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        pr=[p-1 <span class="keywordflow">for</span> p <span class="keywordflow">in</span> pr] <span class="comment"># convert to 0 based indices</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        sp.m_d=[[[sp.m_d[n][pr[r]][pr[c]]</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(pr))]</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(pr))]</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(sp.m_d))]</div>
<div class="line"><a name="l00123"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a979f42e9c8bf72ce90999a24da8a839d">  123</a></span>&#160;        sp.m_P=len(pr)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        <span class="keywordflow">return</span> sp</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a4976e854764ebdc65229e9f99f68f577">DetermineImpulseResponseLength</a>(self,epsilon=1e-6,allLengths=False):</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;determines the impulse response lengths of the ports by comparing impulse response to threshold.</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="stringliteral">        @param epsilon (optional, defaults to 1e-6) absolute threshold on impulse response.</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="stringliteral">        @param allLengths (optional, defaults to False) whether to return the lengths of each port combination</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="stringliteral">        @return returns a tuple containining (negativeTime,positiveTime) if allLengths is false (default) containing</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="stringliteral">        the most negative time and most positive time for all impulse responses, otherwise if allLengths is true, it returns</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="stringliteral">        a list of list of tuples as stated for each impulse response.</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        lengths=[[(<span class="keywordtype">None</span>,<span class="keywordtype">None</span>) <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.m_P)] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.m_P)]</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="keywordflow">for</span> toPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            <span class="keywordflow">for</span> fromPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                (negativeTimeLimit,positiveTimeLimit)=(<span class="keywordtype">None</span>,<span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                fr=self.FrequencyResponse(toPort+1,fromPort+1)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                ir=fr.ImpulseResponse()</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                <span class="keywordflow">if</span> ir <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                    t=ir.td</div>
<div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a4976e854764ebdc65229e9f99f68f577">  141</a></span>&#160;                    <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(t)):</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                        <span class="keywordflow">if</span> t[k]&lt;0.:</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                            <span class="keywordflow">if</span> negativeTimeLimit <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                <span class="keywordflow">if</span> abs(ir[k])&gt;epsilon:</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                    negativeTimeLimit=t[k]</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                            <span class="keywordflow">if</span> abs(ir[k])&gt;epsilon:</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                positiveTimeLimit=t[k]</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                    <span class="keywordflow">if</span> negativeTimeLimit <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                        negativeTimeLimit=0.0</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                    <span class="keywordflow">if</span> positiveTimeLimit <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        positiveTimeLimit=0.0</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                    maxlength=ir.td.K/ir.td.Fs/2.</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    negativeTimeLimit=max(-maxlength,math.floor(negativeTimeLimit*ir.td.Fs)/ir.td.Fs)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;                    positiveTimeLimit=min(maxlength,math.ceil(positiveTimeLimit*ir.td.Fs)/ir.td.Fs)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                    lengths[toPort][fromPort]=(negativeTimeLimit,positiveTimeLimit)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="keywordflow">if</span> allLengths: <span class="keywordflow">return</span> lengths</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        negativeLengths=[lengths[toPort][fromPort][0] <span class="keywordflow">for</span> toPort <span class="keywordflow">in</span> range(self.m_P) <span class="keywordflow">for</span> fromPort <span class="keywordflow">in</span> range(self.m_P)]</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        positiveLengths=[lengths[toPort][fromPort][1] <span class="keywordflow">for</span> toPort <span class="keywordflow">in</span> range(self.m_P) <span class="keywordflow">for</span> fromPort <span class="keywordflow">in</span> range(self.m_P)]</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        <span class="keywordflow">if</span> all(length <span class="keywordflow">is</span> <span class="keywordtype">None</span> <span class="keywordflow">for</span> length <span class="keywordflow">in</span> negativeLengths): minNegativeLengths = <span class="keywordtype">None</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            negativeLengths=[length <span class="keywordflow">if</span> length <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span> <span class="keywordflow">else</span> 0.0 <span class="keywordflow">for</span> length <span class="keywordflow">in</span> negativeLengths]</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            minNegativeLengths = min(negativeLengths)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        <span class="keywordflow">if</span> all(length <span class="keywordflow">is</span> <span class="keywordtype">None</span> <span class="keywordflow">for</span> length <span class="keywordflow">in</span> positiveLengths): maxPositiveLengths = <span class="keywordtype">None</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;            positiveLengths=[length <span class="keywordflow">if</span> length <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span> <span class="keywordflow">else</span> 0.0 <span class="keywordflow">for</span> length <span class="keywordflow">in</span> positiveLengths]</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;            maxPositiveLengths = max(positiveLengths)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">return</span> (minNegativeLengths,maxPositiveLengths)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a1b686921bbdf34872a7a5080356eccc5">LimitImpulseResponseLength</a>(self,lengths):</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;limits the impulse response length of the ports</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="stringliteral">        @param lengths tuple or list of list of tuple impulse response lengths where the</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="stringliteral">        tuple contains the negative time limit and the positive time limit.</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="stringliteral">        @return self (with impulse responses limited)</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="stringliteral">        @remark if the lengths are a single number, it is assumed to be the single</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="stringliteral">        length, otherwise if the lengths is a list of list, it is length to be enforced</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="stringliteral">        for each port-port connection.</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="keywordflow">if</span> lengths <span class="keywordflow">is</span> <span class="keywordtype">None</span>: <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(lengths,list):</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            lengths=[[lengths <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.m_P)] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.m_P)]</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordflow">for</span> toPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;            <span class="keywordflow">for</span> fromPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                (negativeTimeLimit,positiveTimeLimit)=lengths[toPort][fromPort]</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                fr=self.FrequencyResponse(toPort+1,fromPort+1)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                ir=fr.ImpulseResponse()</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keywordflow">if</span> ir <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00187"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a1b686921bbdf34872a7a5080356eccc5">  187</a></span>&#160;                    t=ir.td</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(t)):</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                        <span class="keywordflow">if</span> t[k]&lt;=negativeTimeLimit:</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                            ir[k]=0.</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                        <span class="keywordflow">if</span> t[k]&gt;=positiveTimeLimit:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                            ir[k]=0.</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    fr=ir.FrequencyResponse()</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                    frv=fr.Response()</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(frv)):</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                        self.m_d[n][toPort][fromPort]=frv[n]</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a966ad7b2c2e5ded9c2c34d146381a034">EnforceReciprocity</a>(self):</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        <span class="stringliteral">&quot;&quot;&quot; Enforces reciprocity on the s-parameters</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="stringliteral">        affects self</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(self.m_d)):</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(self.m_d[n])):</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(r,len(self.m_d[n])):</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    <span class="keywordflow">if</span> c&gt;r:</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                        self.m_d[n][r][c]=(self.m_d[n][r][c]+self.m_d[n][c][r])/2.</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                        self.m_d[n][c][r]=self.m_d[n][r][c]</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#af5b218e8e7454681cb528837371433c9">EnforceBothPassivityAndCausality</a>(self,causalityThreshold=0.,maxIterations=30,maxSingularValue=1.):</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Enforces both passivity and causality on the s-parameters.  </span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="stringliteral">        Affects self.  </span></div>
<div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a966ad7b2c2e5ded9c2c34d146381a034">  213</a></span>&#160;<span class="stringliteral">        For up to the maxIterations specified, alternately enforces passivity, to the maxSingularValue and</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;<span class="stringliteral">        enforces causality (because each causes violations of the other, but alternating this way generally</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="stringliteral">        converges.  If causality is detected by being below the causalityThreshold, then iterations stop.</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="stringliteral">        @param maxSingularValue (optional, defaults to 1) float maximumum singular value allowed</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="stringliteral">        @param maxIterations (optional, defaults to 30) maximum iterations</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="stringliteral">        @param causalityThreshold (optional, defaults to 0) positive float threshold for causality detection</span></div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="stringliteral">        @see EnforcePassivity</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="stringliteral">        @see EnforceCausality</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        iterationCount=0</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        keepGoing=<span class="keyword">True</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">while</span> keepGoing:</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a39c856ddb77d77db3db1944a18fe6009">EnforcePassivity</a>(maxSingularValue)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ab0534e987c24d15ff3bcba7ef74ec1d1">EnforceCausality</a>()</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            iterationCount=iterationCount+1</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            <span class="keywordflow">if</span> iterationCount &gt;= maxIterations: keepGoing=<span class="keyword">False</span></div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            <span class="keywordflow">elif</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a4bb07518fdccfa71483dc4e98eb83083">IsCausal</a>(causalityThreshold): keepGoing=<span class="keyword">False</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="keywordflow">else</span>: keepGoing = <span class="keyword">True</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ab03ec93ae9915311d87b800dd52b11f7">EnforceAll</a>(self,causalityThreshold=0.,maxIterations=30,maxSingularValue=1.):</div>
<div class="line"><a name="l00234"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#af5b218e8e7454681cb528837371433c9">  234</a></span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Enforces both reciprocity, passivity and causality on the s-parameters.  </span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="stringliteral">        Affects self.  </span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="stringliteral">        First enforces reciprocity, then...  </span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="stringliteral">        for up to the maxIterations specified, alternately enforces passivity, to the maxSingularValue and</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="stringliteral">        enforces causality (because each causes violations of the other, but alternating this way generally</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="stringliteral">        converges.  If causality is detected by being below the causalityThreshold, then iterations stop.</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="stringliteral">        @param maxSingularValue (optional, defaults to 1) float maximumum singular value allowed</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="stringliteral">        @param maxIterations (optional, defaults to 30) maximum iterations</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="stringliteral">        @param causalityThreshold (optional, defaults to 0) positive float threshold for causality detection</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;<span class="stringliteral">        @see EnforceReciprocity</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;<span class="stringliteral">        @see EnforcePassivity</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="stringliteral">        @see EnforceCausality</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a966ad7b2c2e5ded9c2c34d146381a034">EnforceReciprocity</a>()</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#af5b218e8e7454681cb528837371433c9">EnforceBothPassivityAndCausality</a>(causalityThreshold, maxIterations, maxSingularValue)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#abf2ba6618f29cfb50068f0d442b7323f">RemoveImpulseResponseOffset</a>(self,lengths=None):</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Removes offset in the impulse response.</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="stringliteral">        @param lengths tuple or list of list of tuple impulse response lengths where the</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="stringliteral">        tuple contains the negative time limit and the positive time limit.  The offset to remove</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="stringliteral">        is the mean value of all areas of the impulse repsonse outside these limits</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="stringliteral">        @return self (with impulse response offsets removed)</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="stringliteral">        @remark if the lengths are a single number, it is assumed to be the single</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="stringliteral">        length, otherwise if the lengths is a list of list, it is length to be enforced</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="stringliteral">        for each port-port connection.</span></div>
<div class="line"><a name="l00260"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ab03ec93ae9915311d87b800dd52b11f7">  260</a></span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">if</span> lengths <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            lengths=(-1e15,1e15)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(lengths,list):</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            lengths=[[lengths <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.m_P)] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.m_P)]</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">for</span> toPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;            <span class="keywordflow">for</span> fromPort <span class="keywordflow">in</span> range(self.m_P):</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                (negativeTimeLimit,positiveTimeLimit)=lengths[toPort][fromPort]</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                fr=self.FrequencyResponse(toPort+1,fromPort+1)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                ir=fr.ImpulseResponse()</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                mean=0.</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                count=0</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                <span class="keywordflow">if</span> ir <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    t=ir.td</div>
<div class="line"><a name="l00274"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#abf2ba6618f29cfb50068f0d442b7323f">  274</a></span>&#160;                    <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(t)):</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        <span class="keywordflow">if</span> t[k]&lt;=negativeTimeLimit:</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                            count+=1</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                            mean+=ir[k]</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                        <span class="keywordflow">if</span> t[k]&gt;=positiveTimeLimit:</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;                            count+=1</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;                            mean+=ir[k]</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;                    <span class="keywordflow">if</span> count==0:</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;                        mean=(ir[0]+ir[-1])/2.</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                        mean=mean/count</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                    <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(t)):</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                        ir[k]-=mean</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    fr=ir.FrequencyResponse()</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                    frv=fr.Response()</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                    <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(frv)):</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                        self.m_d[n][toPort][fromPort]=frv[n]</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160; </div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_ab0534e987c24d15ff3bcba7ef74ec1d1"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ab0534e987c24d15ff3bcba7ef74ec1d1">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.EnforceCausality</a></div><div class="ttdeci">def EnforceCausality(self)</div><div class="ttdoc">Enforces causality by setting all of the values before time zero in the impulse responses of the s-pa...</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00075">SParameterManipulation.py:75</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_ab03ec93ae9915311d87b800dd52b11f7"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ab03ec93ae9915311d87b800dd52b11f7">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.EnforceAll</a></div><div class="ttdeci">def EnforceAll(self, causalityThreshold=0., maxIterations=30, maxSingularValue=1.)</div><div class="ttdoc">Enforces both reciprocity, passivity and causality on the s-parameters.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00260">SParameterManipulation.py:260</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation</a></div><div class="ttdoc">Class for manipulations on s-parameters involving passivity, causality, etc.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00028">SParameterManipulation.py:28</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_a966ad7b2c2e5ded9c2c34d146381a034"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a966ad7b2c2e5ded9c2c34d146381a034">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.EnforceReciprocity</a></div><div class="ttdeci">def EnforceReciprocity(self)</div><div class="ttdoc">Enforces reciprocity on the s-parameters affects self.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00213">SParameterManipulation.py:213</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_a979f42e9c8bf72ce90999a24da8a839d"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a979f42e9c8bf72ce90999a24da8a839d">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.PortReorder</a></div><div class="ttdeci">def PortReorder(self, pr)</div><div class="ttdoc">Reorders the ports to port ordering of the port numbers supplied.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00123">SParameterManipulation.py:123</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_a4976e854764ebdc65229e9f99f68f577"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a4976e854764ebdc65229e9f99f68f577">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.DetermineImpulseResponseLength</a></div><div class="ttdeci">def DetermineImpulseResponseLength(self, epsilon=1e-6, allLengths=False)</div><div class="ttdoc">determines the impulse response lengths of the ports by comparing impulse response to threshold.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00141">SParameterManipulation.py:141</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_abf2ba6618f29cfb50068f0d442b7323f"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#abf2ba6618f29cfb50068f0d442b7323f">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.RemoveImpulseResponseOffset</a></div><div class="ttdeci">def RemoveImpulseResponseOffset(self, lengths=None)</div><div class="ttdoc">Removes offset in the impulse response.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00274">SParameterManipulation.py:274</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_a39c856ddb77d77db3db1944a18fe6009"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a39c856ddb77d77db3db1944a18fe6009">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.EnforcePassivity</a></div><div class="ttdeci">def EnforcePassivity(self, maxSingularValue=1.)</div><div class="ttdoc">Enforces passivity on the s-parameters.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00042">SParameterManipulation.py:42</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_a1b686921bbdf34872a7a5080356eccc5"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a1b686921bbdf34872a7a5080356eccc5">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.LimitImpulseResponseLength</a></div><div class="ttdeci">def LimitImpulseResponseLength(self, lengths)</div><div class="ttdoc">limits the impulse response length of the ports</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00187">SParameterManipulation.py:187</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Wavelets_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Wavelets.xhtml">SignalIntegrity.Lib.Wavelets</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2Wavelets_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_af5b218e8e7454681cb528837371433c9"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#af5b218e8e7454681cb528837371433c9">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.EnforceBothPassivityAndCausality</a></div><div class="ttdeci">def EnforceBothPassivityAndCausality(self, causalityThreshold=0., maxIterations=30, maxSingularValue=1.)</div><div class="ttdoc">Enforces both passivity and causality on the s-parameters.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00234">SParameterManipulation.py:234</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_ac1a7d5f1f86019b82b3d88b59c25e3a8"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#ac1a7d5f1f86019b82b3d88b59c25e3a8">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.WaveletDenoise</a></div><div class="ttdeci">def WaveletDenoise(self, threshold=0.00001)</div><div class="ttdoc">Denoises the s-parameters.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00094">SParameterManipulation.py:94</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation_xhtml_a4bb07518fdccfa71483dc4e98eb83083"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterManipulation_1_1SParameterManipulation.xhtml#a4bb07518fdccfa71483dc4e98eb83083">SignalIntegrity.Lib.SParameters.SParameterManipulation.SParameterManipulation.IsCausal</a></div><div class="ttdeci">def IsCausal(self, threshold=0.)</div><div class="ttdoc">Checks whether the s-parameters are causal.</div><div class="ttdef"><b>Definition:</b> <a href="SParameterManipulation_8py_source.xhtml#l00058">SParameterManipulation.py:58</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
