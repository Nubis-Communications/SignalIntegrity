<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/App/NetList.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.17</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_970ef3fb0b92f0060bb9423c44cad0f7.xhtml">App</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">NetList.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1App_1_1NetList.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">NetList.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">import</span> sys</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">import</span> copy</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160; </div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keywordflow">if</span> sys.version_info.major &lt; 3:</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">import</span> Tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">import</span> ScrolledText <span class="keyword">as</span> scrolledtext</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">from</span> tkinter <span class="keyword">import</span> scrolledtext</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1FilePicker.xhtml">SignalIntegrity.App.FilePicker</a> <span class="keyword">import</span> AskSaveAsFilename</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">class </span>NetList(object):</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">def </span>__init__(self,schematic):</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        self.textToShow=[]</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        self.outputNames=[]</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        self.measureNames=[]</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        self.sourceNames=[]</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        self.stimNames=[]</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        self.definingStimList=[]</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        deviceList = schematic.deviceList</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        equiPotentialWireList=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic&#39;</span>].dict[<span class="stringliteral">&#39;Wires&#39;</span>].EquiPotentialWireList()</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        <span class="comment"># put all devices in the net list</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">for</span> device <span class="keywordflow">in</span> deviceList:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> device[<span class="stringliteral">&#39;partname&#39;</span>].GetValue() <span class="keywordflow">in</span> [<span class="stringliteral">&#39;Port&#39;</span>,<span class="stringliteral">&#39;Measure&#39;</span>,<span class="stringliteral">&#39;Output&#39;</span>,<span class="stringliteral">&#39;Stim&#39;</span>,<span class="stringliteral">&#39;NetName&#39;</span>,<span class="stringliteral">&#39;EyeProbe&#39;</span>]:</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;                self.textToShow.append(device.NetListLine())</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;                <span class="keywordflow">if</span> device.netlist[<span class="stringliteral">&#39;DeviceName&#39;</span>] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;networkanalyzerport&#39;</span>,<span class="stringliteral">&#39;voltagesource&#39;</span>,<span class="stringliteral">&#39;currentsource&#39;</span>]:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                    self.sourceNames.append(device[<span class="stringliteral">&#39;ref&#39;</span>].GetValue())</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="comment"># gather up all device pin coordinates</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        devicePinCoordinateList = [device.PinCoordinates() <span class="keywordflow">for</span> device <span class="keywordflow">in</span> deviceList]</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        devicePinNeedToCheckList = [[<span class="keyword">True</span> <span class="keywordflow">for</span> pinIndex <span class="keywordflow">in</span> range(len(devicePinCoordinateList[deviceIndex]))] <span class="keywordflow">for</span> deviceIndex <span class="keywordflow">in</span> range(len(devicePinCoordinateList))]</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        deviceConnectionList = []</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        <span class="keywordflow">for</span> deviceIndex <span class="keywordflow">in</span> range(len(devicePinCoordinateList)):</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;            devicePinConnectionList = []</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;            <span class="keywordflow">for</span> pinIndex <span class="keywordflow">in</span> range(len(devicePinCoordinateList[deviceIndex])):</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;                thisDevicePinCoordinate = devicePinCoordinateList[deviceIndex][pinIndex]</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;                thisListOfConnectedDevicePins=[]</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;                <span class="keywordflow">if</span> devicePinNeedToCheckList[deviceIndex][pinIndex]:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;                    <span class="comment"># search all device pins and wire vertices for this coordinate</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;                    <span class="keywordflow">for</span> deviceCheckIndex <span class="keywordflow">in</span> range(len(devicePinCoordinateList)):</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;                        <span class="keywordflow">for</span> pinCheckIndex <span class="keywordflow">in</span> range(len(devicePinCoordinateList[deviceCheckIndex])):</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                            thisDevicePinCheckCoordinate = devicePinCoordinateList[deviceCheckIndex][pinCheckIndex]</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;                            <span class="keywordflow">if</span> thisDevicePinCoordinate == thisDevicePinCheckCoordinate:</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;                                thisListOfConnectedDevicePins.append((deviceCheckIndex,pinCheckIndex))</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;                    <span class="keywordflow">for</span> wire <span class="keywordflow">in</span> equiPotentialWireList:</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;                        thisWireConnectedToThisDevicePin = <span class="keyword">False</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                        <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> wire:</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                            <span class="keywordflow">if</span> vertex[<span class="stringliteral">&#39;Coord&#39;</span>] == thisDevicePinCoordinate:</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                                thisWireConnectedToThisDevicePin = <span class="keyword">True</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;                                <span class="keywordflow">break</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;                        <span class="keywordflow">if</span> thisWireConnectedToThisDevicePin:</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;                            <span class="keywordflow">for</span> vertex <span class="keywordflow">in</span> wire:</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                                <span class="keywordflow">for</span> deviceCheckIndex <span class="keywordflow">in</span> range(len(devicePinCoordinateList)):</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;                                    <span class="keywordflow">for</span> pinCheckIndex <span class="keywordflow">in</span> range(len(devicePinCoordinateList[deviceCheckIndex])):</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;                                        thisDevicePinCheckCoordinate = devicePinCoordinateList[deviceCheckIndex][pinCheckIndex]</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;                                        <span class="keywordflow">if</span> vertex[<span class="stringliteral">&#39;Coord&#39;</span>] == thisDevicePinCheckCoordinate:</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                                            thisListOfConnectedDevicePins.append((deviceCheckIndex,pinCheckIndex))</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    thisListOfConnectedDevicePins=list(set(thisListOfConnectedDevicePins))</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                    <span class="keywordflow">for</span> connectedDevicePins <span class="keywordflow">in</span> thisListOfConnectedDevicePins:</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;                        connectedDeviceIndex=connectedDevicePins[0]</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                        connectedPinIndex=connectedDevicePins[1]</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                        devicePinNeedToCheckList[connectedDeviceIndex][connectedPinIndex]=<span class="keyword">False</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;                devicePinConnectionList.append(thisListOfConnectedDevicePins)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;            deviceConnectionList.append(devicePinConnectionList)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        netList = []</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="keywordflow">for</span> deviceConnection <span class="keywordflow">in</span> deviceConnectionList:</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;            <span class="keywordflow">for</span> devicePinConnection <span class="keywordflow">in</span> deviceConnection:</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                <span class="keywordflow">if</span> len(devicePinConnection) &gt; 1:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;                    netList.append(devicePinConnection)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="comment"># netList is a list of lists of tuples where each list of tuples contains a device index and pin index</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment"># where each device/pin index in a given list are all connected.</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="comment">#</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="comment"># at this point, net name part/pins may also be listed in there.  Here, the goal is to determine all</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="comment"># of the net names that are common (i.e. join these lists).</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">#</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="comment"># resolve net names</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        netNameDeviceIndexList=[]; netNames=[]</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">for</span> deviceIndex <span class="keywordflow">in</span> range(len(deviceList)):</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;            thisDevice=deviceList[deviceIndex]</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;            <span class="keywordflow">if</span> thisDevice[<span class="stringliteral">&#39;partname&#39;</span>].GetValue()==<span class="stringliteral">&#39;NetName&#39;</span>:</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;                netName=thisDevice[<span class="stringliteral">&#39;netname&#39;</span>].GetValue()</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;                netNames.append(netName)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                netNameDeviceIndexList.append((deviceIndex,netName))</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        netNames=list(set(netNames))</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment"># netNames is a list of net names</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        <span class="comment"># netNameDeviceIndexList is a list of tuples where each tuple contains a device index and a net name</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment">#</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="comment"># determine the net name devices that imply connection together</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        connectedNetNameDeviceIndexListList = []</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">for</span> netName <span class="keywordflow">in</span> netNames:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;            thisConnectedNetNameDeviceIndexList=[]</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;            <span class="keywordflow">for</span> (netNameDeviceIndex,deviceNetName) <span class="keywordflow">in</span> netNameDeviceIndexList:</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                <span class="keywordflow">if</span> netName == deviceNetName:</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                    thisConnectedNetNameDeviceIndexList.append(netNameDeviceIndex)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="keywordflow">if</span> len(thisConnectedNetNameDeviceIndexList)&gt;1:</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                connectedNetNameDeviceIndexListList.append(thisConnectedNetNameDeviceIndexList)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        <span class="comment"># connectedNetNameDeviceIndexList is a list of lists where each list is a list of net list device</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="comment"># names that are connected together (i.e. have the same net name)</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        <span class="comment">#</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="comment"># form a new net list the resolves the new device interconnections</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        <span class="keywordflow">for</span> connectedNetNameDeviceIndexList <span class="keywordflow">in</span> connectedNetNameDeviceIndexListList:</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;            <span class="comment"># connectedNetNameDeviceIndexList is a list of connected device indices (i.e. is a list of</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;            <span class="comment"># device indices representing net names with the same name).</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            thisNetConnectedList=[]</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;            <span class="keywordflow">for</span> connectedDevicePinsList <span class="keywordflow">in</span> netList:</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                thisNetConnected=<span class="keyword">False</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="keywordflow">for</span> (deviceIndex,pinIndex) <span class="keywordflow">in</span> connectedDevicePinsList:</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                    <span class="keywordflow">for</span> connectedNetNameDeviceIndex <span class="keywordflow">in</span> connectedNetNameDeviceIndexList:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                        <span class="keywordflow">if</span> connectedNetNameDeviceIndex==deviceIndex:</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                            thisNetConnected=<span class="keyword">True</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                thisNetConnectedList.append(thisNetConnected)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            <span class="keywordflow">if</span> thisNetConnectedList.count(<span class="keyword">True</span>) &gt; 1:</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                <span class="comment"># some nets in this netlist are connected and need to be joined</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;                oldNetList=copy.deepcopy(netList); netList=[]</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;                newlyconnectedDevicePinsList=[]</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;                <span class="keywordflow">for</span> connectedDevicePinsListIndex <span class="keywordflow">in</span> range(len(oldNetList)):</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;                    connectedDevicePinsList=oldNetList[connectedDevicePinsListIndex]</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;                    <span class="keywordflow">if</span> thisNetConnectedList[connectedDevicePinsListIndex] == <span class="keyword">False</span>:</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;                        netList.append(connectedDevicePinsList)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                        newlyconnectedDevicePinsList=newlyconnectedDevicePinsList+connectedDevicePinsList</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                netList.append(newlyconnectedDevicePinsList)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        <span class="comment"># now that the netlist has resolved all net name connections, remove the net name devices from the</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="comment"># net list</span></div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        oldNetList=copy.deepcopy(netList); netList=[]</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="keywordflow">for</span> oldConnectedDevicePinsList <span class="keywordflow">in</span> oldNetList:</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            connectedDevicePinsList=[]</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            <span class="keywordflow">for</span> (deviceIndex,pinIndex) <span class="keywordflow">in</span> oldConnectedDevicePinsList:</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                isNetNameDevice=<span class="keyword">False</span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                <span class="keywordflow">for</span> (netNameDeviceIndex,netName) <span class="keywordflow">in</span> netNameDeviceIndexList:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                    <span class="keywordflow">if</span> deviceIndex==netNameDeviceIndex:</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;                        isNetNameDevice=<span class="keyword">True</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> isNetNameDevice:</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;                    connectedDevicePinsList.append((deviceIndex,pinIndex))</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;            <span class="keywordflow">if</span> len(connectedDevicePinsList)&gt;0:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;                netList.append(connectedDevicePinsList)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        <span class="comment"># the net list should now be clear of net list devices</span></div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="keywordflow">for</span> net <span class="keywordflow">in</span> netList:</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;            measureList=[]</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            outputList=[]</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;            portList=[]</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;            stimList=[]</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;            <span class="comment"># gather up list of all measures, outputs, and ports</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;            <span class="keywordflow">for</span> devicePin <span class="keywordflow">in</span> net:</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;                deviceIndex=devicePin[0]</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;                pinIndex=devicePin[1]</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;                thisDevice=schematic.deviceList[deviceIndex]</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;                thisDevicePartName = thisDevice[<span class="stringliteral">&#39;partname&#39;</span>].GetValue()</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;                <span class="keywordflow">if</span> thisDevicePartName == <span class="stringliteral">&#39;Port&#39;</span>:</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;                    portList.append(devicePin)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;                <span class="keywordflow">elif</span> thisDevicePartName <span class="keywordflow">in</span> [<span class="stringliteral">&#39;Output&#39;</span>,<span class="stringliteral">&#39;EyeProbe&#39;</span>]:</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;                    outputList.append(devicePin)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;                <span class="keywordflow">elif</span> thisDevicePartName == <span class="stringliteral">&#39;Measure&#39;</span>:</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;                    measureList.append(devicePin)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;                <span class="keywordflow">elif</span> thisDevicePartName == <span class="stringliteral">&#39;Stim&#39;</span>:</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;                    stimList.append(devicePin)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;            <span class="comment">#remove all of the ports, outputs, measures and stims from the net</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;            net = list(set(net)-set(measureList)-set(portList)-set(outputList)-set(stimList))</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;            <span class="keywordflow">if</span> len(net) &gt; 0:</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;                <span class="comment"># for the measures, outputs and ports, we just need one device/port, so we use the first one</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;                deviceIndexOfFirstDeviceInNet = net[0][0]</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                pinIndexOfFirstDeviceInNet = net[0][1]</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;                firstDeviceName = schematic.deviceList[deviceIndexOfFirstDeviceInNet][<span class="stringliteral">&#39;ref&#39;</span>].GetValue()</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;                firstDevicePinNumber = schematic.deviceList[deviceIndexOfFirstDeviceInNet].partPicture.current.pinList[pinIndexOfFirstDeviceInNet][<span class="stringliteral">&#39;Number&#39;</span>]</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;                devicePinString = firstDeviceName + <span class="stringliteral">&#39; &#39;</span> + str(firstDevicePinNumber)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;                <span class="keywordflow">for</span> measure <span class="keywordflow">in</span> measureList:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;                    deviceIndex = measure[0]</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                    self.textToShow.append(schematic.deviceList[deviceIndex].NetListLine() + <span class="stringliteral">&#39; &#39;</span> + devicePinString)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    self.measureNames.append(schematic.deviceList[deviceIndex][<span class="stringliteral">&#39;ref&#39;</span>].GetValue())</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;                <span class="keywordflow">for</span> output <span class="keywordflow">in</span> outputList:</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;                    deviceIndex = output[0]</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;                    self.textToShow.append(schematic.deviceList[deviceIndex].NetListLine() + <span class="stringliteral">&#39; &#39;</span> + devicePinString)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                    self.outputNames.append(schematic.deviceList[deviceIndex][<span class="stringliteral">&#39;ref&#39;</span>].GetValue())</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;                <span class="keywordflow">for</span> port <span class="keywordflow">in</span> portList:</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                    deviceIndex = port[0]</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;                    line=schematic.deviceList[deviceIndex].NetListLine() + <span class="stringliteral">&#39; &#39;</span> + devicePinString</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;                    line=line.replace(<span class="stringliteral">&#39;td 0.0 &#39;</span>,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;                    self.textToShow.append(line)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">if</span> len(net) &gt; 1:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                <span class="comment"># list the connections</span></div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                thisConnectionString = <span class="stringliteral">&#39;connect&#39;</span></div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                <span class="keywordflow">for</span> devicePortIndex <span class="keywordflow">in</span> net:</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                    deviceIndex = devicePortIndex[0]</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    pinIndex = devicePortIndex[1]</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    deviceName = schematic.deviceList[deviceIndex][<span class="stringliteral">&#39;ref&#39;</span>].GetValue()</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                    pinNumber = schematic.deviceList[deviceIndex].partPicture.current.pinList[pinIndex][<span class="stringliteral">&#39;Number&#39;</span>]</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                    thisConnectionString = thisConnectionString + <span class="stringliteral">&#39; &#39;</span>+ str(deviceName) +<span class="stringliteral">&#39; &#39;</span>+str(pinNumber)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                self.textToShow.append(thisConnectionString)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">if</span> len(stimList)&gt;0: <span class="comment"># there is at least one stim on this net</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="comment"># stims fall into three categories</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                <span class="comment"># stims whose pin 1 is connected directly to a device port, and whose pin 2 is connected to port 1 of another stim.</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="comment"># this type is a stim that depends on another. This is called a dependent stim</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                <span class="comment"># stims whose pin 1 is connected directly to a device port, and whose pin 2 is unconnected.</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                <span class="comment"># this type of stim is independent. this is called an independent stim</span></div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                <span class="comment"># stims whose pin 1 is connected to pin 2 of another stim and whose pin 2 is unconnected</span></div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                <span class="comment"># this is a stim that others depend on. This is called a defining stim</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                directStimListThisNet=[]</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                definingStimListThisNet=[]</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                <span class="keywordflow">if</span> len(net) == 0: <span class="comment"># there are only stims on this net</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                    <span class="comment"># one and only one of these stims better be a defining stim</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                    <span class="comment"># this is indicated by a pin 1 connection to the net</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                    <span class="comment"># and the rest of the stims with a pin 2 connection</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                    <span class="keywordflow">for</span> stim <span class="keywordflow">in</span> stimList:</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                        <span class="keywordflow">if</span> deviceList[stim[0]].partPicture.current.pinList[stim[1]][<span class="stringliteral">&#39;Number&#39;</span>]==1:</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                            definingStimListThisNet.append(stim)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                            directStimListThisNet.append(stim)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                    <span class="keywordflow">if</span> len(definingStimListThisNet) != 1: <span class="comment"># this is an error</span></div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                        directStimListThisNet=[]</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        definingStimListThisNet=[]</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="keywordflow">elif</span> len(directStimListThisNet) &lt; 1: <span class="comment"># this is an error</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        directStimListThisNet=[]</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        definingStimListThisNet=[]</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                <span class="keywordflow">else</span>: <span class="comment"># there are stims and devices on this net</span></div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                    <span class="comment"># all of the stim pins must be pin 1</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                    <span class="comment"># and the pin 1 must be connected directly to one of the device ports on the net</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                    <span class="keywordflow">if</span> all(deviceList[stim[0]].partPicture.current.pinList[stim[1]][<span class="stringliteral">&#39;Number&#39;</span>]==1 <span class="keywordflow">for</span> stim <span class="keywordflow">in</span> stimList): <span class="comment"># all of the stim pins are pin 1</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                        directStimListThisNet=stimList</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                <span class="comment"># okay - now that we&#39;re here, we either have one defining stim and one or more direct stims</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                <span class="comment"># which implies that this is a stim net used to define a stimdef or...</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                <span class="comment"># we have no defining stim and one or more direct stims which implies that these are</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                <span class="comment"># stimdef definitions</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                <span class="keywordflow">if</span> len(definingStimListThisNet)==0: <span class="comment"># stim</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                    <span class="keywordflow">for</span> (stimDeviceIndex,stimPinIndex) <span class="keywordflow">in</span> directStimListThisNet: <span class="comment"># generate the stim for each stim</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                        stimPin1Coordinate=deviceList[stimDeviceIndex].PinCoordinates()[stimPinIndex]</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                        <span class="keywordflow">for</span> (deviceIndex,devicePinIndex) <span class="keywordflow">in</span> net: <span class="comment"># find the device pin connected to this stim</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                            devicePinCoordinate=deviceList[deviceIndex].PinCoordinates()[devicePinIndex]</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                            <span class="keywordflow">if</span> stimPin1Coordinate==devicePinCoordinate:</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                stimNameString=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;                                <span class="keywordflow">for</span> stimNameIndex <span class="keywordflow">in</span> range(len(self.stimNames)):</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;                                    <span class="keywordflow">if</span> stimDeviceIndex == self.stimNames[stimNameIndex]:</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                        stimNameString = <span class="stringliteral">&#39;m&#39;</span>+str(stimNameIndex+1)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;                                <span class="keywordflow">if</span> stimNameString==<span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                                    self.stimNames.append(stimDeviceIndex)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                                    stimNameString = <span class="stringliteral">&#39;m&#39;</span>+str(len(self.stimNames))</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                                deviceName = deviceList[deviceIndex][<span class="stringliteral">&#39;ref&#39;</span>].GetValue()</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                                devicePinNumber = deviceList[deviceIndex].partPicture.current.pinList[devicePinIndex][<span class="stringliteral">&#39;Number&#39;</span>]</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                                devicePinString = deviceName + <span class="stringliteral">&#39; &#39;</span> + str(devicePinNumber)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                                self.textToShow.append(deviceList[stimDeviceIndex].NetListLine() + <span class="stringliteral">&#39; &#39;</span> + stimNameString + <span class="stringliteral">&#39; &#39;</span> + devicePinString)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;                <span class="keywordflow">elif</span> len(definingStimListThisNet)==1: <span class="comment">#stimdef</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;                    (definingStimDeviceIndex,definingStimPinIndex) = definingStimListThisNet[0]</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;                    directStimDeviceIndexList=[directStimDevice[0] <span class="keywordflow">for</span> directStimDevice <span class="keywordflow">in</span> directStimListThisNet]</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                    self.definingStimList.append((definingStimDeviceIndex,tuple(directStimDeviceIndexList)))</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="comment"># generate the stimdef if required</span></div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">if</span> len(self.definingStimList) &gt; 0: <span class="comment"># need a stimdef</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="comment"># for now, if there is at least one defining stim, meaning there must be a stimdef, then all stims must be derived from the</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            <span class="comment"># defining stims</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            stimdef=[[0 <span class="keywordflow">for</span> j <span class="keywordflow">in</span> self.definingStimList] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> self.stimNames]</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(self.definingStimList)):</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                determinesStimsDevicesIndexes=self.definingStimList[c][1]</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                <span class="keywordflow">for</span> determinesStimDeviceIndex <span class="keywordflow">in</span> determinesStimsDevicesIndexes:</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                    <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(self.stimNames)):</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                        dependentStimDeviceIndex=self.stimNames[r]</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                        <span class="keywordflow">if</span> determinesStimDeviceIndex == dependentStimDeviceIndex:</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                            stimdef[r][c]=deviceList[dependentStimDeviceIndex][<span class="stringliteral">&#39;weight&#39;</span>].GetValue()</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            self.textToShow.append(<span class="stringliteral">&#39;stimdef &#39;</span>+str(stimdef))</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160; </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="comment"># clean up everything to deal with special case current probes and differential voltage probes</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        endinglines=[]</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        textToShow=[]</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> self.textToShow:</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            tokens = line.split(<span class="stringliteral">&#39; &#39;</span>)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keywordflow">if</span> tokens[0] == <span class="stringliteral">&#39;currentoutput&#39;</span>:</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                line = <span class="stringliteral">&#39;device &#39;</span>+tokens[1]+<span class="stringliteral">&#39; 4 currentcontrolledvoltagesource 1.0&#39;</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            <span class="keywordflow">if</span> tokens[0] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;differentialvoltageoutput&#39;</span>,<span class="stringliteral">&#39;differentialeyeprobe&#39;</span>]:</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                line = <span class="stringliteral">&#39;device &#39;</span>+tokens[1]+<span class="stringliteral">&#39; 4 voltagecontrolledvoltagesource 1.0&#39;</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            <span class="keywordflow">if</span> tokens[0] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;currentoutput&#39;</span>,<span class="stringliteral">&#39;differentialvoltageoutput&#39;</span>,<span class="stringliteral">&#39;differentialeyeprobe&#39;</span>]:</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                self.outputNames.append(tokens[1])</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                endinglines.append(<span class="stringliteral">&#39;device &#39;</span>+tokens[1]+<span class="stringliteral">&#39;_2 1 ground&#39;</span>)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                endinglines.append(<span class="stringliteral">&#39;device &#39;</span>+tokens[1]+<span class="stringliteral">&#39;_3 1 open&#39;</span>)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                endinglines.append(<span class="stringliteral">&#39;connect &#39;</span>+tokens[1]+<span class="stringliteral">&#39; 3 &#39;</span>+tokens[1]+<span class="stringliteral">&#39;_2 1&#39;</span>)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                endinglines.append(<span class="stringliteral">&#39;connect &#39;</span>+tokens[1]+<span class="stringliteral">&#39; 4 &#39;</span>+tokens[1]+<span class="stringliteral">&#39;_3 1&#39;</span>)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                <span class="keywordflow">if</span> tokens[0] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;currentoutput&#39;</span>,<span class="stringliteral">&#39;differentialvoltageoutput&#39;</span>]:</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                    endinglines.append(<span class="stringliteral">&#39;voltageoutput &#39;</span>+tokens[1]+<span class="stringliteral">&#39; &#39;</span>+tokens[1]+<span class="stringliteral">&#39; 4&#39;</span>)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                <span class="keywordflow">if</span> tokens[0] == <span class="stringliteral">&#39;differentialeyeprobe&#39;</span>:</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                    endinglines.append(<span class="stringliteral">&#39;eyeprobe &#39;</span>+tokens[1]+<span class="stringliteral">&#39; &#39;</span>+tokens[1]+<span class="stringliteral">&#39; 4&#39;</span>)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            textToShow.append(line)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        self.textToShow=textToShow+endinglines</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    <span class="keyword">def </span>Text(self):</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        <span class="keywordflow">return</span> self.textToShow</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keyword">def </span>OutputNames(self):</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        <span class="keywordflow">return</span> self.outputNames</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keyword">def </span>SourceNames(self):</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        <span class="keywordflow">return</span> self.sourceNames</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;    <span class="keyword">def </span>MeasureNames(self):</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        <span class="keywordflow">return</span> self.measureNames</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160; </div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="keyword">class </span>NetListFrame(tk.Frame):</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keyword">def </span>__init__(self,parent,textToShow):</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        tk.Frame.__init__(self,parent)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        self.title = <span class="stringliteral">&#39;NetList&#39;</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        self.text=scrolledtext.ScrolledText(self)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        self.text.pack(side=tk.TOP, fill=tk.BOTH, expand=tk.YES)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> textToShow:</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            self.text.insert(tk.END,line+<span class="stringliteral">&#39;\n&#39;</span>)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        self.text.configure(state=<span class="stringliteral">&#39;disabled&#39;</span>)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160; </div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="keyword">class </span>NetListDialog(tk.Toplevel):</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;    <span class="keyword">def </span>__init__(self,parent,textToShow):</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        tk.Toplevel.__init__(self, parent)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        self.transient(parent)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        self.title(<span class="stringliteral">&#39;NetList&#39;</span>)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        self.textToShow=textToShow</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        self.parent = parent</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160; </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        self.result = <span class="keywordtype">None</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160; </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        self.NetListFrame = NetListFrame(self,textToShow)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        self.initial_focus = self.body(self.NetListFrame)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        self.NetListFrame.pack(side=tk.TOP,fill=tk.BOTH,expand=tk.YES,padx=5, pady=5)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160; </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        self.buttonbox()</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        self.grab_set()</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160; </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.initial_focus:</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            self.initial_focus = self</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160; </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        self.protocol(<span class="stringliteral">&quot;WM_DELETE_WINDOW&quot;</span>, self.cancel)</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160; </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        self.geometry(<span class="stringliteral">&quot;+%d+%d&quot;</span> % (parent.winfo_rootx()+50,</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                  parent.winfo_rooty()+50))</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        self.initial_focus.focus_set()</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160; </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        self.wait_window(self)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    <span class="comment"># construction hooks</span></div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keyword">def </span>body(self, master):</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;        <span class="comment"># create dialog body.  return widget that should have</span></div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="comment"># initial focus.  this method should be overridden</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160; </div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keyword">def </span>buttonbox(self):</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        <span class="comment"># add standard button box. override if you don&#39;t want the</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="comment"># standard buttons</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        box = tk.Frame(self)</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160; </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        w = tk.Button(box, text=<span class="stringliteral">&quot;OK&quot;</span>, width=10, command=self.ok, default=tk.ACTIVE)</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        w.pack(side=tk.LEFT, padx=5, pady=5)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        w = tk.Button(box, text=<span class="stringliteral">&quot;Cancel&quot;</span>, width=10, command=self.cancel)</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        w.pack(side=tk.LEFT, padx=5, pady=5)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        self.bind(<span class="stringliteral">&quot;&lt;Return&gt;&quot;</span>, self.ok)</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        self.bind(<span class="stringliteral">&quot;&lt;Escape&gt;&quot;</span>, self.cancel)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160; </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        box.pack()</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">#</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="comment"># standard button semantics</span></div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160; </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <span class="keyword">def </span>ok(self, event=None):</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        extension=<span class="stringliteral">&#39;.txt&#39;</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        filename=AskSaveAsFilename(parent=self,</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                   filetypes=[(<span class="stringliteral">&#39;text&#39;</span>, extension)],</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.txt&#39;</span>,</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                                   initialdir=self.parent.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                   initialfile=self.parent.fileparts.filename+<span class="stringliteral">&#39;.txt&#39;</span>)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;            self.initial_focus.focus_set() <span class="comment"># put focus back</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="keyword">with</span> open(filename,<span class="stringliteral">&quot;w&quot;</span>) <span class="keyword">as</span> f:</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> self.textToShow:</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                f.write(line+<span class="stringliteral">&#39;\n&#39;</span>)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160; </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        self.withdraw()</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        self.update_idletasks()</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160; </div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        self.apply()</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160; </div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        self.cancel()</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160; </div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keyword">def </span>cancel(self, event=None):</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160; </div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="comment"># put focus back to the parent window</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        self.parent.focus_set()</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        self.destroy()</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160; </div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    <span class="comment">#</span></div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="comment"># command hooks</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160; </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    <span class="keyword">def </span>validate(self):</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160; </div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        <span class="keywordflow">return</span> 1 <span class="comment"># override</span></div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160; </div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keyword">def </span>apply(self):</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160; </div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Project_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div><div class="ttdef"><b>Definition:</b> <a href="Project_8py_source.xhtml#l00001">Project.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1FilePicker_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1FilePicker.xhtml">SignalIntegrity.App.FilePicker</a></div><div class="ttdef"><b>Definition:</b> <a href="FilePicker_8py_source.xhtml#l00001">FilePicker.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
