<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Test/TestHelpers.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.3.3</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_e71a6eec2293f3b0221b0b7a67ee07ec.xhtml">Test</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">TestHelpers.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Test_1_1TestHelpers.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">TestHelpers.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">import</span> os</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">import</span> sys</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160; </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keywordflow">if</span> sys.version_info.major &lt; 3:</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">from</span> cStringIO <span class="keyword">import</span> StringIO</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">from</span> io <span class="keyword">import</span> StringIO</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160; </div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyResponse_1_1FrequencyResponse.xhtml">SignalIntegrity.Lib.FrequencyDomain.FrequencyResponse</a> <span class="keyword">import</span> FrequencyResponse</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform.Waveform</a> <span class="keyword">import</span> Waveform</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">from</span> <a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterFile_1_1SParameterFile.xhtml">SignalIntegrity.Lib.SParameters.SParameterFile</a> <span class="keyword">import</span> SParameterFile</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160; </div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">def </span>PlotTikZ(filename,plot2save,scale=None):</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        <span class="keyword">import</span> matplotlib</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        <span class="keywordflow">return</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        <span class="keyword">from</span> tikzplotlib <span class="keyword">import</span> save <span class="keyword">as</span> tikz_save</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;            <span class="keyword">from</span> matplotlib2tikz <span class="keyword">import</span> save <span class="keyword">as</span> tikz_save</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(plot2save,matplotlib.figure.Figure):</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        plot2save=plot2save.gcf()</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        tikz_save(filename,figure=plot2save,show_info=<span class="keyword">False</span>,float_format=<span class="stringliteral">&#39;%.6g&#39;</span>)</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;    <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        tikz_save(filename,figure=plot2save,show_info=<span class="keyword">False</span>)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    texfile=open(filename,<span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    lines=[]</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordflow">for</span> line <span class="keywordflow">in</span> texfile:</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        line=line.replace(<span class="stringliteral">&#39;\xe2\x88\x92&#39;</span>,<span class="stringliteral">&#39;-&#39;</span>)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> scale <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;            line=line.replace(<span class="stringliteral">&#39;begin{tikzpicture}&#39;</span>,<span class="stringliteral">&#39;begin{tikzpicture}[scale=&#39;</span>+str(scale)+<span class="stringliteral">&#39;]&#39;</span>)</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        lines.append(str(line))</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    texfile.close()</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    texfile=open(filename,<span class="stringliteral">&#39;w&#39;</span>)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        texfile.write(line)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    texfile.close()</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160; </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">class </span>SParameterCompareHelper(object):</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    <span class="keyword">def </span>SParametersAreEqual(self,lhs,rhs,epsilon=0.00001):</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        <span class="keywordflow">if</span> lhs.m_P != rhs.m_P: <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        <span class="keywordflow">if</span> lhs.m_Z0 != rhs.m_Z0: <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        <span class="keywordflow">if</span> len(lhs) != len(rhs): <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(lhs)):</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;            <span class="keywordflow">if</span> abs(lhs.m_f[n] - rhs.m_f[n]) &gt; .1:</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;                <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;            lhsn=lhs[n]</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;            rhsn=rhs[n]</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(lhs.m_P):</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(lhs.m_P):</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                    <span class="keywordflow">if</span> abs(lhsn[r][c] - rhsn[r][c]) &gt; epsilon:</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;                        <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">class </span>ResponseTesterHelper(SParameterCompareHelper):</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    plotErrors=<span class="keyword">True</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">def </span>CheckFrequencyResponseResult(self,fr,fileName,text):</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        <span class="comment">#path=os.getcwd()</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(fileName):</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;            fr.WriteToFile(fileName)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;            self.assertTrue(<span class="keyword">False</span>, fileName + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        regression=<a class="code" href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyResponse_1_1FrequencyResponse.xhtml">FrequencyResponse</a>().ReadFromFile(fileName)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="comment">#os.chdir(path)</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        self.assertTrue(regression == fr,text + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">def </span>GetFrequencyResponseResult(self,fileName):</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="comment">#path=os.getcwd()</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(fileName):</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;            <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        regression=<a class="code" href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyResponse_1_1FrequencyResponse.xhtml">FrequencyResponse</a>().ReadFromFile(fileName)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        <span class="comment">#os.chdir(path)</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">return</span> regression</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    <span class="keyword">def </span>CheckWaveformResult(self,wf,fileName,text):</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment">#path=os.getcwd()</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(fileName):</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            wf.WriteToFile(fileName)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            self.assertTrue(<span class="keyword">False</span>, fileName + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        regression=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>().ReadFromFile(fileName)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        wfsAreEqual=(regression==wf)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> wfsAreEqual:</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;            <span class="keywordflow">if</span> ResponseTesterHelper.plotErrors:</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                <span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                plt.clf()</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                plt.title(fileName)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                plt.xlabel(<span class="stringliteral">&#39;time (s)&#39;</span>)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;                plt.ylabel(<span class="stringliteral">&#39;amplitude&#39;</span>)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                plt.semilogy(regression.Times(),[abs(wf[k]-regression[k]) <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(regression))])</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                plt.grid(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                plt.show()</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160; </div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                plt.clf()</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                plt.title(fileName)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                plt.xlabel(<span class="stringliteral">&#39;time (s)&#39;</span>)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                plt.ylabel(<span class="stringliteral">&#39;amplitude&#39;</span>)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;                plt.plot(wf.Times(),wf.Values(),label=<span class="stringliteral">&#39;calculated&#39;</span>)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                plt.plot(regression.Times(),regression.Values(),label=<span class="stringliteral">&#39;regression&#39;</span>)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                plt.legend(loc=<span class="stringliteral">&#39;upper right&#39;</span>)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                plt.grid(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                plt.show()</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="comment">#os.chdir(path)</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        self.assertTrue(wfsAreEqual,text + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    <span class="keyword">def </span>GetWaveformResult(self,fileName):</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="comment">#path=os.getcwd()</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(fileName):</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        regression=<a class="code" href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">Waveform</a>().ReadFromFile(fileName)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        <span class="comment">#os.chdir(path)</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="keywordflow">return</span> regression</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    <span class="keyword">def </span>CheckSParametersResult(self,sp,fileName,text):</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="comment">#path=os.getcwd()</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(fileName):</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            sp.WriteToFile(fileName)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            self.assertTrue(<span class="keyword">False</span>, fileName + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        regression=<a class="code" href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterFile_1_1SParameterFile.xhtml">SParameterFile</a>(fileName,50.)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        <span class="comment">#os.chdir(path)</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        self.assertTrue(self.SParametersAreEqual(sp,regression,0.00001),text + <span class="stringliteral">&#39; incorrect -- &#39;</span>+fileName)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160; </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="keyword">class </span>SourcesTesterHelper(object):</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keyword">def </span>CheckSymbolicResult(self,selfid,symbolic,Text):</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        fileName = (<span class="stringliteral">&#39;_&#39;</span>.join(selfid.split(<span class="stringliteral">&#39;.&#39;</span>)[-1:])).replace(<span class="stringliteral">&#39;test&#39;</span>,<span class="stringliteral">&#39;&#39;</span>) + <span class="stringliteral">&#39;.tex&#39;</span></div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(fileName):</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;            symbolic.WriteToFile(fileName)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;            self.assertTrue(<span class="keyword">False</span>, fileName + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        regression=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keyword">with</span> open(fileName, <span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>) <span class="keyword">as</span> regressionFile:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> regressionFile:</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;                regression = regression + line</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        comparison = symbolic.Get()</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        self.assertTrue(regression == comparison,Text + <span class="stringliteral">&#39; incorrect with &#39;</span> + fileName)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160; </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="keyword">class </span>RoutineWriterTesterHelper(object):</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    maxNumLines=65</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    maxLineLength=88</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">def </span>__init__(self, methodName=&#39;runTest&#39;):</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        self.standardHeader = [<span class="stringliteral">&#39;import SignalIntegrity.Lib as si\n&#39;</span>]</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">def </span>execfile(self,filepath, globals=None, locals=None):</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> globals <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            globals = {}</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        globals.update({</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            <span class="stringliteral">&quot;__file__&quot;</span>: filepath,</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            <span class="stringliteral">&quot;__name__&quot;</span>: <span class="stringliteral">&quot;__main__&quot;</span>,</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        })</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="keyword">with</span> open(filepath, <span class="stringliteral">&#39;rb&#39;</span>) <span class="keyword">as</span> file:</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;            exec(compile(file.read(), filepath, <span class="stringliteral">&#39;exec&#39;</span>), globals, locals)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160; </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keyword">def </span>CheckRoutineWriterResult(self,fileName,sourceCode,Text):</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(fileName):</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;            sourceCodeFile=open(fileName,<span class="stringliteral">&#39;w&#39;</span>)</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> sourceCode:</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;                sourceCodeFile.write(line)</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;            sourceCodeFile.close()</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;            self.assertTrue(<span class="keyword">False</span>, fileName + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        regression=[]</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keyword">with</span> open(fileName, <span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>) <span class="keyword">as</span> regressionFile:</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            regression = regressionFile.readlines()</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">#             for line in regressionFile:</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">#                 regression.append(line)</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        self.assertTrue(regression == sourceCode,Text + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keyword">def </span>WriteCode(self,fileName,Routine,headerLines,printFuncName=False):</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        sourceCode = []</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        sourceCode.extend(headerLines)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        addingLines = <span class="keyword">False</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        indent=4</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        <span class="keyword">with</span> open(fileName, <span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>) <span class="keyword">as</span> inputFile:</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> inputFile:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;                <span class="keywordflow">if</span> len(line.split())&gt;=2:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                    pragmaLine = (<span class="stringliteral">&#39;pragma:&#39;</span> == line.split()[1])</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;                    pragmaLine = <span class="keyword">False</span></div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">if</span> <span class="stringliteral">&quot;def&quot;</span> == line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[0]:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    addingLines = <span class="keyword">False</span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                    <span class="keywordflow">if</span> Routine <span class="keywordflow">in</span> line:</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                        addingLines = <span class="keyword">True</span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;                        includingLines = <span class="keyword">True</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                        <span class="keywordflow">if</span> printFuncName:</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                            line = line.replace(<span class="stringliteral">&#39;test&#39;</span>,<span class="stringliteral">&#39;&#39;</span>).replace(<span class="stringliteral">&#39;self,&#39;</span>,<span class="stringliteral">&#39;&#39;</span>).replace(<span class="stringliteral">&#39;self&#39;</span>,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                            sourceCode.append(line[indent:])</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                        <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;                <span class="keywordflow">if</span> addingLines:</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;                    <span class="keywordflow">if</span> pragmaLine:</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;                        tokens=line.split()</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;                        pindex=tokens.index(<span class="stringliteral">&#39;pragma:&#39;</span>)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;                        tokens=[tokens[i] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(pindex,len(tokens))]</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;                        <span class="keywordflow">for</span> token <span class="keywordflow">in</span> tokens:</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;                            <span class="keywordflow">if</span> token == <span class="stringliteral">&#39;exclude&#39;</span>:</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;                                includingLines = <span class="keyword">False</span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;                            <span class="keywordflow">elif</span> token == <span class="stringliteral">&#39;include&#39;</span>:</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;                                includingLines = <span class="keyword">True</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;                            <span class="keywordflow">elif</span> token == <span class="stringliteral">&#39;outdent&#39;</span>:</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;                                indent = indent+4</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;                            <span class="keywordflow">elif</span> token == <span class="stringliteral">&#39;indent&#39;</span>:</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;                                indent = indent-4</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;                        <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;                    <span class="keywordflow">if</span> includingLines:</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                        <span class="keywordflow">if</span> printFuncName:</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                            sourceCode.append(line[indent:])</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                            lineToAppend=line[indent+4:]</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                            <span class="keywordflow">if</span> len(lineToAppend)==0:</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                                lineToAppend=<span class="stringliteral">&#39;\n&#39;</span></div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                            <span class="keywordflow">if</span> lineToAppend[-1]!=<span class="stringliteral">&#39;\n&#39;</span>:</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;                                lineToAppend=lineToAppend+<span class="stringliteral">&#39;\n&#39;</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                            sourceCode.append(lineToAppend)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        scriptName = Routine.replace(<span class="stringliteral">&#39;test&#39;</span>,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        scriptName = Routine.replace(<span class="stringliteral">&#39;test&#39;</span>,<span class="stringliteral">&#39;&#39;</span>).replace(<span class="stringliteral">&#39;(self)&#39;</span>,<span class="stringliteral">&#39;&#39;</span>).replace(<span class="stringliteral">&#39;(self,)&#39;</span>,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        splitscriptName=scriptName.split(<span class="stringliteral">&#39;(&#39;</span>)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordflow">if</span> len(splitscriptName)==2:</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;            scriptName=splitscriptName[0]</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        scriptFileName=scriptName + <span class="stringliteral">&#39;Code.py&#39;</span></div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        self.CheckRoutineWriterResult(scriptFileName,sourceCode,Routine + <span class="stringliteral">&#39; source code&#39;</span>)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        old_stdout = sys.stdout</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        sys.stdout = mystdout = StringIO()</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        self.execfile(scriptFileName)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        sys.stdout = old_stdout</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        outputFileName = scriptName + <span class="stringliteral">&#39;.po&#39;</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(outputFileName):</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            resultFile = open(outputFileName, <span class="stringliteral">&#39;w&#39;</span>)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            resultFile.write(mystdout.getvalue())</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;            resultFile.close()</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            self.assertTrue(<span class="keyword">False</span>, outputFileName + <span class="stringliteral">&#39; not found&#39;</span>)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        regressionFile = open(outputFileName, <span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        regression = regressionFile.read()</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        regressionFile.close()</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        self.assertTrue(regression == mystdout.getvalue(), outputFileName + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    <span class="keyword">def </span>EntireListOfClassFunctions(self,fileName,className):</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        defName=[]</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        inClass= className == <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keyword">with</span> open(fileName, <span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>) <span class="keyword">as</span> inputFile:</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> inputFile:</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;                <span class="keywordflow">if</span> <span class="stringliteral">&quot;class&quot;</span> == line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[0]:</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;                    <span class="keywordflow">if</span> className == line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[1].split(<span class="stringliteral">&#39;(&#39;</span>)[0]:</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                        inClass = <span class="keyword">True</span></div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                        inClass = <span class="keyword">False</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;                <span class="keywordflow">elif</span> <span class="stringliteral">&quot;def&quot;</span> == line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[0]:</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                    <span class="keywordflow">if</span> inClass:</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;                        defName.append(line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[1].split(<span class="stringliteral">&#39;(&#39;</span>)[0])</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        <span class="keywordflow">return</span> defName</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keyword">def </span>WriteClassCode(self,fileName,className,defName,checkNames=True,lineDefs=False):</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        <span class="keywordflow">if</span> isinstance(defName,str):</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            defName=[defName]</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        <span class="comment">#os.chdir(os.path.dirname(os.path.realpath(__file__)))</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        outputFileName=fileName.split(<span class="stringliteral">&#39;/&#39;</span>)[-1].split(<span class="stringliteral">&#39;.&#39;</span>)[0]+<span class="stringliteral">&#39;_&#39;</span>+className+<span class="stringliteral">&#39;_&#39;</span>+defName[0]</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        outputFileName=outputFileName.replace(<span class="stringliteral">&#39;Test&#39;</span>,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        lineDefFileName=outputFileName+<span class="stringliteral">&#39;_LineNums.tex&#39;</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        outputFileName=outputFileName+<span class="stringliteral">&#39;.py&#39;</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        <span class="keywordflow">if</span> checkNames:</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            allDefNames = self.EntireListOfClassFunctions(fileName,className)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            self.assertTrue(all([name <span class="keywordflow">in</span> allDefNames <span class="keywordflow">for</span> name <span class="keywordflow">in</span> defName]), <span class="stringliteral">&#39;def names wrong for &#39;</span>+outputFileName)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        inClass= className == <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        inDef=<span class="keyword">False</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        addingLines=<span class="keyword">False</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        strippingDoc=<span class="keyword">False</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        sourceCode=[]</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        indent=0</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        lineDef=[]</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        inputFile = DocStripped(fileName)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        lineNumber=1</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> inputFile:</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            <span class="keywordflow">if</span> len(line.split())&gt;=2:</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                pragmaLine = (<span class="stringliteral">&#39;pragma:&#39;</span> == line.split()[1])</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                pragmaLine = <span class="keyword">False</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&quot;class&quot;</span> == line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[0]:</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;                <span class="keywordflow">if</span> className == line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[1].split(<span class="stringliteral">&#39;(&#39;</span>)[0]:</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                    inClass = <span class="keyword">True</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                    inDef = <span class="keyword">False</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                    addingLines = <span class="keyword">True</span></div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                    strippingDoc=<span class="keyword">False</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                    lineNumber=1</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                    inClass = <span class="keyword">False</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                    inDef = <span class="keyword">False</span></div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    addingLines = <span class="keyword">False</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    strippingDoc=<span class="keyword">False</span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            <span class="keywordflow">elif</span> <span class="stringliteral">&quot;def&quot;</span> == line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[0]:</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                <span class="keywordflow">if</span> inClass:</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                    thisDefName=line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[1].split(<span class="stringliteral">&#39;(&#39;</span>)[0]</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                    <span class="keywordflow">if</span> any(d == thisDefName <span class="keywordflow">for</span> d <span class="keywordflow">in</span> defName):</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                        inDef=<span class="keyword">True</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                        defMacro=className+<span class="stringliteral">&#39;_&#39;</span>+thisDefName+<span class="stringliteral">&#39;_Num&#39;</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;                        defMacro=<span class="stringliteral">&#39;&#39;</span>.join(ch <span class="keywordflow">for</span> ch <span class="keywordflow">in</span> defMacro <span class="keywordflow">if</span> ch.isalpha())</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;                        defLine=<span class="stringliteral">&#39;\\def\\&#39;</span>+defMacro+<span class="stringliteral">&#39;{&#39;</span>+str(lineNumber)+<span class="stringliteral">&#39;}\n&#39;</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                        lineDef=lineDef+[defLine]</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                        addingLines=<span class="keyword">True</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                        strippingDoc=<span class="keyword">False</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                        <span class="keywordflow">if</span> addingLines:</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;                            sourceCode.append(<span class="stringliteral">&quot;...\n&quot;</span>)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                            lineNumber=lineNumber+1</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                        inDef=<span class="keyword">False</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                        addingLines=<span class="keyword">False</span></div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                        strippingDoc=<span class="keyword">False</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                    inDef=<span class="keyword">False</span></div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    addingLines=<span class="keyword">False</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    strippingDoc=<span class="keyword">False</span></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;            <span class="keywordflow">elif</span> pragmaLine:</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                strippingDoc=<span class="keyword">False</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                tokens=line.split()</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                pindex=tokens.index(<span class="stringliteral">&#39;pragma:&#39;</span>)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                tokens=[tokens[i] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(pindex,len(tokens))]</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                silent=<span class="keyword">False</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                <span class="keywordflow">for</span> token <span class="keywordflow">in</span> tokens:</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                    <span class="keywordflow">if</span> token == <span class="stringliteral">&#39;silent&#39;</span>:</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                        silent=<span class="keyword">True</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;                    <span class="keywordflow">if</span> token == <span class="stringliteral">&#39;exclude&#39;</span>:</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                        <span class="keywordflow">if</span> inDef:</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                            <span class="keywordflow">if</span> addingLines:</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                <span class="keywordflow">if</span> <span class="keywordflow">not</span> silent:</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                    sourceCode.append(<span class="stringliteral">&quot;...\n&quot;</span>)</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                                    lineNumber=lineNumber+1</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;                            addingLines = <span class="keyword">False</span></div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                    <span class="keywordflow">elif</span> token == <span class="stringliteral">&#39;include&#39;</span>:</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                        <span class="keywordflow">if</span> inDef:</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                            addingLines = <span class="keyword">True</span></div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                    <span class="keywordflow">elif</span> token == <span class="stringliteral">&#39;outdent&#39;</span>:</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                        indent = indent+4</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;                    <span class="keywordflow">elif</span> token == <span class="stringliteral">&#39;indent&#39;</span>:</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                        indent = indent-4</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                <span class="keywordflow">if</span> addingLines:</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                    <span class="keywordflow">if</span> <span class="stringliteral">&#39;##&#39;</span> == line.lstrip(<span class="stringliteral">&#39; &#39;</span>).split(<span class="stringliteral">&#39; &#39;</span>)[0]:</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                        strippingDoc=<span class="keyword">True</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                    <span class="keywordflow">if</span> <span class="keywordflow">not</span> inDef <span class="keywordflow">and</span> <span class="keywordflow">not</span> strippingDoc:</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                        addingLines=<span class="keyword">False</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                        strippingDoc=<span class="keyword">False</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            <span class="keywordflow">if</span> addingLines <span class="keywordflow">and</span> <span class="keywordflow">not</span> strippingDoc:</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                sourceCode.append(line[indent:])</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                lineNumber=lineNumber+1</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(outputFileName):</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            <span class="keyword">with</span> open(outputFileName, <span class="stringliteral">&#39;w&#39;</span>) <span class="keyword">as</span> outputFile:</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                <span class="keywordflow">for</span> line <span class="keywordflow">in</span> sourceCode:</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                    outputFile.write(line)</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        regression=DocStripped(outputFileName,<span class="keyword">False</span>).doc</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        self.assertTrue(regression == sourceCode, outputFileName + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">#         for line in regression:</span></div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;<span class="comment">#             if len(line)&gt;self.maxLineLength:</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment">#                 print line</span></div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        self.assertTrue(max([len(line) <span class="keywordflow">for</span> line <span class="keywordflow">in</span> regression])&lt;=self.maxLineLength,outputFileName + <span class="stringliteral">&#39; has line that is too long: &#39;</span>)</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        self.assertTrue(len(regression)&lt;=self.maxNumLines,outputFileName + <span class="stringliteral">&#39; has too many lines: &#39;</span>+str(len(regression)))</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordflow">if</span> lineDefs:</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> os.path.exists(lineDefFileName):</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                <span class="keyword">with</span> open(lineDefFileName, <span class="stringliteral">&#39;w&#39;</span>) <span class="keyword">as</span> outputFile:</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lineDef:</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                        outputFile.write(line)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;            <span class="keyword">with</span> open(lineDefFileName, <span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>) <span class="keyword">as</span> regressionFile:</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                regression = regressionFile.readlines()</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;            self.assertTrue(regression == lineDef, lineDefFileName + <span class="stringliteral">&#39; incorrect&#39;</span>)</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keyword">class </span>CallbackTesterHelper(object):</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        self.InitCallbackTester()</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;    <span class="keyword">def </span>InitCallbackTester(self,abortOn=-1):</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        self.abortOn=abortOn</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        self.numProgress=0</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        self.firstProgress=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        self.lastProgress=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;    <span class="keyword">def </span>CallbackTester(self,progress):</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordflow">if</span> self.numProgress == 0:</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;            self.firstProgress=progress</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        self.lastProgress=progress</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        self.numProgress=self.numProgress+1</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordflow">if</span> self.numProgress == self.abortOn:</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span>  </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keyword">def </span>CallBackTesterResults(self):</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">return</span> [self.numProgress,self.firstProgress,self.lastProgress]</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    <span class="keyword">def </span>CheckCallbackTesterResults(self,correct):</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">return</span> correct == self.CallBackTesterResults()</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;<span class="keyword">class </span>DocStripped(object):</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    <span class="keyword">def </span>__init__(self,filename,strip=True):</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        self.doc=[]</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        inDocString=<span class="keyword">False</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keyword">with</span> open(filename, <span class="stringliteral">&#39;rU&#39;</span> <span class="keywordflow">if</span> sys.version_info.major &lt; 3 <span class="keywordflow">else</span> <span class="stringliteral">&#39;r&#39;</span>) <span class="keyword">as</span> inputFile:</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> inputFile:</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> strip:</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                    self.doc.append(line)</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                <span class="keywordflow">if</span> line.count(<span class="stringliteral">&#39;&quot;&quot;&quot;&#39;</span>)==1:</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                    inDocString=<span class="keywordflow">not</span> inDocString</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;                <span class="keywordflow">elif</span> line.count(<span class="stringliteral">&#39;&quot;&quot;&quot;&#39;</span>)==2:</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;                    <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> inDocString:</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;                    self.doc.append(line)</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <span class="keyword">def </span>__len__(self):</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        <span class="keywordflow">return</span> len(self.doc)</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keyword">def </span>__getitem__(self,item):</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        <span class="keywordflow">return</span> self.doc[item]</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160; </div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160; </div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterFile_1_1SParameterFile_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1SParameters_1_1SParameterFile_1_1SParameterFile.xhtml">SignalIntegrity.Lib.SParameters.SParameterFile.SParameterFile</a></div><div class="ttdoc">class for s-parameters read from a file</div><div class="ttdef"><b>Definition:</b> <a href="SParameterFile_8py_source.xhtml#l00037">SParameterFile.py:37</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1TimeDomain_1_1Waveform_1_1Waveform_1_1Waveform.xhtml">SignalIntegrity.Lib.TimeDomain.Waveform.Waveform.Waveform</a></div><div class="ttdoc">base class for all waveforms</div><div class="ttdef"><b>Definition:</b> <a href="Waveform_8py_source.xhtml#l00035">Waveform.py:35</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyResponse_1_1FrequencyResponse_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1FrequencyDomain_1_1FrequencyResponse_1_1FrequencyResponse.xhtml">SignalIntegrity.Lib.FrequencyDomain.FrequencyResponse.FrequencyResponse</a></div><div class="ttdoc">FrequencyResponse   Frequency response view of a waveform assumed computed from the FrequencyResponse...</div><div class="ttdef"><b>Definition:</b> <a href="FrequencyResponse_8py_source.xhtml#l00043">FrequencyResponse.py:43</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
