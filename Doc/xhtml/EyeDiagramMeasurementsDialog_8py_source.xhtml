<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/App/EyeDiagramMeasurementsDialog.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.3.0</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_970ef3fb0b92f0060bb9423c44cad0f7.xhtml">App</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">EyeDiagramMeasurementsDialog.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1App_1_1EyeDiagramMeasurementsDialog.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">EyeDiagramMeasurementsDialog.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160; </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">import</span> sys</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keywordflow">if</span> sys.version_info.major &lt; 3:</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">import</span> Tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">from</span> Tkinter <span class="keyword">import</span> ttk</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">from</span> tkinter <span class="keyword">import</span> ttk</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">import</span> math</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers.xhtml">SignalIntegrity.App.MenuSystemHelpers</a> <span class="keyword">import</span> StatusBar</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ToSI.xhtml">SignalIntegrity.App.ToSI</a> <span class="keyword">import</span> ToSI</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160; </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">class </span>EyeDiagramMeasurementsDialog(tk.Toplevel):</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    labelwidth=25</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    entrywidth=10</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keyword">def </span>__init__(self, parent, name):</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        tk.Toplevel.__init__(self, parent)</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;        self.parent=parent</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;        self.withdraw()</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;        self.name=name</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        self.title(<span class="stringliteral">&#39;Eye Diagram: &#39;</span>+name)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        self.img = tk.PhotoImage(file=SignalIntegrity.App.IconsBaseDir+<span class="stringliteral">&#39;AppIcon2.gif&#39;</span>)</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        self.tk.call(<span class="stringliteral">&#39;wm&#39;</span>, <span class="stringliteral">&#39;iconphoto&#39;</span>, self._w, self.img)</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        self.protocol(<span class="stringliteral">&quot;WM_DELETE_WINDOW&quot;</span>, self.onClosing)</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160; </div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        self.tabControl=ttk.Notebook(self)</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160; </div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        self.tab1=ttk.Frame(self.tabControl)</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        self.tabControl.add(self.tab1,text=<span class="stringliteral">&#39;Vertical/Horizontal&#39;</span>)</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        self.tabControl.pack(expand=1,fill=tk.BOTH)</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        self.eyeStatus=StatusBar(self.tab1)</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;        self.eyeStatus.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        self.ParametersFrame=tk.Frame(self.tab1,relief=tk.RIDGE,borderwidth=5)</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;        self.ParametersFrame.pack(side=tk.LEFT,fill=tk.X,expand=tk.NO,anchor=tk.NW)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;        self.tab2=ttk.Frame(self.tabControl)</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        self.tabControl.add(self.tab2,text=<span class="stringliteral">&#39;Error Rates&#39;</span>)</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        self.BERFrame=tk.Frame(self.tab2,relief=tk.RIDGE,borderwidth=5)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        self.BERFrame.pack(side=tk.LEFT,fill=tk.X,expand=tk.NO,anchor=tk.NW)</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160; </div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        self.tab3=ttk.Frame(self.tabControl)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        self.tabControl.add(self.tab3,text=<span class="stringliteral">&#39;Optical&#39;</span>)</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        self.OpticalFrame=tk.Frame(self.tab3,relief=tk.RIDGE,borderwidth=5)</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        self.OpticalFrame.pack(side=tk.LEFT,fill=tk.X,expand=tk.NO,anchor=tk.NW)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160; </div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        self.bind(<span class="stringliteral">&#39;&lt;FocusIn&gt;&#39;</span>,self.onFocus)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        self.resizable(<span class="keyword">False</span>, <span class="keyword">False</span>)</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        self.deiconify()</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;        self.lift()</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keyword">def </span>onFocus(self,event):</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        <span class="keywordflow">if</span> event.widget == self:</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;            <span class="keywordflow">if</span> self.parent.winfo_exists():</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;                self.parent.lift()</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;                self.lift()</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160; </div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keyword">def </span>onClosing(self):</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        self.withdraw()</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        self.destroy()</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <span class="keyword">def </span>destroy(self):</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        tk.Toplevel.withdraw(self)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        tk.Toplevel.destroy(self)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160; </div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    <span class="keyword">def </span>Line2(self,frame,text):</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        line=tk.Label(frame,text=text,font=<span class="stringliteral">&#39;fixedsys&#39;</span>)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        line.pack(side=tk.TOP,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keyword">def </span>SingleLine(self,frame,label,textEntry):</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(textEntry,list): textEntry=[textEntry]</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">if</span> all([t==<span class="keywordtype">None</span> <span class="keywordflow">for</span> t <span class="keywordflow">in</span> textEntry]):</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        lineFrame=tk.Frame(frame)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        text=label.ljust(self.labelwidth)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        line=tk.Label(lineFrame,text=text,width=self.labelwidth)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        line.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        <span class="keywordflow">for</span> entry <span class="keywordflow">in</span> textEntry:</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;            <span class="keywordflow">if</span> entry == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;                entryFrame=tk.Frame(lineFrame)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;                entryFrame=tk.Frame(lineFrame,relief=tk.RIDGE,borderwidth=2)</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            entryFrame.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            entry=tk.Label(entryFrame,width=self.entrywidth,text=<span class="stringliteral">&#39;&#39;</span> <span class="keywordflow">if</span> entry == <span class="keywordtype">None</span> <span class="keywordflow">else</span> entry)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            entry.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160; </div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">def </span>Fields2(self,frame,category,parameter,subparameter,label,unit=None):</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        lineFrame=tk.Frame(frame)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        text=label.ljust(self.labelwidth)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        line=tk.Label(lineFrame,text=text,width=self.labelwidth)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        line.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        <span class="keywordflow">for</span> e <span class="keywordflow">in</span> range(len(self.meas[category])):</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;            entryFrame=tk.Frame(lineFrame,relief=tk.RIDGE,borderwidth=2)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;            entryFrame.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;            entry=tk.Label(entryFrame,width=self.entrywidth,text=ToSI(self.meas[category][e][parameter][subparameter],unit))</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;            entry.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160; </div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">def </span>Heading(self,frame,label,elements):</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        lineFrame=tk.Frame(frame)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        text=label.center(self.labelwidth-5)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        line=tk.Label(lineFrame,text=text,font=<span class="stringliteral">&#39;fixedsys&#39;</span>)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        line.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        <span class="keywordflow">for</span> e <span class="keywordflow">in</span> elements:</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;            entryFrame=tk.Frame(lineFrame,borderwidth=2)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;            entryFrame.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            entry=tk.Label(entryFrame,width=self.entrywidth,text=e,anchor=<span class="stringliteral">&#39;center&#39;</span>)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            entry.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            entry.configure(anchor=<span class="stringliteral">&quot;center&quot;</span>)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160; </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    <span class="keyword">def </span>AddText(self,frame,text,width):</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        entryFrame=tk.Frame(frame,borderwidth=2)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        entryFrame.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        line=tk.Label(entryFrame,text=text,width=width)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        line.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160; </div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">def </span>AddEntry(self,frame,text,width=10):</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;            entryFrame=tk.Frame(frame,relief=tk.RIDGE,borderwidth=2)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;            entryFrame.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;            entry=tk.Label(entryFrame,width=width,text=text)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;            entry.pack(side=tk.LEFT,expand=tk.NO,fill=tk.X)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; </div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keyword">def </span>UpdateMeasurements(self,meas):</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        self.withdraw()</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        self.meas=meas</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="keywordflow">if</span> self.meas==<span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160; </div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        self.tabControl.destroy()</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        self.tabControl=ttk.Notebook(self)</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; </div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        self.tab1=ttk.Frame(self.tabControl)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        self.tabControl.add(self.tab1,text=<span class="stringliteral">&#39;Vertical/Horizontal&#39;</span>)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        self.tabControl.pack(expand=1,fill=tk.BOTH)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        self.eyeStatus=StatusBar(self.tab1)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        self.eyeStatus.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        self.ParametersFrame=tk.Frame(self.tab1,relief=tk.RIDGE,borderwidth=5)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        self.ParametersFrame.pack(side=tk.LEFT,fill=tk.BOTH,expand=tk.YES,anchor=tk.NW)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160; </div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        self.tab2=ttk.Frame(self.tabControl)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        self.tabControl.add(self.tab2,text=<span class="stringliteral">&#39;Error Rates&#39;</span>)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        self.BERFrame=tk.Frame(self.tab2,relief=tk.RIDGE,borderwidth=5)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        self.BERFrame.pack(side=tk.LEFT,fill=tk.BOTH,expand=tk.YES,anchor=tk.NW)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160; </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">if</span> <span class="stringliteral">&#39;Optical&#39;</span> <span class="keywordflow">in</span> self.meas.keys():</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;            self.tab3=ttk.Frame(self.tabControl)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;            self.tabControl.add(self.tab3,text=<span class="stringliteral">&#39;Optical&#39;</span>)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;            self.OpticalFrame=tk.Frame(self.tab3,relief=tk.RIDGE,borderwidth=5)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;            self.OpticalFrame.pack(side=tk.LEFT,fill=tk.BOTH,expand=tk.YES,anchor=tk.NW)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        self.eyeStatus.set(f<span class="stringliteral">&quot;All Measurements Taken at: {10.0**meas[&#39;BERForMeasure&#39;]}&quot;</span>)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160; </div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        verticalUnit={<span class="stringliteral">&#39;V&#39;</span>:<span class="stringliteral">&#39;V&#39;</span>,<span class="stringliteral">&#39;A&#39;</span>:<span class="stringliteral">&#39;A&#39;</span>,<span class="stringliteral">&#39;W&#39;</span>:<span class="stringliteral">&#39;W&#39;</span>,<span class="stringliteral">&#39;FW&#39;</span>:<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;AW&#39;</span>:<span class="stringliteral">&#39;A&#39;</span>,<span class="stringliteral">&#39;VW&#39;</span>:<span class="stringliteral">&#39;V&#39;</span>}[meas[<span class="stringliteral">&#39;WaveformType&#39;</span>]]</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        noiseUnit = {<span class="stringliteral">&#39;V&#39;</span>:<span class="stringliteral">&#39;Vrms&#39;</span>,<span class="stringliteral">&#39;A&#39;</span>:<span class="stringliteral">&#39;Arms&#39;</span>,<span class="stringliteral">&#39;W&#39;</span>:<span class="stringliteral">&#39;Wrms&#39;</span>,<span class="stringliteral">&#39;&#39;</span>:<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;AW&#39;</span>:<span class="stringliteral">&#39;Arms&#39;</span>,<span class="stringliteral">&#39;VW&#39;</span>:<span class="stringliteral">&#39;Vrms&#39;</span>}[verticalUnit]</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="comment">#topline=&#39;&#39;.join([&#39;Eye&#39;.ljust(self.labelwidth)]+[str(eye).center(self.entrywidth-1) for eye in range(len(self.meas[&#39;Eye&#39;]))]+[&#39;&#39;.ljust(self.entrywidth-1)])</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        self.Heading(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,[str(e) <span class="keywordflow">for</span> e <span class="keywordflow">in</span> range(len(self.meas[<span class="stringliteral">&#39;Eye&#39;</span>]))])</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="comment">#self.Line2(topline)</span></div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        self.Line2(self.ParametersFrame,<span class="stringliteral">&#39;Timing&#39;</span>)</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;Start&#39;</span>,<span class="stringliteral">&#39;Time&#39;</span>,<span class="stringliteral">&#39;Start&#39;</span>,<span class="stringliteral">&#39;s&#39;</span>)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;End&#39;</span>,<span class="stringliteral">&#39;Time&#39;</span>,<span class="stringliteral">&#39;End&#39;</span>,<span class="stringliteral">&#39;s&#39;</span>)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;Width&#39;</span>,<span class="stringliteral">&#39;Time&#39;</span>,<span class="stringliteral">&#39;Width&#39;</span>,<span class="stringliteral">&#39;s&#39;</span>)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        self.Line2(self.ParametersFrame,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        self.Line2(self.ParametersFrame,<span class="stringliteral">&#39;Vertical&#39;</span>)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;Low&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>,<span class="stringliteral">&#39;Low&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;Mid&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>,<span class="stringliteral">&#39;Midpoint&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;Best&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>,<span class="stringliteral">&#39;Best Decision Level&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;High&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>,<span class="stringliteral">&#39;High&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;Height&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>,<span class="stringliteral">&#39;Height&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Eye&#39;</span>,<span class="stringliteral">&#39;AV&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>,<span class="stringliteral">&#39;AV&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        self.Line2(self.ParametersFrame,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        <span class="comment">#line=&#39;&#39;.join([&#39;Thresholds&#39;.ljust(self.labelwidth)]+[str(th).center(self.entrywidth-1) for th in range(len(self.meas[&#39;Level&#39;]))])</span></div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="comment">#self.Line2(line)</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        self.Heading(self.ParametersFrame,<span class="stringliteral">&#39;Extents&#39;</span>,[str(th) <span class="keywordflow">for</span> th <span class="keywordflow">in</span> range(len(self.meas[<span class="stringliteral">&#39;Level&#39;</span>]))])</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Level&#39;</span>,<span class="stringliteral">&#39;Min&#39;</span>,<span class="stringliteral">&#39;Value&#39;</span>,<span class="stringliteral">&#39;Min&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Level&#39;</span>, <span class="stringliteral">&#39;Max&#39;</span>, <span class="stringliteral">&#39;Value&#39;</span>, <span class="stringliteral">&#39;Max&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Level&#39;</span>, <span class="stringliteral">&#39;Delta&#39;</span>, <span class="stringliteral">&#39;Value&#39;</span>, <span class="stringliteral">&#39;Delta&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        self.Fields2(self.ParametersFrame,<span class="stringliteral">&#39;Level&#39;</span>, <span class="stringliteral">&#39;Mean&#39;</span>, <span class="stringliteral">&#39;Value&#39;</span>, <span class="stringliteral">&#39;Mean&#39;</span>,verticalUnit)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        self.Line2(self.ParametersFrame,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        <span class="keywordflow">if</span> len(meas[<span class="stringliteral">&#39;Eye&#39;</span>])&gt;1:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;            self.SingleLine(self.ParametersFrame,<span class="stringliteral">&#39;Eye Linearity&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;Linearity&#39;</span>]*100.,<span class="stringliteral">&#39;%&#39;</span>))</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;                self.SingleLine(self.ParametersFrame,<span class="stringliteral">&#39;RLM&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;RLM&#39;</span>]*100.,<span class="stringliteral">&#39;%&#39;</span>))</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            self.Line2(self.ParametersFrame,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        self.SingleLine(self.ParametersFrame,<span class="stringliteral">&#39;Signal Power&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;RMS&#39;</span>],noiseUnit))</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        self.SingleLine(self.ParametersFrame,<span class="stringliteral">&#39;Noise&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;Noise&#39;</span>],noiseUnit))</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        self.SingleLine(self.ParametersFrame, <span class="stringliteral">&#39;Residual Error&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;NoiseResidual&#39;</span>],noiseUnit))</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        self.SingleLine(self.ParametersFrame,<span class="stringliteral">&#39;SDR&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;SDR&#39;</span>],<span class="stringliteral">&#39;dB&#39;</span>))</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.meas[<span class="stringliteral">&#39;SNR&#39;</span>] <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;            self.SingleLine(self.ParametersFrame,<span class="stringliteral">&#39;SNR&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;SNR&#39;</span>],<span class="stringliteral">&#39;dB&#39;</span>))</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;            self.SingleLine(self.ParametersFrame, <span class="stringliteral">&#39;SNDR&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;SNDR&#39;</span>],<span class="stringliteral">&#39;dB&#39;</span>))</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        self.Line2(self.ParametersFrame,<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        self.SingleLine(self.ParametersFrame,<span class="stringliteral">&#39;Vertical Resolution&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;VerticalResolution&#39;</span>],verticalUnit))</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        self.SingleLine(self.ParametersFrame,<span class="stringliteral">&#39;Horizontal Resolution&#39;</span>,ToSI(self.meas[<span class="stringliteral">&#39;HorizontalResolution&#39;</span>],<span class="stringliteral">&#39;s&#39;</span>))</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">if</span> <span class="stringliteral">&#39;Probabilities&#39;</span> <span class="keywordflow">in</span> self.meas.keys():</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="comment">#         self.measDict[&#39;Probabilities&#39;]={&#39;SymbolCodes&#39;:SymbolCode,&#39;GrayCodes&#39;:GrayCodes,&#39;Interpretation&#39;:SymbolInterpretedAsOther,</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="comment">#                                         &#39;ErrorRate&#39;:{&#39;Symbol&#39;:{&#39;PerSymbol&#39;:SymbolErrorRatePerSymbol,&#39;Nominal&#39;:NominalSymbolErrorRate,&#39;Measured&#39;:MeasuredSymbolErrorRate},</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;<span class="comment">#                                                      &#39;Bit&#39;:{&#39;Standard&#39;:{&#39;PerSymbol&#39;:BitErrorRatePerSymbol,&#39;Nominal&#39;:NominalBitErrorRate,&#39;Measured&#39;:MeasuredBitErrorRate},</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;<span class="comment">#                                                             &#39;Gray&#39;:{&#39;PerSymbol&#39;:GrayCodeBitErrorRatePerSymbol,&#39;Nominal&#39;:GrayCodeNominalBitErrorRate,&#39;Measured&#39;:GrayCodeMeasuredBitErrorRate}}}}</span></div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            SymbolCode=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;SymbolCodes&#39;</span>]</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;            GrayCode=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;GrayCodes&#39;</span>]</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;            numberOfSymbols=len(SymbolCode)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>.center(self.entrywidth),self.entrywidth)</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>.center(self.entrywidth),self.entrywidth)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Interpretation&#39;</span>.center(self.entrywidth*numberOfSymbols),self.entrywidth*numberOfSymbols)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            symbolDigits=math.floor(math.log2(numberOfSymbols)+0.5)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;            <span class="keywordflow">for</span> s <span class="keywordflow">in</span> SymbolCode:</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                self.AddText(lineFrame,bin(s)[2:].rjust(symbolDigits,<span class="stringliteral">&#39;0&#39;</span>),self.entrywidth)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                symbolDigits=math.floor(math.log2(numberOfSymbols)+0.5)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                <span class="keywordflow">for</span> s <span class="keywordflow">in</span> GrayCode:</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                    self.AddText(lineFrame,bin(s)[2:].rjust(symbolDigits,<span class="stringliteral">&#39;0&#39;</span>),self.entrywidth)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Symbol&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;Gray Code&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;            Probability=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;Interpretation&#39;</span>]</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;            <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(len(SymbolCode)):</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;                lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;                self.AddText(lineFrame,bin(SymbolCode[s])[2:].rjust(symbolDigits,<span class="stringliteral">&#39;0&#39;</span>),self.entrywidth)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;                <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                    self.AddText(lineFrame,bin(GrayCode[s])[2:].rjust(symbolDigits,<span class="stringliteral">&#39;0&#39;</span>),self.entrywidth)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;                <span class="keywordflow">for</span> o <span class="keywordflow">in</span> range(len(SymbolCode)):</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;                    self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(Probability[s][o],3), self.entrywidth)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;            <span class="comment"># nominal error rates</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>.center(2*self.entrywidth),2*self.entrywidth)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>.center(self.entrywidth),self.entrywidth)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>.center(self.entrywidth),self.entrywidth)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Nominal Error Rates&#39;</span>.center(self.entrywidth*numberOfSymbols),self.entrywidth*numberOfSymbols)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Symbol&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;Gray Code&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Probability&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;SER&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;BER&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;Gray BER&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;            Probability=1./len(SymbolCode)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            SER=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Symbol&#39;</span>][<span class="stringliteral">&#39;PerSymbol&#39;</span>]</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;            BER=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Standard&#39;</span>][<span class="stringliteral">&#39;PerSymbol&#39;</span>]</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;            GrayBER=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Gray&#39;</span>][<span class="stringliteral">&#39;PerSymbol&#39;</span>]</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;            <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(len(SymbolCode)):</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                self.AddText(lineFrame,bin(SymbolCode[s])[2:].rjust(symbolDigits,<span class="stringliteral">&#39;0&#39;</span>),self.entrywidth)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;                    self.AddText(lineFrame,bin(GrayCode[s])[2:].rjust(symbolDigits,<span class="stringliteral">&#39;0&#39;</span>),self.entrywidth)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(Probability,3), self.entrywidth)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                    self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(SER[s],3), self.entrywidth)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(BER[s],3), self.entrywidth)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(GrayBER[s],3), self.entrywidth)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Totals&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(1.,3), self.entrywidth)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Symbol&#39;</span>][<span class="stringliteral">&#39;Nominal&#39;</span>],3), self.entrywidth)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Standard&#39;</span>][<span class="stringliteral">&#39;Nominal&#39;</span>],3), self.entrywidth)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Gray&#39;</span>][<span class="stringliteral">&#39;Nominal&#39;</span>],3), self.entrywidth)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;            <span class="comment"># measured error rates</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>.center(2*self.entrywidth),2*self.entrywidth)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>.center(self.entrywidth),self.entrywidth)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>.center(self.entrywidth),self.entrywidth)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Measured Error Rates&#39;</span>.center(self.entrywidth*numberOfSymbols),self.entrywidth*numberOfSymbols)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Symbol&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;Gray Code&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Probability&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;SER&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;BER&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;Gray BER&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            Probability=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;Symbol&#39;</span>]</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            SER=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Symbol&#39;</span>][<span class="stringliteral">&#39;PerSymbol&#39;</span>]</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            BER=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Standard&#39;</span>][<span class="stringliteral">&#39;PerSymbol&#39;</span>]</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            GrayBER=self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Gray&#39;</span>][<span class="stringliteral">&#39;PerSymbol&#39;</span>]</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(len(SymbolCode)):</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                self.AddText(lineFrame,bin(SymbolCode[s])[2:].rjust(symbolDigits,<span class="stringliteral">&#39;0&#39;</span>),self.entrywidth)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    self.AddText(lineFrame,bin(GrayCode[s])[2:].rjust(symbolDigits,<span class="stringliteral">&#39;0&#39;</span>),self.entrywidth)</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(Probability[s],3), self.entrywidth)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(SER[s],3), self.entrywidth)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(BER[s],3), self.entrywidth)</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;                <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                    self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(GrayBER[s],3), self.entrywidth)</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;            lineFrame=tk.Frame(self.BERFrame); lineFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                self.AddText(lineFrame,<span class="stringliteral">&#39;&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            self.AddText(lineFrame,<span class="stringliteral">&#39;Totals&#39;</span>,self.entrywidth)</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(sum(Probability),3), self.entrywidth)</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Symbol&#39;</span>][<span class="stringliteral">&#39;Measured&#39;</span>],3), self.entrywidth)</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;            self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Standard&#39;</span>][<span class="stringliteral">&#39;Measured&#39;</span>],3), self.entrywidth)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            <span class="keywordflow">if</span> numberOfSymbols &gt; 2:</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;                self.AddEntry(lineFrame, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(self.meas[<span class="stringliteral">&#39;Probabilities&#39;</span>][<span class="stringliteral">&#39;ErrorRate&#39;</span>][<span class="stringliteral">&#39;Bit&#39;</span>][<span class="stringliteral">&#39;Gray&#39;</span>][<span class="stringliteral">&#39;Measured&#39;</span>],3), self.entrywidth)</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            self.tabControl.tab(1,state=<span class="stringliteral">&#39;normal&#39;</span>)</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            self.tabControl.tab(1,state=<span class="stringliteral">&#39;disabled&#39;</span>)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">if</span> <span class="stringliteral">&#39;Optical&#39;</span> <span class="keywordflow">in</span> self.meas.keys():</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;            <span class="keyword">def </span>ToSINone(d,sa): <span class="keywordflow">return</span> None <span class="keywordflow">if</span> d==<span class="keywordtype">None</span> <span class="keywordflow">else</span> ToSI(d,sa,round=3)</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;            self.Line2(self.OpticalFrame,f<span class="stringliteral">&#39;Optical Power: &#39;</span>+{<span class="stringliteral">&#39;W&#39;</span>:<span class="stringliteral">&#39;W&#39;</span>,<span class="stringliteral">&#39;FW&#39;</span>:<span class="stringliteral">&#39;Fractional Power&#39;</span>,<span class="stringliteral">&#39;AW&#39;</span>:<span class="stringliteral">&#39;Current Proportional to Power&#39;</span>,<span class="stringliteral">&#39;VW&#39;</span>:<span class="stringliteral">&#39;Voltage Proportional to Power&#39;</span>}[self.meas[<span class="stringliteral">&#39;WaveformType&#39;</span>]])</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&#39;Pin&#39;</span> <span class="keywordflow">in</span> self.meas[<span class="stringliteral">&#39;Optical&#39;</span>].keys():</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                self.SingleLine(self.OpticalFrame,<span class="stringliteral">&#39;Input Power (Pin)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Pin&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Pin&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                                                        ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Pin&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Pin&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            self.SingleLine(self.OpticalFrame, <span class="stringliteral">&#39;High Level (PH)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;PH&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;PH&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                                                                   ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;PH&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;PH&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;            self.SingleLine(self.OpticalFrame, <span class="stringliteral">&#39;Low Level (PL)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;PL&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;PL&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                                                  ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;PL&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;PL&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;            self.SingleLine(self.OpticalFrame, <span class="stringliteral">&#39;Average Power (Pavg)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Pavg&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Pavg&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                                                                        ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Pavg&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Pavg&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;            self.SingleLine(self.OpticalFrame, <span class="stringliteral">&#39;Modulation Amplitude (OMA)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;OMA&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;OMA&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                                                              ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;OMA&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;OMA&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;            self.SingleLine(self.OpticalFrame, <span class="stringliteral">&#39;Extinction Ratio (ER)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;ER&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;ER&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                                                         ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;ER&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;ER&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&#39;IL&#39;</span> <span class="keywordflow">in</span> self.meas[<span class="stringliteral">&#39;Optical&#39;</span>].keys():</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;                self.SingleLine(self.OpticalFrame,<span class="stringliteral">&#39;Insertion Loss (IL)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;IL&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;IL&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                                                                          ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;IL&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;IL&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&#39;Loss&#39;</span> <span class="keywordflow">in</span> self.meas[<span class="stringliteral">&#39;Optical&#39;</span>].keys():</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                self.SingleLine(self.OpticalFrame,<span class="stringliteral">&#39;Loss (Pin - Pavg)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Loss&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Loss&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;                                                                        ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Loss&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Loss&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&#39;TP&#39;</span> <span class="keywordflow">in</span> self.meas[<span class="stringliteral">&#39;Optical&#39;</span>].keys():</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                self.SingleLine(self.OpticalFrame,<span class="stringliteral">&#39;Transmission Penalty (TP)&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;TP&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;TP&#39;</span>][<span class="stringliteral">&#39;Linear&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>]),</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                                                                ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;TP&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Value&#39;</span>],self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;TP&#39;</span>][<span class="stringliteral">&#39;Log&#39;</span>][<span class="stringliteral">&#39;Unit&#39;</span>])])</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160; </div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&#39;Q&#39;</span> <span class="keywordflow">in</span> self.meas[<span class="stringliteral">&#39;Optical&#39;</span>].keys():</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                self.Line2(self.OpticalFrame,<span class="stringliteral">&#39;Q Measurements&#39;</span>)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                self.SingleLine(self.OpticalFrame, <span class="stringliteral">&#39;BER&#39;</span>, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>][<span class="stringliteral">&#39;BERMeasured&#39;</span>]))</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                self.SingleLine(self.OpticalFrame,<span class="stringliteral">&#39;Q Factor&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>][<span class="stringliteral">&#39;QFactor&#39;</span>],<span class="stringliteral">&#39;&#39;</span>),ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>][<span class="stringliteral">&#39;QFactordB&#39;</span>],<span class="stringliteral">&#39;dB&#39;</span>)])</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160; </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                <span class="keywordflow">if</span> <span class="stringliteral">&#39;QFactorExpected&#39;</span> <span class="keywordflow">in</span> self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>].keys():</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                    self.SingleLine(self.OpticalFrame, <span class="stringliteral">&#39;BER Expected&#39;</span>, <span class="stringliteral">&#39;{:.3E}&#39;</span>.format(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>][<span class="stringliteral">&#39;BERExpected&#39;</span>]))</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                    self.SingleLine(self.OpticalFrame,<span class="stringliteral">&#39;Q Factor Expected&#39;</span>, [ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>][<span class="stringliteral">&#39;QFactorExpected&#39;</span>],<span class="stringliteral">&#39;&#39;</span>),ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>][<span class="stringliteral">&#39;QFactorExpecteddB&#39;</span>],<span class="stringliteral">&#39;dB&#39;</span>)])</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                    self.SingleLine(self.OpticalFrame,<span class="stringliteral">&#39;Tx Penalty&#39;</span>, ToSINone(self.meas[<span class="stringliteral">&#39;Optical&#39;</span>][<span class="stringliteral">&#39;Q&#39;</span>][<span class="stringliteral">&#39;TxPenalty&#39;</span>],<span class="stringliteral">&#39;dB&#39;</span>))</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment"># </span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">#             self.tabControl.tab(2,state=&#39;normal&#39;)</span></div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">#         else:</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">#             self.tabControl.tab(2,state=&#39;disabled&#39;)</span></div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        self.deiconify()</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Preferences_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a></div><div class="ttdef"><b>Definition:</b> <a href="Preferences_8py_source.xhtml#l00001">Preferences.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ToSI_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ToSI.xhtml">SignalIntegrity.App.ToSI</a></div><div class="ttdef"><b>Definition:</b> <a href="ToSI_8py_source.xhtml#l00001">ToSI.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Project_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div><div class="ttdef"><b>Definition:</b> <a href="Project_8py_source.xhtml#l00001">Project.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers.xhtml">SignalIntegrity.App.MenuSystemHelpers</a></div><div class="ttdef"><b>Definition:</b> <a href="MenuSystemHelpers_8py_source.xhtml#l00001">MenuSystemHelpers.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
