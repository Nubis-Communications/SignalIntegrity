<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/App/SignalIntegrityApp.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.3.2</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_970ef3fb0b92f0060bb9423c44cad0f7.xhtml">App</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SignalIntegrityApp.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityApp.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">SignalIntegrityApp.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">import</span> sys</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keywordflow">if</span> sys.version_info.major &lt; 3:</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">import</span> Tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">import</span> tkFont <span class="keyword">as</span> font</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">import</span> tkMessageBox <span class="keyword">as</span> messagebox</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">from</span> tkinter <span class="keyword">import</span> font</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    <span class="keyword">from</span> tkinter <span class="keyword">import</span> messagebox</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160; </div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">import</span> copy</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">import</span> os</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160; </div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment"># import matplotlib</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment"># matplotlib.use(&#39;TkAgg&#39;)</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160; </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ToSI.xhtml">SignalIntegrity.App.ToSI</a> <span class="keyword">import</span> ToSI</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1PartPicture.xhtml">SignalIntegrity.App.PartPicture</a> <span class="keyword">import</span> PartPicture</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1PartProperty.xhtml">SignalIntegrity.App.PartProperty</a> <span class="keyword">import</span> PartPropertyReferenceDesignator</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Device.xhtml">SignalIntegrity.App.Device</a> <span class="keyword">import</span> DeviceList,DeviceListUnknown,DeviceListSystem</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Device.xhtml">SignalIntegrity.App.Device</a> <span class="keyword">import</span> DeviceOutput,DeviceMeasurement,Port,DeviceStim,DeviceNetName</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1DeviceProperties.xhtml">SignalIntegrity.App.DeviceProperties</a> <span class="keyword">import</span> DevicePropertiesDialog</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1DevicePicker.xhtml">SignalIntegrity.App.DevicePicker</a> <span class="keyword">import</span> DevicePickerDialog</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Schematic.xhtml">SignalIntegrity.App.Schematic</a> <span class="keyword">import</span> Drawing</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Simulator.xhtml">SignalIntegrity.App.Simulator</a> <span class="keyword">import</span> Simulator</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1NetworkAnalyzer.xhtml">SignalIntegrity.App.NetworkAnalyzer</a> <span class="keyword">import</span> NetworkAnalyzerSimulator</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1NetList.xhtml">SignalIntegrity.App.NetList</a> <span class="keyword">import</span> NetListDialog</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SParameterViewerWindow.xhtml">SignalIntegrity.App.SParameterViewerWindow</a> <span class="keyword">import</span> SParametersDialog</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1PostProcessingDialog.xhtml">SignalIntegrity.App.PostProcessingDialog</a> <span class="keyword">import</span> PostProcessingDialog</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1EquationsDialog.xhtml">SignalIntegrity.App.EquationsDialog</a> <span class="keyword">import</span> EquationsDialog</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Files.xhtml">SignalIntegrity.App.Files</a> <span class="keyword">import</span> FileParts,ConvertFileNameToRelativePath</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1History.xhtml">SignalIntegrity.App.History</a> <span class="keyword">import</span> History</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers.xhtml">SignalIntegrity.App.MenuSystemHelpers</a> <span class="keyword">import</span> Doer,StatusBar</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1BuildHelpSystem.xhtml">SignalIntegrity.App.BuildHelpSystem</a> <span class="keyword">import</span> HelpSystemKeys</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ProgressDialog.xhtml">SignalIntegrity.App.ProgressDialog</a> <span class="keyword">import</span> ProgressDialog</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1About.xhtml">SignalIntegrity.App.About</a> <span class="keyword">import</span> AboutDialog</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a> <span class="keyword">import</span> Preferences</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1PreferencesDialog.xhtml">SignalIntegrity.App.PreferencesDialog</a> <span class="keyword">import</span> PreferencesDialog</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1FilePicker.xhtml">SignalIntegrity.App.FilePicker</a> <span class="keyword">import</span> AskSaveAsFilename,AskOpenFileName</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ProjectFile.xhtml">SignalIntegrity.App.ProjectFile</a> <span class="keyword">import</span> ProjectFile</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1CalculationPropertiesDialog.xhtml">SignalIntegrity.App.CalculationPropertiesDialog</a> <span class="keyword">import</span> CalculationPropertiesDialog,CalculationProperty</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a> <span class="keyword">import</span> SignalIntegrityAppHeadless</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1EyeDiagramPropertiesDialog.xhtml">SignalIntegrity.App.EyeDiagramPropertiesDialog</a> <span class="keyword">import</span> EyeDiagramPropertiesDialog</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1PartProperty.xhtml">SignalIntegrity.App.PartProperty</a> <span class="keyword">import</span> *</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Archive.xhtml">SignalIntegrity.App.Archive</a> <span class="keyword">import</span> Archive,SignalIntegrityExceptionArchive</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1InformationMessage.xhtml">SignalIntegrity.App.InformationMessage</a> <span class="keyword">import</span> InformationMessage</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1VariablesDialog.xhtml">SignalIntegrity.App.VariablesDialog</a> <span class="keyword">import</span> VariablesDialog</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ProjectFile.xhtml">SignalIntegrity.App.ProjectFile</a> <span class="keyword">import</span> VariableConfiguration</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160; </div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1____about____.xhtml">SignalIntegrity.__about__</a> <span class="keyword">import</span> __version__,__project__</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="keyword">class </span>SignalIntegrityApp(tk.Frame):</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="keyword">def </span>__init__(self,projectFileName=None,runMainLoop=True,external=False,args={}):</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        thisFileDir=os.path.dirname(os.path.realpath(__file__))</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        sys.path=[thisFileDir]+sys.path</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160; </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>=Preferences()</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        self.external=external</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        self.root = tk.Tk()</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        self.root.withdraw()</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160; </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        self.root.protocol(<span class="stringliteral">&quot;WM_DELETE_WINDOW&quot;</span>, self.onClosing)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160; </div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        self.UpdateColorsAndFonts()</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        self.UpdateFeatures()</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160; </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        tk.Frame.__init__(self, self.root)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        self.pack(fill=tk.BOTH, expand=tk.YES)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160; </div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        self.root.title(__project__+<span class="stringliteral">&#39; - &#39;</span>+__version__)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        self.img = tk.PhotoImage(file=SignalIntegrity.App.IconsBaseDir+<span class="stringliteral">&#39;AppIcon2.gif&#39;</span>)</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        self.root.tk.call(<span class="stringliteral">&#39;wm&#39;</span>, <span class="stringliteral">&#39;iconphoto&#39;</span>, self.root._w, <span class="stringliteral">&#39;-default&#39;</span>, self.img)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160; </div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        Doer.helpKeys = HelpSystemKeys(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;OnlineHelp.RebuildHelpKeys&#39;</span>])</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160; </div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        HelpSystemKeys.InstallHelpURLBase(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;OnlineHelp.UseOnlineHelp&#39;</span>],</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                                          <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;OnlineHelp.URL&#39;</span>])</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="comment"># status bar</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        self.statusbar=StatusBar(self)</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160; </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        <span class="comment"># the Doers - the holder of the commands, menu elements, toolbar elements, and key bindings</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;        self.RecentProject0Doer = Doer(self.onRecentProject0).Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        self.RecentProject1Doer = Doer(self.onRecentProject1).Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        self.RecentProject2Doer = Doer(self.onRecentProject2).Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        self.RecentProject3Doer = Doer(self.onRecentProject3).Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        self.NewProjectDoer = Doer(self.onNewProject).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-n&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:New-Project&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Creates a new project&#39;</span>)</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        self.OpenProjectDoer = Doer(self.onReadProjectFromFile).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-o&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Open-Project&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Open an existing project&#39;</span>)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        self.CloseProjectDoer = Doer(self.onCloseProject).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Close-Project&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Close the current project&#39;</span>)</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        self.SaveProjectDoer = Doer(self.onSaveProject).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-s&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Save-Project&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Save the project with existing file name&#39;</span>)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;        self.SaveAsProjectDoer = Doer(self.onSaveAsProject).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-Shift-s&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Save-As-Project&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Save the project with a new file name&#39;</span>)</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        self.ClearProjectDoer = Doer(self.onClearSchematic).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Clear-Schematic&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Clear the schematic&#39;</span>)</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        self.ExportNetListDoer = Doer(self.onExportNetlist).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Export-Netlist&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Export the netlist&#39;</span>)</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        self.ExportTpXDoer = Doer(self.onExportTpX).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Export-LaTeX&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Export schematic as LaTeX&#39;</span>)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        self.ExportPngDoer = Doer(self.onExportPng).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Export-Png&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Export schematic as Png&#39;</span>)</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        self.ArchiveDoer = Doer(self.onArchive).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Archive&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Archive project&#39;</span>)</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        self.ExtractArchiveDoer = Doer(self.onExtractArchive).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Extract-Archive&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Extract archived project&#39;</span>)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;        self.FreshenArchiveDoer = Doer(self.onFreshenArchive).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Freshen-Archive&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Freshen archived project&#39;</span>)</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        self.UnExtractArchiveDoer = Doer(self.onUnExtractArchive).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Unextract-Archive&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Unextract archived project&#39;</span>)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        self.UndoDoer = Doer(self.onUndo).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-z&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Undo&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Undo last edit&#39;</span>)</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        self.RedoDoer = Doer(self.onRedo).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-Z&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Redo&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Redo undid edit&#39;</span>)</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;        self.DeleteSelectedDoer = Doer(self.onDeleteSelected).AddKeyBindElement(self.root,<span class="stringliteral">&#39;Delete&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Delete-Selected&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Delete selected elements&#39;</span>)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        self.DuplicateSelectedDoer = Doer(self.onDuplicateSelected).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-c&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Duplicate-Selected&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Duplicate selected elements&#39;</span>)</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;        self.CutSelectedDoer = Doer(self.onCutMultipleSelections).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-x&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Cut-Selected&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Cut selected elements&#39;</span>)</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        self.AddPartDoer = Doer(self.onAddPart).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-Part&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add a part to the schematic&#39;</span>)</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        self.AddNetNameDoer = Doer(self.onAddNetName).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-Net-Name&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add a net name to the schematic&#39;</span>)</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        self.AddPortDoer = Doer(self.onAddPort).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-Port&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add a port to the schematic&#39;</span>)</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;        self.AddMeasureProbeDoer = Doer(self.onAddMeasureProbe).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-Measure-Probe&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add a measure probe to the schematic&#39;</span>)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;        self.AddOutputProbeDoer = Doer(self.onAddOutputProbe).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-Output-Probe&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add an output probe to the schematic&#39;</span>)</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        self.AddStimDoer = Doer(self.onAddStim).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-Stim&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add a stim to the schematic&#39;</span>)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        self.AddUnknownDoer = Doer(self.onAddUnknown).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-Unknown&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add an unknown to the schematic&#39;</span>)</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        self.AddSystemDoer = Doer(self.onAddSystem).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-System&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add a system to the schematic&#39;</span>)</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        self.DeletePartDoer = Doer(self.onDeletePart).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Delete-Part&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Delete parts from the schematic&#39;</span>)</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        self.EditPropertiesDoer = Doer(self.onEditProperties).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Edit-Properties&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit the part properties&#39;</span>)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        self.DuplicatePartDoer = Doer(self.onDuplicate).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Duplicate-Part&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Duplicate parts in the schematic&#39;</span>)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        self.RotatePartDoer = Doer(self.onRotatePart).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Rotate-Part&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Rotate a part 90 degrees&#39;</span>)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        self.FlipPartHorizontallyDoer = Doer(self.onFlipPartHorizontally).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Flip-Horizontally&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Flip part horizontally&#39;</span>)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        self.FlipPartVerticallyDoer = Doer(self.onFlipPartVertically).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Flip-Vertically&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Flip part vertically&#39;</span>)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        self.ConvertPartDoer = Doer(self.onConvertPart).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Convert-Part&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Convert part to different part&#39;</span>)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        self.AddWireDoer = Doer(self.onAddWire).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Add-Wire&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Add wires to the schematic&#39;</span>)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        self.DeleteVertexDoer = Doer(self.onDeleteSelectedVertex).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Delete-Vertex&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Delete wire vertices from the schematic&#39;</span>)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        self.DuplicateVertexDoer = Doer(self.onDuplicateSelectedVertex).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Duplicate-Vertex&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Duplicate wire vertices&#39;</span>)</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        self.DeleteWireDoer = Doer(self.onDeleteSelectedWire).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Delete-Wire&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Delete wire from the schematic&#39;</span>)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        self.ZoomInDoer = Doer(self.onZoomIn).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Zoom-In&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Zoom in&#39;</span>)</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        self.ZoomOutDoer = Doer(self.onZoomOut).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Zoom-Out&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Zoom out&#39;</span>)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        self.PanDoer = Doer(self.onPan).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Pan&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Pan the schematic&#39;</span>)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        self.CalculationPropertiesDoer = Doer(self.onCalculationProperties).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Calculation-Properties&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit calculation properties&#39;</span>)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        self.PostProcessingDoer = Doer(self.onPostProcessing).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Post-Processing&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit calculation post processing&#39;</span>)</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        self.SParameterViewerDoer = Doer(self.onSParameterViewer).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-parameter-Viewer&#39;</span>).AddToolTip(<span class="stringliteral">&#39;View s-parameters&#39;</span>)</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        self.CalculateDoer = Doer(self.onCalculate).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Calculate-tk.Button&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Calculate the schematic&#39;</span>)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        self.CalculateSParametersDoer = Doer(self.onCalculateSParameters).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Calculate-S-parameters&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Calculate s-parameters&#39;</span>)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        self.SimulateDoer = Doer(self.onSimulate).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Simulate&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Simulate&#39;</span>)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        self.TransferParametersDoer = Doer(self.onTransferParameters).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Transfer-Parameters&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Generate transfer parameters&#39;</span>)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        self.VirtualProbeDoer = Doer(self.onVirtualProbe).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Virtual-Probe&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Simulate with virtual probe&#39;</span>)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        self.DeembedDoer = Doer(self.onDeembed).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Deembed&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Calculate de-embedding solution&#39;</span>)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        self.RLGCDoer = Doer(self.onRLGC).AddHelpElement(<span class="stringliteral">&#39;Control-Help:RLGC-Fit&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Fit the element to a RLGC model&#39;</span>)</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        self.CalculateErrorTermsDoer = Doer(self.onCalculateErrorTerms).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Calculate-Error-Terms&#39;</span>)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        self.SimulateNetworkAnalyzerModelDoer = Doer(self.onSimulateNetworkAnalyzerModel).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Simulate-Network-Analyzer-Model&#39;</span>)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        self.CalculateSParametersFromNetworkAnalyzerModelDoer = Doer(self.onCalculateSParametersFromNetworkAnalyzerModel).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Calculate-S-Parameters-From-Network-Analyzer-Model&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Calculate s-parameters from a netowrk analyzer&#39;</span>)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        self.VariablesDoer = Doer(self.onVariables).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Schematic-Variables&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit Schematic Variables&#39;</span>)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        self.EquationsDoer = Doer(self.onEquations).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Edit-Schematic-Equations&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit Schematic Equations&#39;</span>)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        self.ParameterizeDoer = Doer(self.onParameterizeProject).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Parameterize-Project&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Parameterize Project&#39;</span>)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        self.HelpDoer = Doer(self.onHelp).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Open-Help-File&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Open the help system in a browser&#39;</span>)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        self.PreferencesDoer=Doer(self.onPreferences).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Preferences&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit the preferences&#39;</span>)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        self.ControlHelpDoer = Doer(self.onControlHelp).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Control-Help&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Get help on a control&#39;</span>)</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        self.SoftwareDocumentationDoer = Doer(self.onSoftwareDocumentation).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Software-Documentation&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Open the online software documentation&#39;</span>)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        self.AboutDoer = Doer(self.onAbout).AddHelpElement(<span class="stringliteral">&#39;Control-Help:About&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Find out about SignalIntegrity&#39;</span>)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        self.EscapeDoer = Doer(self.onEscape).AddKeyBindElement(self.root, <span class="stringliteral">&#39;&lt;Escape&gt;&#39;</span>).DisableHelp()</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160; </div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="comment"># this is a secret key binding to build the help keys for the help system</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        self.BuildHelpKeysDoer = Doer(self.onBuildHelpKeys).AddKeyBindElement(self.root,<span class="stringliteral">&#39;&lt;Control-Alt-h&gt;&#39;</span>).Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160; </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="comment"># The menu system</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        TheMenu=tk.Menu(self.root)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        self.root.config(menu=TheMenu)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        self.FileMenu=tk.Menu(self)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;File&#39;</span>,menu=self.FileMenu,underline=0)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        self.RecentsMenu=tk.Menu(self.FileMenu)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        self.FileMenu.add_cascade(label=<span class="stringliteral">&#39;Open Recent Projects&#39;</span>,menu=self.RecentsMenu,underline=5)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        self.RecentProject0Doer.AddMenuElement(self.RecentsMenu,label=<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        self.RecentProject1Doer.AddMenuElement(self.RecentsMenu,label=<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        self.RecentProject2Doer.AddMenuElement(self.RecentsMenu,label=<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        self.RecentProject3Doer.AddMenuElement(self.RecentsMenu,label=<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        self.FileMenu.add_separator()</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        self.NewProjectDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&quot;New Project&quot;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+N&#39;</span>,underline=0)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        self.OpenProjectDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&quot;Open Project&quot;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+O&#39;</span>,underline=0)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        self.CloseProjectDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&#39;Close Project&#39;</span>,underline=0)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        self.SaveProjectDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&quot;Save Project&quot;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+S&#39;</span>,underline=0)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        self.SaveAsProjectDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&quot;Save Project As...&quot;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+Shift-S&#39;</span>,underline=1)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        self.FileMenu.add_separator()</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        self.ClearProjectDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&quot;Clear Schematic&quot;</span>,underline=1)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        self.FileMenu.add_separator()</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        self.ExportNetListDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&quot;Export NetList&quot;</span>,underline=0)</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        self.ExportTpXDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&quot;Export LaTeX (TikZ)&quot;</span>,underline=7)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        self.ExportPngDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&#39;Export Bitmap Image&#39;</span>,underline=7)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        self.FileMenu.add_separator()</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        self.ArchiveDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&#39;Archive Project&#39;</span>,underline=5)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        self.ExtractArchiveDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&#39;Extract Archived Project&#39;</span>,underline=1)</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        self.FreshenArchiveDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&#39;Freshen Archived Project&#39;</span>,underline=0)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        self.UnExtractArchiveDoer.AddMenuElement(self.FileMenu,label=<span class="stringliteral">&#39;Unextract Archived Project&#39;</span>,underline=0)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        EditMenu=tk.Menu(self)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Edit&#39;</span>,menu=EditMenu,underline=0)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        self.UndoDoer.AddMenuElement(EditMenu,label=<span class="stringliteral">&quot;Undo&quot;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+Z&#39;</span>, underline=0)</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        self.RedoDoer.AddMenuElement(EditMenu,label=<span class="stringliteral">&quot;Redo&quot;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+Shift+Z&#39;</span>,underline=0)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        EditMenu.add_separator()</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        self.DeleteSelectedDoer.AddMenuElement(EditMenu,label=<span class="stringliteral">&#39;Delete Selected&#39;</span>,accelerator=<span class="stringliteral">&#39;Del&#39;</span>,underline=0)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        self.DuplicateSelectedDoer.AddMenuElement(EditMenu,label=<span class="stringliteral">&#39;Duplicate Selected&#39;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+C&#39;</span>,underline=1)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        self.CutSelectedDoer.AddMenuElement(EditMenu,label=<span class="stringliteral">&#39;Cut Selected&#39;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+tk.X&#39;</span>,underline=0)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        PartsMenu=tk.Menu(self)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Parts&#39;</span>,menu=PartsMenu,underline=0)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        self.AddPartDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Add Part&#39;</span>,underline=0)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        self.AddNetNameDoer.AddMenuElement(PartsMenu, label=<span class="stringliteral">&#39;Add Net Name&#39;</span>,underline=4)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        self.AddPortDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Add Port&#39;</span>,underline=6)</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        self.AddOutputProbeDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Add Output Probe&#39;</span>,underline=4)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        self.AddMeasureProbeDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Add Measure Probe&#39;</span>,underline=4)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        self.AddStimDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Add Stim&#39;</span>,underline=5)</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        self.AddUnknownDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Add Unknown&#39;</span>,underline=4)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        self.AddSystemDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Add System&#39;</span>,underline=4)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        PartsMenu.add_separator()</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        self.DeletePartDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Delete Part&#39;</span>,underline=0)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        PartsMenu.add_separator()</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        self.EditPropertiesDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Edit Properties&#39;</span>,underline=0)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        self.DuplicatePartDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Duplicate Part&#39;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+C&#39;</span>,underline=0)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        self.RotatePartDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Rotate Part&#39;</span>,underline=0)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        self.FlipPartHorizontallyDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Flip Horizontally&#39;</span>,underline=5)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        self.FlipPartVerticallyDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Flip Vertically&#39;</span>,underline=5)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        self.ConvertPartDoer.AddMenuElement(PartsMenu,label=<span class="stringliteral">&#39;Convert Part&#39;</span>,underline=0)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        WireMenu=tk.Menu(self)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Wires&#39;</span>,menu=WireMenu,underline=0)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        self.AddWireDoer.AddMenuElement(WireMenu,label=<span class="stringliteral">&#39;Add Wire&#39;</span>,underline=0)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        WireMenu.add_separator()</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        self.DeleteVertexDoer.AddMenuElement(WireMenu,label=<span class="stringliteral">&#39;Delete Vertex&#39;</span>,underline=7)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        self.DuplicateVertexDoer.AddMenuElement(WireMenu,label=<span class="stringliteral">&#39;Duplicate Vertex&#39;</span>,underline=1)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        self.DeleteWireDoer.AddMenuElement(WireMenu,label=<span class="stringliteral">&#39;Delete Wire&#39;</span>,underline=0)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        ViewMenu=tk.Menu(self)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;View&#39;</span>,menu=ViewMenu,underline=0)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        self.ZoomInDoer.AddMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Zoom In&#39;</span>,underline=5)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        self.ZoomOutDoer.AddMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Zoom Out&#39;</span>,underline=5)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        self.PanDoer.AddMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Pan&#39;</span>,underline=0)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        CalcMenu=tk.Menu(self)</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Calculate&#39;</span>,menu=CalcMenu,underline=0)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        self.CalculationPropertiesDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;Calculation Properties&#39;</span>,underline=12)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        self.PostProcessingDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;Post-Processing&#39;</span>,underline=1)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        self.SParameterViewerDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;S-parameter Viewer&#39;</span>,underline=12)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        CalcMenu.add_separator()</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        self.CalculateSParametersDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;Calculate S-parameters&#39;</span>,underline=0)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        self.SimulateDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;Simulate&#39;</span>,underline=0)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        self.TransferParametersDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;Generate Transfer Parameters&#39;</span>,underline=0)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        self.VirtualProbeDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;Virtual Probe&#39;</span>,underline=9)</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        self.DeembedDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;Deembed&#39;</span>,underline=0)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        self.RLGCDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;RLGC Fit&#39;</span>,underline=5)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        self.CalculateErrorTermsDoer.AddMenuElement(CalcMenu,label=<span class="stringliteral">&#39;Calculate Error Terms&#39;</span>,underline=10)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="comment">#self.CalculateSParametersFromNetworkAnalyzerModelDoer.AddMenuElement(CalcMenu,label=&#39;Calculate S-parameters from VNA Model&#39;)</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">#self.SimulateNetworkAnalyzerModelDoer.AddMenuElement(CalcMenu,label=&#39;Simulate VNA Model&#39;)</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        VariablesMenu=tk.Menu(self)</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Variables&#39;</span>,menu=VariablesMenu,underline=2)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        self.VariablesDoer.AddMenuElement(VariablesMenu,label=<span class="stringliteral">&#39;Schematic Variables&#39;</span>,underline=10)</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        self.EquationsDoer.AddMenuElement(VariablesMenu,label=<span class="stringliteral">&#39;Schematic Equations&#39;</span>,underline=10)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        VariablesMenu.add_separator()</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        self.ParameterizeDoer.AddMenuElement(VariablesMenu,label=<span class="stringliteral">&#39;Parameterize Schematic&#39;</span>,underline=0)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        HelpMenu=tk.Menu(self)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Help&#39;</span>,menu=HelpMenu,underline=0)</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        self.HelpDoer.AddMenuElement(HelpMenu,label=<span class="stringliteral">&#39;Open Help File&#39;</span>,underline=0)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        self.ControlHelpDoer.AddMenuElement(HelpMenu,label=<span class="stringliteral">&#39;Control Help&#39;</span>,underline=0)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        self.SoftwareDocumentationDoer.AddMenuElement(HelpMenu,label=<span class="stringliteral">&#39;Software Documentation&#39;</span>,underline=0)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        HelpMenu.add_separator()</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        self.PreferencesDoer.AddMenuElement(HelpMenu,label=<span class="stringliteral">&#39;Preferences&#39;</span>,underline=0)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        self.AboutDoer.AddMenuElement(HelpMenu,label=<span class="stringliteral">&#39;About&#39;</span>,underline=0)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        <span class="comment"># The Toolbar</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        ToolBarFrame = tk.Frame(self)</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;        ToolBarFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        iconsdir=SignalIntegrity.App.IconsDir+<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        self.NewProjectDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;document-new-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        self.OpenProjectDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;document-open-2.gif&#39;</span>,).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        self.SaveProjectDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;document-save-2.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        tk.Frame(ToolBarFrame,bd=2,relief=tk.SUNKEN).pack(side=tk.LEFT,fill=tk.X,padx=5,pady=5)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        self.AddPartDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;edit-add-2.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        self.DeleteSelectedDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;edit-delete-6.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        self.AddWireDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;draw-line-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;        self.DuplicateSelectedDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;edit-copy-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        self.RotatePartDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;object-rotate-left-4.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        self.FlipPartHorizontallyDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;object-flip-horizontal-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        self.FlipPartVerticallyDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;object-flip-vertical-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        tk.Frame(ToolBarFrame,height=2,bd=2,relief=tk.RAISED).pack(side=tk.LEFT,fill=tk.X,padx=5,pady=5)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;        self.ZoomInDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;zoom-in-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        self.ZoomOutDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;zoom-out-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        self.PanDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;edit-move.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;        tk.Frame(ToolBarFrame,height=2,bd=2,relief=tk.RAISED).pack(side=tk.LEFT,fill=tk.X,padx=5,pady=5)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        self.CalculationPropertiesDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;tooloptions.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        self.CalculateDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;system-run-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        tk.Frame(ToolBarFrame,height=2,bd=2,relief=tk.RAISED).pack(side=tk.LEFT,fill=tk.X,padx=5,pady=5)</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        self.SParameterViewerDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;sp-view.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        tk.Frame(ToolBarFrame,height=2,bd=2,relief=tk.RAISED).pack(side=tk.LEFT,fill=tk.X,padx=5,pady=5)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        self.VariablesDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;variables-view.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        self.EquationsDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;equations-view.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        tk.Frame(ToolBarFrame,height=2,bd=2,relief=tk.RAISED).pack(side=tk.LEFT,fill=tk.X,padx=5,pady=5)</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        self.HelpDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;help-contents-5.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        self.ControlHelpDoer.AddToolBarElement(ToolBarFrame,iconfile=iconsdir+<span class="stringliteral">&#39;help-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        UndoFrame=tk.Frame(ToolBarFrame)</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        UndoFrame.pack(side=tk.RIGHT,fill=tk.NONE,expand=tk.NO,anchor=tk.E)</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        self.UndoDoer.AddToolBarElement(UndoFrame,iconfile=iconsdir+<span class="stringliteral">&#39;edit-undo-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO,anchor=tk.E)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;        self.RedoDoer.AddToolBarElement(UndoFrame,iconfile=iconsdir+<span class="stringliteral">&#39;edit-redo-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO,anchor=tk.E)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160; </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="comment"># The Drawing (which contains the schecmatic)</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        self.Drawing=Drawing(self)</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;        self.Drawing.pack(side=tk.TOP,fill=tk.BOTH,expand=tk.YES)</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160; </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        self.statusbar.pack(side=tk.BOTTOM,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        self.root.bind(<span class="stringliteral">&#39;&lt;Key&gt;&#39;</span>,self.onKey)</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160; </div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>=ProjectFile()</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        self.Drawing.InitFromProject()</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160; </div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="comment"># The Simulator Dialog</span></div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        self.simulator = Simulator(self)</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        self.networkanalyzersimulator = NetworkAnalyzerSimulator(self)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        self.fileparts=FileParts()</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160; </div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="comment"># The edit history (for undo)</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;        self.history=History(self)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="comment"># we capture resizing so we can resize the canvas a bit smaller to allow the user</span></div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="comment"># to always see the status message bar.  But we don&#39;t know how much smaller initially.</span></div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;        <span class="comment"># so we capture the first call to resize which occurs when the canvas is sized.</span></div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="comment"># the canvas is 600 x 600 so the difference between these amounts is the delta to apply on</span></div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="comment"># subsequent resize calls.</span></div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        self.knowDelta=<span class="keyword">False</span></div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        self.deltaWidth=0</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        self.deltaHeight=0</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;        self.bind(<span class="stringliteral">&#39;&lt;Configure&gt;&#39;</span>,self.onResize)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160; </div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        CalculationProperty.labelWidth=40</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">if</span> projectFileName <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            projectFileName = SignalIntegrity.App.Preferences.GetLastFileOpened()</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160; </div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> projectFileName == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;                fileparts=FileParts(projectFileName)</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                ext=fileparts.fileext</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                <span class="keywordflow">if</span> ext <span class="keywordflow">in</span> [<span class="stringliteral">&#39;.si&#39;</span>,<span class="stringliteral">&#39;&#39;</span>]:</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                    self.OpenProjectFile(projectFileName,<span class="keyword">False</span>,args)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;                <span class="keywordflow">elif</span> ext <span class="keywordflow">in</span> [<span class="stringliteral">&#39;.siz&#39;</span>]:</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;                    self.ExtractArchive(projectFileName,args)</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                self.onClearSchematic()</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                self.Drawing.stateMachine.NoProject(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160; </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        self.UpdateRecentProjectsMenu()</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        <span class="comment"># if a project was not opened and a file was supplied, try to open as an s-parameter file</span></div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        deiconify=<span class="keyword">True</span> <span class="comment"># assume s-parameter viewer will not run standalone</span></div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> projectFileName == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            <span class="keywordflow">if</span> self.Drawing.stateMachine.state == <span class="stringliteral">&#39;NoProject&#39;</span>:</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                fileparts=FileParts(projectFileName)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                ext=fileparts.fileext</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                <span class="keywordflow">if</span> ext==<span class="stringliteral">&#39;.cal&#39;</span>:</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;                    self.calibration=self.OpenCalibrationFile(fileparts.FullFilePathExtension())</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;                    self.ViewCalibration(self.calibration)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                <span class="keywordflow">elif</span> len(ext) &gt;= 4: <span class="comment"># for &#39;.sXp&#39; at the minimum</span></div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                    isSpFile=<span class="keyword">False</span></div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                    <span class="keywordflow">if</span> (ext[0:2] == <span class="stringliteral">&#39;.s&#39;</span>) <span class="keywordflow">and</span> (ext[-1] == <span class="stringliteral">&#39;p&#39;</span>):</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;                        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;                            int(ext[2:-1])</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                            isSpFile=<span class="keyword">True</span></div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                            <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;                    <span class="keywordflow">if</span> isSpFile:</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;                        deiconify=<span class="keyword">False</span> <span class="comment"># since running standalone</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;                        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                        sp=si.sp.SParameterFile(fileparts.FullFilePathExtension())</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                        spd=SParametersDialog(self,sp,fileparts.FullFilePathExtension(),standalone=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160; </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        <span class="keywordflow">if</span> deiconify:</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            self.root.deiconify()</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160; </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="keywordflow">if</span> self.external:</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;<span class="comment"># originally, I wanted this as a dialog or tool window.  This means that the dialog appears, it is resizable</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;<span class="comment"># but unfortunately not maximizable, and could not be minimized.  This had a bad side effect of not appearing</span></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;<span class="comment"># as an icon in the system tray, and sometimes I simply could no longer find the dialog.  This really sucked</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment"># so I now do something that has annoying, but tolerable side effects.  Now, if the window is external (meaning</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment"># another application is waiting for it to close to continue), the window appears like a normal window (can be</span></div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;<span class="comment"># resized, maximized, and closed.  It looks like it can be minimized, but I try to catch the minimization.  An</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;<span class="comment"># unfortunate side effect is that I catch the window minimization after it has been minimized!  So, if the window</span></div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"># has been minimized, I simply restore it.  It&#39;s a bit weird, but works okay on windows.</span></div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;            <span class="keyword">import</span> platform</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            thisOS=platform.system()</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;            <span class="keywordflow">if</span> thisOS == <span class="stringliteral">&#39;Linux&#39;</span>:</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;                self.root.attributes(<span class="stringliteral">&#39;-type&#39;</span>,<span class="stringliteral">&#39;dialog&#39;</span>)</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;                self.root.attributes(<span class="stringliteral">&#39;-topmost&#39;</span>,<span class="keyword">True</span>)</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;            <span class="keywordflow">elif</span> thisOS == <span class="stringliteral">&#39;Windows&#39;</span>:</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;                self.root.bind(<span class="stringliteral">&#39;&lt;Unmap&gt;&#39;</span>, self.onMinimize)</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160; </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordflow">if</span> runMainLoop:</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            self.root.mainloop()</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160; </div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    <span class="keyword">def </span>onMinimize(self,event):</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.root.winfo_viewable():</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;            self.root.deiconify()</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160; </div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    <span class="keyword">def </span>onResize(self,event):</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.knowDelta:</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            self.deltaWidth=event.width-600</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            self.deltaHeight=event.height-600</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            self.knowDelta=<span class="keyword">True</span></div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <span class="comment">#print &#39;width: &#39;+str(event.width)+&#39;, height&#39;+str(event.height)</span></div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160; </div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        self.deltaWidth=4</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;        self.deltaHeight=50</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160; </div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            self.Drawing.canvas.config(width=event.width-self.deltaWidth,height=event.height-self.deltaHeight)</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.DrawingProperties.Geometry&#39;</span>]=self.root.geometry()</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        <span class="keywordflow">except</span> tk.TclError:</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160; </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keyword">def </span>onKey(self,event):</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;<span class="comment">#       print &quot;pressed&quot;, repr(event.keycode), repr(event.keysym)</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keywordflow">if</span> event.keysym == <span class="stringliteral">&#39;Delete&#39;</span>: <span class="comment"># delete</span></div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            self.Drawing.DeleteSelected()</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160; </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;    <span class="keyword">def </span>onUndo(self):</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;        self.history.Undo()</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160; </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;    <span class="keyword">def </span>onRedo(self):</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        self.history.Redo()</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160; </div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    <span class="keyword">def </span>onReadProjectFromFile(self):</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160; </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        filename=AskOpenFileName(filetypes=[(<span class="stringliteral">&#39;si&#39;</span>, <span class="stringliteral">&#39;.si&#39;</span>)],</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;                                 initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;                                 initialfile=self.fileparts.FileNameWithExtension(<span class="stringliteral">&#39;.si&#39;</span>))</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        self.OpenProjectFile(filename)</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160; </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keyword">def </span>SetVariables(self,args,reportMissing=False):</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;        variableNames = <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables&#39;</span>].Names()</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        calculationProperties = <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;CalculationProperties&#39;</span>]</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        calculationPropertyNames = calculationProperties.dict.keys()</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keywordflow">for</span> key <span class="keywordflow">in</span> args.keys():</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            <span class="keywordflow">if</span> key <span class="keywordflow">in</span> variableNames:</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables.Items&#39;</span>][variableNames.index(key)][<span class="stringliteral">&#39;Value&#39;</span>]=args[key]</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;            <span class="keywordflow">elif</span> key <span class="keywordflow">in</span> calculationPropertyNames:</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                calculationProperties.SetValue(key,args[key])</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;            <span class="keywordflow">elif</span> reportMissing:</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                print(<span class="stringliteral">&#39;variable &#39;</span>+key+<span class="stringliteral">&#39; not in project&#39;</span>)</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        calculationProperties.CalculateOthersFromBaseInformation()</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160; </div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;    <span class="keyword">def </span>OpenProjectFile(self,filename,showError=True,args={}):</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;            filename=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        <span class="keywordflow">if</span> isinstance(filename,tuple):</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;            filename=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        filename=str(filename)</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        <span class="keywordflow">if</span> filename==<span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;        self.simulator.DeleteDialogs()</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160; </div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;            cd=os.getcwd()</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;            self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;            os.chdir(self.fileparts.AbsoluteFilePath())</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;            self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;            <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>=ProjectFile().Read(self.fileparts.FullFilePathExtension(<span class="stringliteral">&#39;.si&#39;</span>))</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;            self.SetVariables(args, reportMissing=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            self.Drawing.InitFromProject()</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;            self.AnotherFileOpened(self.fileparts.FullFilePathExtension(<span class="stringliteral">&#39;.si&#39;</span>))</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;            self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;            self.history.Event(<span class="stringliteral">&#39;read project&#39;</span>)</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;            self.root.title(<span class="stringliteral">&#39;SignalIntegrity: &#39;</span>+self.fileparts.FileNameTitle()+(<span class="stringliteral">&#39; (Archive)&#39;</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;                                                                                <span class="keywordflow">if</span> Archive.InAnArchive(self.fileparts.FullFilePathExtension())</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                                                                                <span class="keywordflow">else</span> <span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;            os.chdir(cd)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;            <span class="keywordflow">if</span> showError:</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                messagebox.showerror(<span class="stringliteral">&#39;Project File:&#39;</span>,self.fileparts.FileNameWithExtension()+<span class="stringliteral">&#39; could not be opened&#39;</span>)</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160; </div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keyword">def </span>onNewProject(self):</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;        filename=AskSaveAsFilename(filetypes=[(<span class="stringliteral">&#39;si&#39;</span>, <span class="stringliteral">&#39;.si&#39;</span>)],</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.si&#39;</span>,</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                                   initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                                   title=<span class="stringliteral">&#39;new project file&#39;</span>)</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160; </div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        self.simulator.DeleteDialogs()</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160; </div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>=ProjectFile()</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.DrawingProperties.Grid&#39;</span>]=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.InitialGrid&#39;</span>]</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;        self.Drawing.InitFromProject()</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;        self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        self.history.Event(<span class="stringliteral">&#39;new project&#39;</span>)</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        self.SaveProjectToFile(filename)</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160; </div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">def </span>onCloseProject(self):</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        self.simulator.DeleteDialogs()</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>=ProjectFile()</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        self.Drawing.schematic.Clear()</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;        self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;        self.fileparts=FileParts()</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        self.root.title(<span class="stringliteral">&#39;SignalIntegrity&#39;</span>)</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        self.Drawing.stateMachine.NoProject(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keyword">def </span>SaveProjectToFile(self,filename):</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;        os.chdir(self.fileparts.AbsoluteFilePath())</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        SignalIntegrity.App.Project.Write(self,filename)</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        filename=ConvertFileNameToRelativePath(filename)</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        self.AnotherFileOpened(filename)</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        self.root.title(<span class="stringliteral">&quot;SignalIntegrity: &quot;</span>+self.fileparts.FileNameTitle())</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        self.statusbar.set(<span class="stringliteral">&#39;Project Saved&#39;</span>)</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160; </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;    <span class="keyword">def </span>onSaveProject(self):</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        <span class="keywordflow">if</span> self.fileparts.filename==<span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        filename=self.fileparts.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+self.fileparts.FileNameWithExtension(ext=<span class="stringliteral">&#39;.si&#39;</span>)</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;        self.SaveProjectToFile(filename)</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160; </div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;    <span class="keyword">def </span>onSaveAsProject(self):</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        filename=AskSaveAsFilename(filetypes=[(<span class="stringliteral">&#39;si&#39;</span>, <span class="stringliteral">&#39;.si&#39;</span>)],</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.si&#39;</span>,</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;                                   initialfile=self.fileparts.FileNameWithExtension(<span class="stringliteral">&#39;.si&#39;</span>),</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                                   initialdir=self.fileparts.AbsoluteFilePath())</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;        self.SaveProjectToFile(filename)</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160; </div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;    <span class="keyword">def </span>onClearSchematic(self):</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        self.Drawing.schematic.Clear()</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables&#39;</span>].__init__()</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;PostProcessing&#39;</span>].__init__()</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        self.history.Event(<span class="stringliteral">&#39;clear project&#39;</span>)</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;        self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="comment">#self.fileparts=FileParts()</span></div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;        <span class="comment">#self.root.title(&#39;SignalIntegrity&#39;)</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160; </div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;    <span class="keyword">def </span>AnotherFileOpened(self,filename):</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        SignalIntegrity.App.Preferences.AnotherFileOpened(filename,<span class="keywordflow">not</span> self.external)</div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;        self.UpdateRecentProjectsMenu()</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160; </div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <span class="keyword">def </span>UpdateRecentProjectsMenu(self):</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        recentFileList=SignalIntegrity.App.Preferences.GetRecentFileList()</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;        <span class="keywordflow">if</span> recentFileList <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            recentFileList=[<span class="keywordtype">None</span>,<span class="keywordtype">None</span>,<span class="keywordtype">None</span>,<span class="keywordtype">None</span>]</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;        <span class="keywordflow">if</span> all(r <span class="keywordflow">is</span> <span class="keywordtype">None</span> <span class="keywordflow">for</span> r <span class="keywordflow">in</span> recentFileList):</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;            self.FileMenu.entryconfigure(1,state=<span class="stringliteral">&#39;disabled&#39;</span>)</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;            self.FileMenu.entryconfigure(1,state=<span class="stringliteral">&#39;normal&#39;</span>)</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160; </div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;        <span class="keywordflow">if</span> recentFileList[0] <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;            self.RecentsMenu.entryconfig(1, label=<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;            self.RecentProject0Doer.menuElement.label=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;            self.RecentProject0Doer.Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;            self.RecentsMenu.entryconfig(1, label=recentFileList[0])</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;            self.RecentProject0Doer.menuElement.label=recentFileList[0]</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            self.RecentProject0Doer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;        <span class="keywordflow">if</span> recentFileList[1] <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;            self.RecentsMenu.entryconfig(2, label=<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;            self.RecentProject1Doer.menuElement.label=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;            self.RecentProject1Doer.Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;            self.RecentsMenu.entryconfig(2, label=recentFileList[1])</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;            self.RecentProject1Doer.menuElement.label=recentFileList[1]</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;            self.RecentProject1Doer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;        <span class="keywordflow">if</span> recentFileList[2] <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;            self.RecentsMenu.entryconfig(3, label=<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;            self.RecentProject2Doer.menuElement.label=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;            self.RecentProject2Doer.Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            self.RecentsMenu.entryconfig(3, label=recentFileList[2])</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            self.RecentProject2Doer.menuElement.label=recentFileList[2]</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;            self.RecentProject2Doer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;        <span class="keywordflow">if</span> recentFileList[3] <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;            self.RecentsMenu.entryconfig(4, label=<span class="stringliteral">&#39;&#39;</span>)</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;            self.RecentProject3Doer.menuElement.label=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;            self.RecentProject3Doer.Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;            self.RecentsMenu.entryconfig(4, label=recentFileList[3])</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;            self.RecentProject3Doer.menuElement.label=recentFileList[3]</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;            self.RecentProject3Doer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160; </div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;    <span class="keyword">def </span>onRecentProject0(self):</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;        self.OpenProjectFile(SignalIntegrity.App.Preferences.GetLastFileOpened(0))</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160; </div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;    <span class="keyword">def </span>onRecentProject1(self):</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        self.OpenProjectFile(SignalIntegrity.App.Preferences.GetLastFileOpened(1))</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160; </div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    <span class="keyword">def </span>onRecentProject2(self):</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;        self.OpenProjectFile(SignalIntegrity.App.Preferences.GetLastFileOpened(2))</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160; </div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;    <span class="keyword">def </span>onRecentProject3(self):</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;        self.OpenProjectFile(SignalIntegrity.App.Preferences.GetLastFileOpened(3))</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160; </div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;    <span class="keyword">def </span>NetListText(self):</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;        <span class="keywordflow">return</span> self.Drawing.schematic.NetList().Text()+<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;PostProcessing&#39;</span>].NetListLines()</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160; </div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;    <span class="keyword">def </span>onExportNetlist(self):</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        NetListDialog(self,self.NetListText())</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160; </div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;    <span class="keyword">def </span>onExportTpX(self):</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1TpX.xhtml">SignalIntegrity.App.TpX</a> <span class="keyword">import</span> TpX</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1TikZ.xhtml">SignalIntegrity.App.TikZ</a> <span class="keyword">import</span> TikZ</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;        filename=AskSaveAsFilename(filetypes=[(<span class="stringliteral">&#39;tpx&#39;</span>, <span class="stringliteral">&#39;.TpX&#39;</span>)],</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.TpX&#39;</span>,</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;                                   initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;                                   initialfile=self.fileparts.filename+<span class="stringliteral">&#39;.TpX&#39;</span>)</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;            tpx=self.Drawing.DrawSchematic(TpX()).Finish()</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;            tikz=self.Drawing.DrawSchematic(TikZ()).Finish()</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;            <span class="comment">#tikz.Document()</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;            tpx.lineList=tpx.lineList+tikz.lineList</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;            tpx.WriteToFile(filename)</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Export LaTeX&#39;</span>,<span class="stringliteral">&#39;LaTeX could not be generated or written &#39;</span>)</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160; </div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keyword">def </span>onExportPng(self):</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;        filename=AskSaveAsFilename(filetypes=[(<span class="stringliteral">&#39;png&#39;</span>, <span class="stringliteral">&#39;.png&#39;</span>)],</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.png&#39;</span>,</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;                                   initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;                                   initialfile=self.fileparts.filename+<span class="stringliteral">&#39;.png&#39;</span>)</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;            <span class="keyword">from</span> PIL <span class="keyword">import</span> ImageGrab</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;            borderwidth=4</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;            x=self.root.winfo_rootx()+self.Drawing.winfo_x()+borderwidth</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            y=self.root.winfo_rooty()+self.Drawing.winfo_y()+borderwidth</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            x1=x+self.Drawing.winfo_width()-2*borderwidth</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;            y1=y+self.Drawing.winfo_height()-2*borderwidth</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;            ImageGrab.grab().crop((x,y,x1,y1)).save(filename)</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Export Bitmap Image&#39;</span>,<span class="stringliteral">&#39;Image could not be generated or written &#39;</span>)</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160; </div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    <span class="keyword">def </span>onAddPart(self):</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;        self.onAddPartFromSpecificList(DeviceList+DeviceListUnknown+DeviceListSystem)</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160; </div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keyword">def </span>onAddUnknown(self):</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        self.onAddPartFromSpecificList(DeviceListUnknown)</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160; </div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;    <span class="keyword">def </span>onAddSystem(self):</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        self.onAddPartFromSpecificList(DeviceListSystem)</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160; </div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;    <span class="keyword">def </span>onAddPartFromSpecificList(self,deviceList):</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        dpd=DevicePickerDialog(self,deviceList)</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        <span class="keywordflow">if</span> dpd.result != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;            devicePicked=copy.deepcopy(deviceList[dpd.result]).InitializeFromPreferences()</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;            self.AddSpecificPart(devicePicked)</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;    <span class="keyword">def </span>onDeletePart(self):</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        self.Drawing.DeleteSelectedDevice()</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    <span class="keyword">def </span>onDeleteSelected(self):</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;        self.Drawing.DeleteSelected()</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;    <span class="keyword">def </span>onEditProperties(self):</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;        self.Drawing.EditSelectedDevice()</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;    <span class="keyword">def </span>onRotatePart(self):</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        <span class="keywordflow">if</span> self.Drawing.stateMachine.state == <span class="stringliteral">&#39;DeviceSelected&#39;</span>:</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            self.Drawing.deviceSelected.partPicture.current.Rotate()</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;            self.history.Event(<span class="stringliteral">&#39;rotate&#39;</span>)</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;    <span class="keyword">def </span>onFlipPartHorizontally(self):</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;        <span class="keywordflow">if</span> self.Drawing.stateMachine.state == <span class="stringliteral">&#39;DeviceSelected&#39;</span>:</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            orientation = self.Drawing.deviceSelected.partPicture.current.orientation</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            mirroredHorizontally = self.Drawing.deviceSelected.partPicture.current.mirroredHorizontally</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            mirroredVertically = self.Drawing.deviceSelected.partPicture.current.mirroredVertically</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            self.Drawing.deviceSelected.partPicture.current.ApplyOrientation(orientation,<span class="keywordflow">not</span> mirroredHorizontally,mirroredVertically)</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;            self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;            self.history.Event(<span class="stringliteral">&#39;flip horizontally&#39;</span>)</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;    <span class="keyword">def </span>onFlipPartVertically(self):</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="keywordflow">if</span> self.Drawing.stateMachine.state == <span class="stringliteral">&#39;DeviceSelected&#39;</span>:</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            orientation = self.Drawing.deviceSelected.partPicture.current.orientation</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;            mirroredHorizontally = self.Drawing.deviceSelected.partPicture.current.mirroredHorizontally</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;            mirroredVertically = self.Drawing.deviceSelected.partPicture.current.mirroredVertically</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;            self.Drawing.deviceSelected.partPicture.current.ApplyOrientation(orientation,mirroredHorizontally,<span class="keywordflow">not</span> mirroredVertically)</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            self.history.Event(<span class="stringliteral">&#39;flip vertically&#39;</span>)</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    <span class="keyword">def </span>onConvertPart(self):</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keywordflow">if</span> self.Drawing.stateMachine.state == <span class="stringliteral">&#39;DeviceSelected&#39;</span>:</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;            deviceCopy=copy.deepcopy(self.Drawing.deviceSelected)</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;            deviceList=DeviceList+DeviceListUnknown+DeviceListSystem</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;            self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;            dpd=DevicePickerDialog(self,deviceList)</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;            <span class="keywordflow">if</span> dpd.result != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                self.onDeletePart()</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                devicePicked=copy.deepcopy(deviceList[dpd.result])</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                <span class="keywordflow">for</span> propertyInNew <span class="keywordflow">in</span> devicePicked.propertiesList:</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                    <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(propertyInNew,PartPropertyReadOnly):</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                        <span class="keywordflow">for</span> propertyInOld <span class="keywordflow">in</span> deviceCopy.propertiesList:</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                            <span class="keywordflow">if</span> (<span class="keywordflow">not</span> isinstance(propertyInOld,PartPropertyPorts)) <span class="keywordflow">and</span> (type(propertyInNew) <span class="keywordflow">is</span> type(propertyInOld)):</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                                <span class="keywordflow">for</span> key <span class="keywordflow">in</span> propertyInNew.dict:</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                                    <span class="keywordflow">if</span> key <span class="keywordflow">in</span> propertyInOld.dict <span class="keywordflow">and</span> propertyInOld.dict[key].dict[<span class="stringliteral">&#39;write&#39;</span>]:</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                                        propertyInNew.dict[key].dict[<span class="stringliteral">&#39;value&#39;</span>]=propertyInOld.dict[key].dict[<span class="stringliteral">&#39;value&#39;</span>]</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                                        propertyInNew.dict[key].value=propertyInOld.dict[key].value</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> devicePicked.configuration <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                    <span class="keywordflow">if</span> isinstance(devicePicked.configuration,list):</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(devicePicked.configuration)):</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                            <span class="keywordflow">if</span> <span class="keywordflow">not</span> deviceCopy.configuration <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                                <span class="keywordflow">if</span> isinstance(deviceCopy.configuration,list):</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                                    <span class="keywordflow">for</span> j <span class="keywordflow">in</span> range(len(deviceCopy.configuration)):</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                                        <span class="keywordflow">if</span> devicePicked.configuration[i].name == deviceCopy.configuration[j].name:</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                                            devicePicked.configuration[i] = copy.deepcopy(deviceCopy.configuration[j])</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                                            <span class="keywordflow">break</span></div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                    <span class="keywordflow">if</span> devicePicked.configuration[i].name == deviceCopy.configuration.name:</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                                        devicePicked.configuration[i] = copy.deepcopy(deviceCopy.configuration)</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                        <span class="keywordflow">if</span> <span class="keywordflow">not</span> deviceCopy.configuration <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                            <span class="keywordflow">if</span> isinstance(deviceCopy.configuration,list):</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                                <span class="keywordflow">for</span> j <span class="keywordflow">in</span> range(len(deviceCopy.configuration)):</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                                    <span class="keywordflow">if</span> devicePicked.configuration.name == deviceCopy.configuration[j].name:</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                        devicePicked.configuration = copy.deepcopy(deviceCopy.configuration[j])</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                                <span class="keywordflow">if</span> devicePicked.configuration.name == deviceCopy.configuration.name:</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;                                    devicePicked.configuration = copy.deepcopy(deviceCopy.configuration)</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                self.AddSpecificPart(devicePicked,updateRef=<span class="keyword">False</span>)</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keyword">def </span>onDuplicateSelected(self):</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        self.Drawing.DuplicateSelected()</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    <span class="keyword">def </span>onCutMultipleSelections(self):</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        self.Drawing.CutMultipleSelections()</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;    <span class="keyword">def </span>onDuplicate(self):</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;        self.Drawing.DuplicateSelectedDevice()</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    <span class="keyword">def </span>onAddWire(self):</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Wire.xhtml">SignalIntegrity.App.Wire</a> <span class="keyword">import</span> Vertex,Wire</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        wireProject=Wire()</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;        wireProject[<span class="stringliteral">&#39;Vertices&#39;</span>]=[Vertex((0,0),<span class="keyword">False</span>)]</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        self.Drawing.wireLoaded=wireProject</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        wireListProject=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.Schematic.Wires&#39;</span>]</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        wireListProject.append(self.Drawing.wireLoaded)</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        self.Drawing.stateMachine.WireLoaded()</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;    <span class="keyword">def </span>onAddPort(self):</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;        portNumber=1</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;        <span class="keywordflow">for</span> device <span class="keywordflow">in</span> self.Drawing.schematic.deviceList:</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            <span class="keywordflow">if</span> device[<span class="stringliteral">&#39;partname&#39;</span>].GetValue() == <span class="stringliteral">&#39;Port&#39;</span>:</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                <span class="keywordflow">if</span> portNumber &lt;= int(device[<span class="stringliteral">&#39;pn&#39;</span>].GetValue()):</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                    portNumber = int(device[<span class="stringliteral">&#39;pn&#39;</span>].GetValue())+1</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        dpe=DevicePropertiesDialog(self,Port(portNumber))</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        <span class="keywordflow">if</span> dpe.result != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;            self.Drawing.partLoaded = dpe.result</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;            self.Drawing.stateMachine.PartLoaded()</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160; </div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;    <span class="keyword">def </span>onAddNetName(self):</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;        self.AddSpecificPart(DeviceNetName())</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160; </div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keyword">def </span>onAddOutputProbe(self):</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        self.AddSpecificPart(DeviceOutput())</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160; </div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;    <span class="keyword">def </span>onAddMeasureProbe(self):</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;        self.AddSpecificPart(DeviceMeasurement())</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160; </div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="keyword">def </span>onAddStim(self):</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        self.AddSpecificPart(DeviceStim())</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160; </div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    <span class="keyword">def </span>AddSpecificPart(self,part,popDialog=True,updateRef=True):</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;        devicePicked=part</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        defaultProperty = devicePicked[<span class="stringliteral">&#39;defref&#39;</span>]</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keywordflow">if</span> updateRef:</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            <span class="keywordflow">if</span> defaultProperty != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;                defaultPropertyValue = defaultProperty.GetValue()</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;                uniqueReferenceDesignator = self.Drawing.schematic.NewUniqueReferenceDesignator(defaultPropertyValue)</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;                <span class="keywordflow">if</span> uniqueReferenceDesignator != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;                    devicePicked.AddPartProperty(PartPropertyReferenceDesignator(<span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                    devicePicked[<span class="stringliteral">&#39;ref&#39;</span>].SetValueFromString(uniqueReferenceDesignator)</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        <span class="keywordflow">if</span> popDialog:</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            dpe=DevicePropertiesDialog(self,devicePicked)</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;            <span class="keywordflow">if</span> dpe.result != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;                part=dpe.result</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;                part=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> part <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;            self.Drawing.partLoaded = part</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;            self.Drawing.stateMachine.PartLoaded()</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160; </div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keyword">def </span>onZoomIn(self):</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        drawingPropertiesProject=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.DrawingProperties&#39;</span>]</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>]=drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>]+1.</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        self.statusbar.set(<span class="stringliteral">&#39;Zoomed to grid: &#39;</span>+str(drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>]))</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160; </div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keyword">def </span>onZoomOut(self):</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        drawingPropertiesProject=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Drawing.DrawingProperties&#39;</span>]</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>] = max(1,drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>]-1.)</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        self.statusbar.set(<span class="stringliteral">&#39;Zoomed to grid: &#39;</span>+str(drawingPropertiesProject[<span class="stringliteral">&#39;Grid&#39;</span>]))</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160; </div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;    <span class="keyword">def </span>onPan(self):</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        self.Drawing.stateMachine.Panning()</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160; </div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;    <span class="keyword">def </span>onDeleteSelectedVertex(self):</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        self.Drawing.DeleteSelectedVertex()</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160; </div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keyword">def </span>onDuplicateSelectedVertex(self):</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        self.Drawing.DuplicateSelectedVertex()</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160; </div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="keyword">def </span>onDeleteSelectedWire(self):</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        self.Drawing.DeleteSelectedWire()</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160; </div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    <span class="keyword">def </span>CheckEquations(self):</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Equations.Valid&#39;</span>]:</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Project&#39;</span>,<span class="stringliteral">&#39;Equations Are Invalid&#39;</span>)</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160; </div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;    <span class="keyword">def </span>CalculateSParameters(self,netList=None):</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        <span class="keywordflow">if</span> netList==<span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;            netList=self.Drawing.schematic.NetList().Text()+<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;PostProcessing&#39;</span>].NetListLines()</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckEquations(): <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;        cacheFileName=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="keywordflow">if</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Cache.CacheResults&#39;</span>]:</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            cacheFileName=self.fileparts.FileNameTitle()</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Calculation&#39;</span>].ApplyPreferences()</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        spnp=si.p.SystemSParametersNumericParser(</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            si.fd.EvenlySpacedFrequencyList(</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;                <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;CalculationProperties.EndFrequency&#39;</span>],</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;                <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;CalculationProperties.FrequencyPoints&#39;</span>]),</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;            cacheFileName=cacheFileName)</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;        spnp.AddLines(netList)</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;        progressDialog = ProgressDialog(self,<span class="stringliteral">&quot;Calculating S-parameters&quot;</span>,spnp,spnp.SParameters,granularity=1.0)</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;            sp=progressDialog.GetResult()</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        <span class="keywordflow">except</span> si.SignalIntegrityException <span class="keyword">as</span> e:</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;S-parameter Calculator&#39;</span>,e.parameter+<span class="stringliteral">&#39;: &#39;</span>+e.message)</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;            <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        <span class="keywordflow">return</span> sp</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160; </div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    <span class="keyword">def </span>onCalculateSParameters(self):</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;        <span class="keywordflow">if</span> self.CalculateSParametersFromNetworkAnalyzerModelDoer.active:</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            sp=self.networkanalyzersimulator.Simulate(SParameters=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;            sp=self.CalculateSParameters()</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        <span class="keywordflow">if</span> sp <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;        self.spd=SParametersDialog(self,sp,filename=copy.copy(self.fileparts).FullFilePathExtension(<span class="stringliteral">&#39;s&#39;</span>+str(sp.m_P)+<span class="stringliteral">&#39;p&#39;</span>))</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160; </div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;    <span class="keyword">def </span>onPostProcessing(self):</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        PostProcessingDialog(self)</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160; </div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;    <span class="keyword">def </span>onEquations(self):</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        EquationsDialog(self)</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160; </div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="keyword">def </span>PrintProgress(self,iteration):</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;        self.statusbar.set(<span class="stringliteral">&#39;Fitting - iteration:&#39;</span>+str(self.m_fitter.ccm._IterationsTaken)+<span class="stringliteral">&#39; mse:&#39;</span>+str(self.m_fitter.m_mse))</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160; </div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keyword">def </span>PlotResult(self,iteration):</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        self.PrintProgress(iteration)</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        <span class="keywordflow">return</span></div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160; </div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <span class="keyword">def </span>onRLGC(self):</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;        sp=self.CalculateSParameters()</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;        <span class="keywordflow">if</span> sp <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        stepResponse=sp.FrequencyResponse(2,1).ImpulseResponse().Integral()</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;        threshold=(stepResponse[len(stepResponse)-1]+stepResponse[0])/2.0</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;        <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(stepResponse)):</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;            <span class="keywordflow">if</span> stepResponse[k]&gt;threshold: <span class="keywordflow">break</span></div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        dly=stepResponse.Times()[k]</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;        rho=sp.FrequencyResponse(1,1).ImpulseResponse().Integral(scale=<span class="keyword">False</span>).Measure(dly)</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        Z0=sp.m_Z0*(1.+rho)/(1.-rho)</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        <span class="keywordflow">if</span> sp.m_f[0]==0:</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;            S11_0=sp[0][0][0]; R=(2*S11_0*sp.m_Z0/(1.-S11_0)).real</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;            R=0</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;        L=dly*Z0; C=dly/Z0; guess=[R,L,0.,C,0.,0.]</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        <span class="comment">#pragma: silent exclude</span></div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        self.plotInitialized=<span class="keyword">False</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        <span class="comment">#pragma: include</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;        self.m_fitter=si.fit.RLGCFitter(sp,guess,self.PlotResult)</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        <span class="comment">#print(self.m_fitter.Results())</span></div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        (R,L,G,C,Rse,df)=self.m_fitter.Solve().Results()</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="comment">#         print &quot;series resistance: &quot;+ToSI(R,&#39;ohm&#39;)</span></div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;<span class="comment">#         print &quot;series inductance: &quot;+ToSI(L,&#39;H&#39;)</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;<span class="comment">#         print &quot;shunt conductance: &quot;+ToSI(G,&#39;S&#39;)</span></div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;<span class="comment">#         print &quot;shunt capacitance: &quot;+ToSI(C,&#39;F&#39;)</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;<span class="comment">#         print &quot;skin-effect resistance: &quot;+ToSI(Rse,&#39;ohm/sqrt(Hz)&#39;)</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;<span class="comment">#         print &quot;dissipation factor: &quot;+ToSI(df,&#39;&#39;)</span></div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        fitsp=si.sp.SParameters(sp.f(),[s <span class="keywordflow">for</span> s <span class="keywordflow">in</span> si.sp.dev.TLineTwoPortRLGC(sp.f(),R,Rse,L,G,C,df,sp.m_Z0)],sp.m_Z0)</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        SParametersDialog(self,fitsp,filename=self.fileparts.FullFilePathExtension(<span class="stringliteral">&#39;s&#39;</span>+str(sp.m_P)+<span class="stringliteral">&#39;p&#39;</span>))</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160; </div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        <span class="keywordflow">for</span> deviceToCheck <span class="keywordflow">in</span> DeviceList:</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;            <span class="keywordflow">if</span> deviceToCheck[<span class="stringliteral">&#39;partname&#39;</span>].GetValue()==<span class="stringliteral">&#39;Telegrapher&#39;</span>:</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;                <span class="keywordflow">if</span> deviceToCheck[<span class="stringliteral">&#39;ports&#39;</span>].GetValue()==2:</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;                    device=copy.deepcopy(deviceToCheck)</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;                    <span class="keywordflow">break</span></div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160; </div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;        device[<span class="stringliteral">&#39;r&#39;</span>].SetValueFromString(str(R)); device[<span class="stringliteral">&#39;r&#39;</span>][<span class="stringliteral">&#39;KeywordVisible&#39;</span>]=<span class="keyword">True</span>; device[<span class="stringliteral">&#39;r&#39;</span>][<span class="stringliteral">&#39;Visible&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        device[<span class="stringliteral">&#39;l&#39;</span>].SetValueFromString(str(L)); device[<span class="stringliteral">&#39;l&#39;</span>][<span class="stringliteral">&#39;KeywordVisible&#39;</span>]=<span class="keyword">True</span>; device[<span class="stringliteral">&#39;l&#39;</span>][<span class="stringliteral">&#39;Visible&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;        device[<span class="stringliteral">&#39;g&#39;</span>].SetValueFromString(str(G)); device[<span class="stringliteral">&#39;g&#39;</span>][<span class="stringliteral">&#39;KeywordVisible&#39;</span>]=<span class="keyword">True</span>; device[<span class="stringliteral">&#39;g&#39;</span>][<span class="stringliteral">&#39;Visible&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;        device[<span class="stringliteral">&#39;c&#39;</span>].SetValueFromString(str(C)); device[<span class="stringliteral">&#39;c&#39;</span>][<span class="stringliteral">&#39;KeywordVisible&#39;</span>]=<span class="keyword">True</span>; device[<span class="stringliteral">&#39;c&#39;</span>][<span class="stringliteral">&#39;Visible&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        device[<span class="stringliteral">&#39;rse&#39;</span>].SetValueFromString(str(Rse)); device[<span class="stringliteral">&#39;rse&#39;</span>][<span class="stringliteral">&#39;KeywordVisible&#39;</span>]=<span class="keyword">True</span>; device[<span class="stringliteral">&#39;rse&#39;</span>][<span class="stringliteral">&#39;Visible&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        device[<span class="stringliteral">&#39;df&#39;</span>].SetValueFromString(str(df)); device[<span class="stringliteral">&#39;df&#39;</span>][<span class="stringliteral">&#39;KeywordVisible&#39;</span>]=<span class="keyword">True</span>; device[<span class="stringliteral">&#39;df&#39;</span>][<span class="stringliteral">&#39;Visible&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        device[<span class="stringliteral">&#39;sect&#39;</span>][<span class="stringliteral">&#39;KeywordVisible&#39;</span>]=<span class="keyword">False</span>; device[<span class="stringliteral">&#39;sect&#39;</span>][<span class="stringliteral">&#39;Visible&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;        self.AddSpecificPart(device,popDialog=<span class="keyword">False</span>)</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160; </div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    <span class="keyword">def </span>onCalculationProperties(self):</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> hasattr(self, <span class="stringliteral">&#39;calculationPropertiesDialog&#39;</span>):</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;            self.calculationPropertiesDialog = CalculationPropertiesDialog(self)</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;        <span class="keywordflow">if</span> self.calculationPropertiesDialog == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;            self.calculationPropertiesDialog= CalculationPropertiesDialog(self)</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.calculationPropertiesDialog.winfo_exists():</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;                self.calculationPropertiesDialog=CalculationPropertiesDialog(self)</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;        self.calculationPropertiesDialog.grab_set()</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160; </div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;    <span class="keyword">def </span>onSimulate(self,TransferMatricesOnly=False):</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keywordflow">if</span> self.SimulateNetworkAnalyzerModelDoer.active:</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            self.networkanalyzersimulator.Simulate()</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;            self.simulator.Simulate(TransferMatricesOnly=TransferMatricesOnly)</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160; </div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="keyword">def </span>onVirtualProbe(self,TransferMatricesOnly=False):</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckEquations(): <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;        self.simulator.VirtualProbe(TransferMatricesOnly=TransferMatricesOnly)</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160; </div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;    <span class="keyword">def </span>onTransferParameters(self):</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;        <span class="keywordflow">if</span> self.SimulateDoer.active:</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;            self.onSimulate(TransferMatricesOnly=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        <span class="keywordflow">elif</span> self.VirtualProbeDoer.active:</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;            self.onVirtualProbe(TransferMatricesOnly=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160; </div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <span class="keyword">def </span>onDeembed(self):</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;        netList=self.Drawing.schematic.NetList().Text()+<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;PostProcessing&#39;</span>].NetListLines()</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckEquations(): <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        cacheFileName=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;        <span class="keywordflow">if</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Cache.CacheResults&#39;</span>]:</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;            cacheFileName=self.fileparts.FileNameTitle()</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Calculation&#39;</span>].ApplyPreferences()</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;        dnp=si.p.DeembedderNumericParser(</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;            si.fd.EvenlySpacedFrequencyList(</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;                <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;CalculationProperties.EndFrequency&#39;</span>],</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;                <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;CalculationProperties.FrequencyPoints&#39;</span>]),</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;                cacheFileName=cacheFileName)</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        dnp.AddLines(netList)</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160; </div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        progressDialog = ProgressDialog(self,<span class="stringliteral">&quot;Calculating De-embedded S-parameters&quot;</span>,dnp,dnp.Deembed,granularity=1.0)</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;            sp=progressDialog.GetResult()</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        <span class="keywordflow">except</span> si.SignalIntegrityException <span class="keyword">as</span> e:</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Deembedder&#39;</span>,e.parameter+<span class="stringliteral">&#39;: &#39;</span>+e.message)</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        unknownNames=dnp.m_sd.UnknownNames()</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;        <span class="keywordflow">if</span> len(unknownNames)==1:</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;            sp=[sp]</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        <span class="keywordflow">for</span> u <span class="keywordflow">in</span> range(len(unknownNames)):</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;            extension=<span class="stringliteral">&#39;.s&#39;</span>+str(sp[u].m_P)+<span class="stringliteral">&#39;p&#39;</span></div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;            filename=unknownNames[u]+extension</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;            <span class="keywordflow">if</span> self.fileparts.filename != <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;                filename=self.fileparts.filename+<span class="stringliteral">&#39;_&#39;</span>+filename</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;            SParametersDialog(self,sp[u],filename=filename)</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160; </div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    <span class="keyword">def </span>onCalculate(self):</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        self.SimulateDoer.Execute()</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        self.CalculateSParametersDoer.Execute()</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        self.VirtualProbeDoer.Execute()</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;        self.DeembedDoer.Execute()</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        self.CalculateErrorTermsDoer.Execute()</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160; </div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    <span class="keyword">def </span>onSParameterViewer(self):</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;        filename=AskOpenFileName(filetypes=[(<span class="stringliteral">&#39;s-parameter files&#39;</span>, (<span class="stringliteral">&#39;*.s*p&#39;</span>,<span class="stringliteral">&#39;*.S*P&#39;</span>)),(<span class="stringliteral">&#39;calibration files&#39;</span>, (<span class="stringliteral">&#39;*.cal&#39;</span>))],</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;                                 parent=self,</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                                 initialdir=self.fileparts.AbsoluteFilePath())</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;        fileparts=FileParts(filename)</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        <span class="keywordflow">if</span> fileparts.fileext <span class="keywordflow">is</span> <span class="keywordtype">None</span> <span class="keywordflow">or</span> fileparts.fileext == <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;        <span class="keywordflow">elif</span> fileparts.fileext == <span class="stringliteral">&#39;.cal&#39;</span>:</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;            self.calibration=self.OpenCalibrationFile(fileparts.FullFilePathExtension())</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;            self.ViewCalibration(self.calibration)</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;            sp=si.sp.SParameterFile(fileparts.FullFilePathExtension())</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;            SParametersDialog(self,sp,fileparts.FullFilePathExtension())</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160; </div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    <span class="keyword">def </span>onVariables(self):</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> hasattr(self, <span class="stringliteral">&#39;variablesDialog&#39;</span>):</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;            self.variablesDialog = VariablesDialog(self)</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <span class="keywordflow">if</span> self.variablesDialog == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;            self.variablesDialog= VariablesDialog(self)</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.variablesDialog.winfo_exists():</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;                self.variablesDialog=VariablesDialog(self)</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;        self.variablesDialog.grab_set()</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160; </div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;    <span class="keyword">def </span>onParameterizeProject(self):</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;        self.history.Event(<span class="stringliteral">&#39;parameterize project&#39;</span>)</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;        variables=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables&#39;</span>]</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <span class="keywordflow">for</span> device <span class="keywordflow">in</span> self.Drawing.schematic.deviceList:</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;            ref=device[<span class="stringliteral">&#39;ref&#39;</span>]</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;            <span class="keywordflow">if</span> ref != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                prefix=ref[<span class="stringliteral">&#39;Value&#39;</span>]</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;                <span class="keywordflow">if</span> prefix == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;                    prefix=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;                    prefix += <span class="stringliteral">&#39;_&#39;</span></div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                <span class="keywordflow">for</span> prop <span class="keywordflow">in</span> device.propertiesList:</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                    <span class="keywordflow">if</span> (<span class="keywordflow">not</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Variables.ParameterizeOnlyVisible&#39;</span>] <span class="keywordflow">or</span> prop[<span class="stringliteral">&#39;Visible&#39;</span>]) <span class="keywordflow">and</span> (<span class="keywordflow">not</span> prop[<span class="stringliteral">&#39;Hidden&#39;</span>]) <span class="keywordflow">and</span> prop[<span class="stringliteral">&#39;InProjectFile&#39;</span>] <span class="keywordflow">and</span> (<span class="keywordflow">not</span> prop[<span class="stringliteral">&#39;Keyword&#39;</span>] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;ref&#39;</span>,<span class="stringliteral">&#39;ports&#39;</span>,<span class="stringliteral">&#39;file&#39;</span>]):</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                        varName=prefix+prop[<span class="stringliteral">&#39;Keyword&#39;</span>]</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                        varValue=prop[<span class="stringliteral">&#39;Value&#39;</span>]</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;                        <span class="keywordflow">if</span> (<span class="keywordflow">not</span> ((len(varValue)&gt;1) <span class="keywordflow">and</span> (varValue[0]==<span class="stringliteral">&#39;=&#39;</span>))):</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;                            <span class="keywordflow">if</span> <span class="keywordflow">not</span> (varName <span class="keywordflow">in</span> variables.Names()):</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;                                variable=VariableConfiguration().InitFromPartProperty(varName,prop)</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;                                variables[<span class="stringliteral">&#39;Items&#39;</span>].append(variable)</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;                            prop.SetValueFromString(<span class="stringliteral">&#39;=&#39;</span>+varName)</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;                <span class="keywordflow">for</span> variable <span class="keywordflow">in</span> device.variablesList:</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                    varName=prefix+variable[<span class="stringliteral">&#39;Name&#39;</span>]</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                    varValue=variable[<span class="stringliteral">&#39;Value&#39;</span>]</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;                    <span class="keywordflow">if</span> (<span class="keywordflow">not</span> ((len(varValue)&gt;1) <span class="keywordflow">and</span> (varValue[0]==<span class="stringliteral">&#39;=&#39;</span>))):</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                        <span class="keywordflow">if</span> <span class="keywordflow">not</span> (varName <span class="keywordflow">in</span> variables.Names()):</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                            newVariable=copy.deepcopy(variable)</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;                            newVariable[<span class="stringliteral">&#39;Name&#39;</span>]=varName</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;                            newVariable[<span class="stringliteral">&#39;Value&#39;</span>]=varValue</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;                            variables[<span class="stringliteral">&#39;Items&#39;</span>].append(newVariable)</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;                        variable[<span class="stringliteral">&#39;Value&#39;</span>]=(<span class="stringliteral">&#39;=&#39;</span>+varName)</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;            self.Drawing.DrawSchematic()</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160; </div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <span class="keyword">def </span>onHelp(self):</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;        <span class="keywordflow">if</span> Doer.helpKeys <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Help System&#39;</span>,<span class="stringliteral">&#39;Cannot find or open this help element&#39;</span>)</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;        Doer.helpKeys.Open(<span class="stringliteral">&#39;sec:Introduction&#39;</span>)</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160; </div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;    <span class="keyword">def </span>onSoftwareDocumentation(self):</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;        <span class="keywordflow">if</span> Doer.helpKeys <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Help System&#39;</span>,<span class="stringliteral">&#39;Cannot find or open the software documentation&#39;</span>)</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;            <span class="keyword">import</span> webbrowser</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;            url=Doer.helpKeys.controlHelpUrlBase+Doer.helpKeys[<span class="stringliteral">&#39;SoftwareDocumentation&#39;</span>]</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;            webbrowser.open(url)</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Help System&#39;</span>,<span class="stringliteral">&#39;Cannot find or open the software documentation&#39;</span>)</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160; </div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    <span class="keyword">def </span>onControlHelp(self):</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;        Doer.inHelp = <span class="keywordflow">not</span> Doer.inHelp</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;        <span class="keywordflow">if</span> Doer.inHelp:</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;            self.NewProjectDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;            self.OpenProjectDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;            self.CloseProjectDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;            self.SaveProjectDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;            self.SaveAsProjectDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;            self.ClearProjectDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;            self.ExportNetListDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;            self.ExportTpXDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;            self.ExportPngDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;            self.ArchiveDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;            self.ExtractArchiveDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;            self.FreshenArchiveDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;            self.UnExtractArchiveDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;            <span class="comment"># ------</span></div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;            self.UndoDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;            self.RedoDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;            <span class="comment"># ------</span></div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;            self.AddPartDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;            self.AddNetNameDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;            self.AddPortDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;            self.AddMeasureProbeDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;            self.AddOutputProbeDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;            self.AddStimDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;            self.AddUnknownDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;            self.AddSystemDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            self.DeletePartDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;            self.DeleteSelectedDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;            self.EditPropertiesDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;            self.DuplicatePartDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;            self.DuplicateSelectedDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;            self.CutSelectedDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;            self.RotatePartDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;            self.FlipPartHorizontallyDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;            self.FlipPartVerticallyDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;            self.ConvertPartDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;            <span class="comment"># ------</span></div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;            self.AddWireDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;            self.DeleteVertexDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;            self.DuplicateVertexDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;            self.DeleteWireDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;            <span class="comment"># ------</span></div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;            self.ZoomInDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;            self.ZoomOutDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;            self.PanDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;            <span class="comment"># ------</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;            self.CalculationPropertiesDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;            self.PostProcessingDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;            self.SParameterViewerDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;            self.CalculateDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;            self.CalculateSParametersDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;            self.VirtualProbeDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;            self.SimulateDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;            self.TransferParametersDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;            self.DeembedDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;            self.RLGCDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;            self.CalculateSParametersFromNetworkAnalyzerModelDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;            self.SimulateNetworkAnalyzerModelDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;            <span class="comment"># ------</span></div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;            self.VariablesDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;            self.EquationsDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;            self.ParameterizeDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;            <span class="comment"># ------</span></div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;            self.HelpDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;            self.ControlHelpDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;            <span class="comment"># ------</span></div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;            self.EscapeDoer.Activate(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160; </div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;            self.config(cursor=<span class="stringliteral">&#39;question_arrow&#39;</span>)</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160; </div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;            self.statusbar.set(<span class="stringliteral">&#39;Control Help&#39;</span>)</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160; </div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;    <span class="keyword">def </span>onEscape(self):</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;        <span class="keywordflow">if</span> self.Drawing.stateMachine.state != <span class="stringliteral">&#39;NoProject&#39;</span>:</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;            self.Drawing.stateMachine.Nothing(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;            self.Drawing.stateMachine.NoProject(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;        self.config(cursor=<span class="stringliteral">&#39;left_ptr&#39;</span>)</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160; </div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;    <span class="keyword">def </span>onAbout(self):</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;        AboutDialog(self)</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160; </div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <span class="keyword">def </span>onPreferences(self):</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> hasattr(self, <span class="stringliteral">&#39;preferencesDialog&#39;</span>):</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;            self.preferencesDialog = PreferencesDialog(self,<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>)</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;        <span class="keywordflow">if</span> self.preferencesDialog == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;            self.preferencesDialog= PreferencesDialog(self,<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>)</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.preferencesDialog.winfo_exists():</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;                self.preferencesDialog=PreferencesDialog(self,<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>)</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160; </div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;    <span class="keyword">def </span>UpdateColorsAndFonts(self):</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        fontSizeDesired = <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.FontSize&#39;</span>]</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> fontSizeDesired <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;            default_font = font.nametofont(<span class="stringliteral">&quot;TkDefaultFont&quot;</span>)</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;                default_font.configure(size=fontSizeDesired)</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;                self.root.option_add(<span class="stringliteral">&quot;*Font&quot;</span>, default_font)</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;                PartPicture.textSpacing=fontSizeDesired+5</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                <span class="keywordflow">pass</span></div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160; </div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;        w=tk.Button(self.root)</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160; </div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;        backgroundColor=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.Color.Background&#39;</span>]</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        <span class="keywordflow">if</span> backgroundColor <span class="keywordflow">in</span> [<span class="keywordtype">None</span>,<span class="stringliteral">&#39;None&#39;</span>]:</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;            backgroundColor=w[<span class="stringliteral">&#39;background&#39;</span>]</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160; </div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        foregroundColor=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.Color.Foreground&#39;</span>]</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        <span class="keywordflow">if</span> foregroundColor <span class="keywordflow">in</span> [<span class="keywordtype">None</span>,<span class="stringliteral">&#39;None&#39;</span>]:</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;            foregroundColor=w[<span class="stringliteral">&#39;foreground&#39;</span>]</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160; </div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;        activeForegroundColor=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.Color.ActiveForeground&#39;</span>]</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;        <span class="keywordflow">if</span> activeForegroundColor <span class="keywordflow">in</span> [<span class="keywordtype">None</span>,<span class="stringliteral">&#39;None&#39;</span>]:</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;            activeForegroundColor=w[<span class="stringliteral">&#39;activeforeground&#39;</span>]</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160; </div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        activeBackgroundColor=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.Color.ActiveBackground&#39;</span>]</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;        <span class="keywordflow">if</span> activeBackgroundColor <span class="keywordflow">in</span> [<span class="keywordtype">None</span>,<span class="stringliteral">&#39;None&#39;</span>]:</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;            activeBackgroundColor=w[<span class="stringliteral">&#39;activebackground&#39;</span>]</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160; </div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;        disabledForegroundColor=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.Color.DisabledForeground&#39;</span>]</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;        <span class="keywordflow">if</span> disabledForegroundColor <span class="keywordflow">in</span> [<span class="keywordtype">None</span>,<span class="stringliteral">&#39;None&#39;</span>]:</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;            disabledForegroundColor=w[<span class="stringliteral">&#39;disabledforeground&#39;</span>]</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160; </div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;            self.root.tk_setPalette(</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;                foreground=foregroundColor,</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;                background=backgroundColor,</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;                activeforeground=activeForegroundColor,</div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;                activebackground=activeBackgroundColor,</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;                disabledforeground=disabledForegroundColor</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;                )</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;            <span class="keywordflow">pass</span></div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160; </div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        matPlotLibColor=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.Color.Plot&#39;</span>]</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> matPlotLibColor <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;            <span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;                mpl.rc(<span class="stringliteral">&quot;figure&quot;</span>, facecolor=matPlotLibColor)</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;                <span class="keywordflow">pass</span></div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160; </div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        self.root.update_idletasks()</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160; </div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;    <span class="keyword">def </span>UpdateFeatures(self):</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;        networkAnalyzerModelEnabled = <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Features.NetworkAnalyzerModel&#39;</span>]</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Device.xhtml">SignalIntegrity.App.Device</a> <span class="keyword">import</span> DeviceList</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        DeviceList.Enable(<span class="stringliteral">&#39;NetworkAnalyzerStimulus&#39;</span>,networkAnalyzerModelEnabled)</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        DeviceList.Enable(<span class="stringliteral">&#39;NetworkAnalyzerModel&#39;</span>,networkAnalyzerModelEnabled)</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;        DeviceList.Enable(<span class="stringliteral">&#39;DeviceUnderTest&#39;</span>,networkAnalyzerModelEnabled)</div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160; </div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;    <span class="keyword">def </span>CheckSaveCurrentProject(self):</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        <span class="keywordflow">if</span> self.Drawing.stateMachine.state == <span class="stringliteral">&#39;NoProject&#39;</span>:</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;ProjectFiles.AskToSaveCurrentFile&#39;</span>]:</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160; </div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;        filename=self.fileparts.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+self.fileparts.FileNameWithExtension(ext=<span class="stringliteral">&#39;.si&#39;</span>)</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> SignalIntegrity.App.Project.CheckFileChanged(filename):</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160; </div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;        doit =  messagebox.askyesnocancel(<span class="stringliteral">&#39;Wait....&#39;</span>,<span class="stringliteral">&#39;Do you want to save the current project first?&#39;</span>)</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160; </div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        <span class="keywordflow">if</span> doit <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;            <span class="keywordflow">if</span> doit:</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;                <span class="keywordflow">return</span> self.onSaveAsProject()</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160; </div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;    <span class="keyword">def </span>onClosing(self):</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;        <span class="keywordflow">if</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;            self.root.withdraw()</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;            self.root.destroy()</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160; </div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;    <span class="keyword">def </span>onBuildHelpKeys(self):</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;        <span class="keywordflow">if</span> Doer.helpKeys:</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;            Doer.helpKeys.Build()</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;            Doer.helpKeys.SaveToFile()</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;            self.statusbar.set(<span class="stringliteral">&#39;help keys updated&#39;</span>)</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160; </div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;    <span class="keyword">def </span>OpenCalibrationFile(self,filename):</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;        calibration=si.m.cal.Calibration(0,0)</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;            calibration.ReadFromFile(filename)</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;            calibration=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;        <span class="keywordflow">return</span> calibration</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160; </div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;    <span class="keyword">def </span>onOpenCalibrationFile(self):</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;        self.calibration=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;        filename=AskOpenFileName(filetypes=[(<span class="stringliteral">&#39;calibration files&#39;</span>, (<span class="stringliteral">&#39;*.cal&#39;</span>))],</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;                                 parent=self,</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;                                 initialdir=self.fileparts.AbsoluteFilePath())</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;        fileparts=FileParts(filename)</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;        <span class="keywordflow">if</span> fileparts.fileext <span class="keywordflow">is</span> <span class="keywordtype">None</span> <span class="keywordflow">or</span> fileparts.fileext == <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;        self.calibration=self.OpenCalibrationFile(fileparts.FullFilePathExtension())</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160; </div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;    <span class="keyword">def </span>onSaveCalibrationFile(self):</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;        extension=<span class="stringliteral">&#39;.cal&#39;</span></div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;        filename=AskSaveAsFilename(filetypes=[(<span class="stringliteral">&#39;calibration file&#39;</span>, <span class="stringliteral">&#39;.cal&#39;</span>)],</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                    defaultextension=extension,</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;                    initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;                    initialfile=self.fileparts.FileNameWithExtension(extension),</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;                    parent=self)</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;        self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;        self.calibration.WriteToFile(filename)</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160; </div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;    <span class="keyword">def </span>ViewCalibration(self,calibration):</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;        <span class="keywordflow">if</span> self.calibration != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;            self.spd=SParametersDialog(self,self.calibration,title=<span class="stringliteral">&#39;Calibration&#39;</span>,filename=self.fileparts.FullFilePathExtension(<span class="stringliteral">&#39;s&#39;</span>+str(self.calibration.ports)+<span class="stringliteral">&#39;p&#39;</span>))</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160; </div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;    <span class="keyword">def </span>onViewCalibrationFile(self):</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;        self.ViewCalibration(self.calibration)</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160; </div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <span class="keyword">def </span>CalculateErrorTerms(self):</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;        netList=self.Drawing.schematic.NetList().Text()</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckEquations(): <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;        cacheFileName=<span class="keywordtype">None</span></div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;        <span class="keywordflow">if</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Cache.CacheResults&#39;</span>]:</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;            cacheFileName=self.fileparts.FileNameTitle()</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Calculation&#39;</span>].ApplyPreferences()</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;        etnp=si.p.CalibrationNumericParser(</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;            si.fd.EvenlySpacedFrequencyList(</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;                <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;CalculationProperties.EndFrequency&#39;</span>],</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;                <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;CalculationProperties.FrequencyPoints&#39;</span>]),</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;            cacheFileName=cacheFileName)</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;        etnp.AddLines(netList)</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;        progressDialog = ProgressDialog(self,<span class="stringliteral">&quot;Calculating Error Terms&quot;</span>,etnp,etnp.CalculateCalibration,granularity=1.0)</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;            cal=progressDialog.GetResult()</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;        <span class="keywordflow">except</span> si.SignalIntegrityException <span class="keyword">as</span> e:</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Error Terms Calculator&#39;</span>,e.parameter+<span class="stringliteral">&#39;: &#39;</span>+e.message)</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;            <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;        <span class="keywordflow">return</span> cal</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160; </div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <span class="keyword">def </span>onCalculateErrorTerms(self):</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;        self.calibration=self.CalculateErrorTerms()</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;        self.onViewCalibrationFile()</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160; </div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <span class="keyword">def </span>onSimulateNetworkAnalyzerModel(self):</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;        self.onSimulate()</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160; </div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;    <span class="keyword">def </span>onCalculateSParametersFromNetworkAnalyzerModel(self):</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;        self.onCalculateSParameters()</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160; </div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;    <span class="keyword">def </span>onArchive(self):</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;        self.Drawing.stateMachine.Nothing()</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;        self.fileparts.fileext=<span class="stringliteral">&#39;.si&#39;</span> <span class="comment"># this is to fix a bug in case the extension gets changed from &#39;.si&#39; to something else, which I&#39;ve seen</span></div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;        fp=self.fileparts</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        <span class="keywordflow">if</span> os.path.exists(fp.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+fp.FileNameTitle()+<span class="stringliteral">&#39;.siz&#39;</span>):</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> messagebox.askokcancel(<span class="stringliteral">&#39;Archive&#39;</span>, <span class="stringliteral">&#39;Are you sure.  The archive file exists?\nThis will overwrite the contents of the archive.&#39;</span>):</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;                <span class="keywordflow">return</span></div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        msg=InformationMessage(self,<span class="stringliteral">&#39;Archiving&#39;</span>,<span class="stringliteral">&#39;Archiving: &#39;</span>+self.fileparts.filename+<span class="stringliteral">&#39;.siz\n Please wait.....&#39;</span>)</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;        archiveDict=Archive()</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;            <span class="comment"># build archive dictionary</span></div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;            archiveDict.BuildArchiveDictionary(self)</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> archiveDict:</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;                msg.destroy()</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;                messagebox.showerror(<span class="stringliteral">&#39;Archiving&#39;</span>,<span class="stringliteral">&#39;Nothing to archive&#39;</span>)</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;                <span class="keywordflow">return</span></div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;            self.update()</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;            <span class="comment"># archive dictionary exists.  copy all of the files in the archive to a directory underneath the project with the name postpended with &#39;_Archive&#39;</span></div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;            archiveDir=self.fileparts.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+self.fileparts.filename+<span class="stringliteral">&#39;_Archive&#39;</span></div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;            archiveDict.CopyArchiveFilesToDestination(archiveDir)</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;            archiveDict.ZipArchive(archiveName=self.fileparts.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+self.fileparts.filename+<span class="stringliteral">&#39;.siz&#39;</span>, archiveDir=self.fileparts.filename+<span class="stringliteral">&#39;_Archive&#39;</span>)</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;        <span class="keywordflow">except</span> SignalIntegrityExceptionArchive <span class="keyword">as</span> e:</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;            msg.destroy()</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;During archiving:&#39;</span>,e.message)</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        <span class="keywordflow">except</span> Exception <span class="keyword">as</span> e:</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;            msg.destroy()</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;During archiving:&#39;</span>,<span class="stringliteral">&#39;An unknown error occurred&#39;</span>)</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;        msg.destroy()</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;        msg=messagebox.showinfo(<span class="stringliteral">&#39;Archive complete&#39;</span>,<span class="stringliteral">&#39;Archive created: &#39;</span>+self.fileparts.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+self.fileparts.filename+<span class="stringliteral">&#39;.siz&#39;</span>)</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160; </div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;    <span class="keyword">def </span>ExtractArchive(self,filename,args={}):</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160; </div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;        msg=InformationMessage(self,<span class="stringliteral">&#39;Extracting Archive&#39;</span>,<span class="stringliteral">&#39;Extracting Archive: &#39;</span>+self.fileparts.filename+<span class="stringliteral">&#39;.siz\n Please wait.....&#39;</span>)</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160; </div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;            Archive.ExtractArchive(filename)</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;            msg.destroy()</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;During archive extraction:&#39;</span>,<span class="stringliteral">&#39;Extraction Failed.&#39;</span>)</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160; </div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;        msg.destroy()</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160; </div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;        fp=FileParts(filename)</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160; </div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;        <span class="keywordflow">if</span> os.path.exists(fp.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+fp.FileNameTitle()+<span class="stringliteral">&#39;_Archive&#39;</span>+<span class="stringliteral">&#39;/&#39;</span>+fp.FileNameTitle()+<span class="stringliteral">&#39;.si&#39;</span>):</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;            filename=fp.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+fp.FileNameTitle()+<span class="stringliteral">&#39;_Archive&#39;</span>+<span class="stringliteral">&#39;/&#39;</span>+fp.FileNameTitle()+<span class="stringliteral">&#39;.si&#39;</span></div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;            msg=messagebox.showinfo(<span class="stringliteral">&#39;Archive Extraction&#39;</span>,<span class="stringliteral">&#39;Archive Extraction Complete&#39;</span>)</div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;            filename=AskOpenFileName(title=<span class="stringliteral">&#39;Archive Extraction Complete&#39;</span>,</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;                                     filetypes=[(<span class="stringliteral">&#39;si&#39;</span>, <span class="stringliteral">&#39;.si&#39;</span>)],</div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;                                     initialdir=fp.AbsoluteFilePath()+<span class="stringliteral">&#39;/&#39;</span>+fp.FileNameTitle()+<span class="stringliteral">&#39;_Archive&#39;</span>,</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;                                     initialfile=fp.FileNameTitle()+<span class="stringliteral">&#39;.si&#39;</span>)</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160; </div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;        self.OpenProjectFile(filename,args)</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160; </div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;    <span class="keyword">def </span>onExtractArchive(self):</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160; </div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;        filename=AskOpenFileName(filetypes=[(<span class="stringliteral">&#39;siz&#39;</span>, <span class="stringliteral">&#39;.siz&#39;</span>)],</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;                                 initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;                                 initialfile=self.fileparts.FileNameWithExtension(<span class="stringliteral">&#39;.siz&#39;</span>))</div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160; </div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;        self.ExtractArchive(filename)</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160; </div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;    <span class="keyword">def </span>onFreshenArchive(self):</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.CheckSaveCurrentProject():</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160; </div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> messagebox.askokcancel(<span class="stringliteral">&#39;Freshen Archive&#39;</span>, <span class="stringliteral">&#39;Are you sure?\nThis will overwrite the contents of the archive.&#39;</span>):</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160; </div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;        msg=InformationMessage(self,<span class="stringliteral">&#39;Archive Freshening&#39;</span>,<span class="stringliteral">&#39;Freshening Archive. Please wait.....&#39;</span>)</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;            Archive.Freshen(self.fileparts.FileNameWithExtension())</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;            msg.destroy()</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Archive Freshening&#39;</span>,<span class="stringliteral">&#39;Freshening Failed&#39;</span>)</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;        msg.destroy()</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;        msg=messagebox.showinfo(<span class="stringliteral">&#39;Archive Freshening&#39;</span>,<span class="stringliteral">&#39;Archive Freshened&#39;</span>)</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160; </div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160; </div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;    <span class="keyword">def </span>onUnExtractArchive(self):</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> Archive.InAnArchive(self.fileparts.FullFilePathExtension()):</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160; </div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> messagebox.askokcancel(<span class="stringliteral">&#39;Unexctract Archive&#39;</span>, <span class="stringliteral">&#39;Are you absolutely sure?\nThis will delete all of the files in current directory&#39;</span>):</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;        msg=InformationMessage(self,<span class="stringliteral">&#39;Archive Unextract&#39;</span>,<span class="stringliteral">&#39;Unextracting Archive. Please wait.....&#39;</span>)</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;            self.onCloseProject()</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;            Archive.UnExtractArchive(self.fileparts.AbsoluteFilePath())</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;            msg.destroy()</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Archive Unextract&#39;</span>,<span class="stringliteral">&#39;Unextraction Failed&#39;</span>)</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;        msg.destroy()</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;        msg=messagebox.showinfo(<span class="stringliteral">&#39;Archive Unextract&#39;</span>,<span class="stringliteral">&#39;Archive Unextracted&#39;</span>)</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160; </div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;<span class="keyword">def </span>main():</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    projectFileName = <span class="keywordtype">None</span></div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;    external=<span class="keyword">False</span></div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    argsDict={}</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;    <span class="keywordflow">if</span> len(sys.argv) &gt;= 2:</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;        projectFileName=sys.argv[1]</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160; </div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;    <span class="keywordflow">if</span> len(sys.argv) &gt;= 3:</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;        <span class="keywordflow">if</span> sys.argv[2] == <span class="stringliteral">&#39;--external&#39;</span>:</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;            external = <span class="keyword">True</span></div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160; </div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        argsDict=dict(zip(sys.argv[3::2],sys.argv[4::2]))</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160; </div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    SignalIntegrityApp(projectFileName,external=external,args=argsDict)</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160; </div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;<span class="keywordflow">if</span> __name__ == <span class="stringliteral">&#39;__main__&#39;</span>: <span class="comment"># pragma: no cover</span></div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;    runProfiler=<span class="keyword">False</span></div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160; </div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    <span class="keywordflow">if</span> runProfiler:</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;        <span class="keyword">import</span> cProfile</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;        cProfile.run(<span class="stringliteral">&#39;main()&#39;</span>,<span class="stringliteral">&#39;stats&#39;</span>)</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160; </div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;        <span class="keyword">import</span> pstats</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        p = pstats.Stats(<span class="stringliteral">&#39;stats&#39;</span>)</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;        p.strip_dirs().sort_stats(<span class="stringliteral">&#39;cumulative&#39;</span>).print_stats(100)</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;        main()</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1VariablesDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1VariablesDialog.xhtml">SignalIntegrity.App.VariablesDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="VariablesDialog_8py_source.xhtml#l00001">VariablesDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1TpX_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1TpX.xhtml">SignalIntegrity.App.TpX</a></div><div class="ttdef"><b>Definition:</b> <a href="TpX_8py_source.xhtml#l00001">TpX.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Files_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Files.xhtml">SignalIntegrity.App.Files</a></div><div class="ttdef"><b>Definition:</b> <a href="Files_8py_source.xhtml#l00001">Files.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SignalIntegrityAppHeadless.xhtml">SignalIntegrity.App.SignalIntegrityAppHeadless</a></div><div class="ttdef"><b>Definition:</b> <a href="SignalIntegrityAppHeadless_8py_source.xhtml#l00001">SignalIntegrityAppHeadless.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1BuildHelpSystem_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1BuildHelpSystem.xhtml">SignalIntegrity.App.BuildHelpSystem</a></div><div class="ttdef"><b>Definition:</b> <a href="BuildHelpSystem_8py_source.xhtml#l00001">BuildHelpSystem.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1NetworkAnalyzer_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1NetworkAnalyzer.xhtml">SignalIntegrity.App.NetworkAnalyzer</a></div><div class="ttdef"><b>Definition:</b> <a href="App_2NetworkAnalyzer_8py_source.xhtml#l00001">NetworkAnalyzer.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1About_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1About.xhtml">SignalIntegrity.App.About</a></div><div class="ttdef"><b>Definition:</b> <a href="About_8py_source.xhtml#l00001">About.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ProjectFile_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ProjectFile.xhtml">SignalIntegrity.App.ProjectFile</a></div><div class="ttdef"><b>Definition:</b> <a href="ProjectFile_8py_source.xhtml#l00001">ProjectFile.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1PostProcessingDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1PostProcessingDialog.xhtml">SignalIntegrity.App.PostProcessingDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="PostProcessingDialog_8py_source.xhtml#l00001">PostProcessingDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Device_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Device.xhtml">SignalIntegrity.App.Device</a></div><div class="ttdef"><b>Definition:</b> <a href="App_2Device_8py_source.xhtml#l00001">Device.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1PartProperty_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1PartProperty.xhtml">SignalIntegrity.App.PartProperty</a></div><div class="ttdef"><b>Definition:</b> <a href="PartProperty_8py_source.xhtml#l00001">PartProperty.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1History_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1History.xhtml">SignalIntegrity.App.History</a></div><div class="ttdef"><b>Definition:</b> <a href="History_8py_source.xhtml#l00001">History.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1DevicePicker_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1DevicePicker.xhtml">SignalIntegrity.App.DevicePicker</a></div><div class="ttdef"><b>Definition:</b> <a href="DevicePicker_8py_source.xhtml#l00001">DevicePicker.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SParameterViewerWindow_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SParameterViewerWindow.xhtml">SignalIntegrity.App.SParameterViewerWindow</a></div><div class="ttdef"><b>Definition:</b> <a href="SParameterViewerWindow_8py_source.xhtml#l00001">SParameterViewerWindow.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Preferences_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a></div><div class="ttdef"><b>Definition:</b> <a href="Preferences_8py_source.xhtml#l00001">Preferences.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ToSI_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ToSI.xhtml">SignalIntegrity.App.ToSI</a></div><div class="ttdef"><b>Definition:</b> <a href="ToSI_8py_source.xhtml#l00001">ToSI.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Project_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div><div class="ttdef"><b>Definition:</b> <a href="Project_8py_source.xhtml#l00001">Project.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1____about_____xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1____about____.xhtml">SignalIntegrity.__about__</a></div><div class="ttdef"><b>Definition:</b> <a href="____about_____8py_source.xhtml#l00001">__about__.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers.xhtml">SignalIntegrity.App.MenuSystemHelpers</a></div><div class="ttdef"><b>Definition:</b> <a href="MenuSystemHelpers_8py_source.xhtml#l00001">MenuSystemHelpers.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1PreferencesDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1PreferencesDialog.xhtml">SignalIntegrity.App.PreferencesDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="PreferencesDialog_8py_source.xhtml#l00001">PreferencesDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1TikZ_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1TikZ.xhtml">SignalIntegrity.App.TikZ</a></div><div class="ttdef"><b>Definition:</b> <a href="TikZ_8py_source.xhtml#l00001">TikZ.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1DeviceProperties_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1DeviceProperties.xhtml">SignalIntegrity.App.DeviceProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="DeviceProperties_8py_source.xhtml#l00001">DeviceProperties.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Archive_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Archive.xhtml">SignalIntegrity.App.Archive</a></div><div class="ttdef"><b>Definition:</b> <a href="Archive_8py_source.xhtml#l00001">Archive.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ProgressDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ProgressDialog.xhtml">SignalIntegrity.App.ProgressDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="ProgressDialog_8py_source.xhtml#l00001">ProgressDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Simulator_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Simulator.xhtml">SignalIntegrity.App.Simulator</a></div><div class="ttdef"><b>Definition:</b> <a href="App_2Simulator_8py_source.xhtml#l00001">Simulator.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1EyeDiagramPropertiesDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1EyeDiagramPropertiesDialog.xhtml">SignalIntegrity.App.EyeDiagramPropertiesDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="EyeDiagramPropertiesDialog_8py_source.xhtml#l00001">EyeDiagramPropertiesDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1CalculationPropertiesDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1CalculationPropertiesDialog.xhtml">SignalIntegrity.App.CalculationPropertiesDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="CalculationPropertiesDialog_8py_source.xhtml#l00001">CalculationPropertiesDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1PartPicture_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1PartPicture.xhtml">SignalIntegrity.App.PartPicture</a></div><div class="ttdef"><b>Definition:</b> <a href="PartPicture_8py_source.xhtml#l00001">PartPicture.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1EquationsDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1EquationsDialog.xhtml">SignalIntegrity.App.EquationsDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="EquationsDialog_8py_source.xhtml#l00001">EquationsDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1FilePicker_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1FilePicker.xhtml">SignalIntegrity.App.FilePicker</a></div><div class="ttdef"><b>Definition:</b> <a href="FilePicker_8py_source.xhtml#l00001">FilePicker.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Wire_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Wire.xhtml">SignalIntegrity.App.Wire</a></div><div class="ttdef"><b>Definition:</b> <a href="Wire_8py_source.xhtml#l00001">Wire.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1InformationMessage_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1InformationMessage.xhtml">SignalIntegrity.App.InformationMessage</a></div><div class="ttdef"><b>Definition:</b> <a href="InformationMessage_8py_source.xhtml#l00001">InformationMessage.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1NetList_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1NetList.xhtml">SignalIntegrity.App.NetList</a></div><div class="ttdef"><b>Definition:</b> <a href="NetList_8py_source.xhtml#l00001">NetList.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Schematic_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Schematic.xhtml">SignalIntegrity.App.Schematic</a></div><div class="ttdef"><b>Definition:</b> <a href="Schematic_8py_source.xhtml#l00001">Schematic.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
