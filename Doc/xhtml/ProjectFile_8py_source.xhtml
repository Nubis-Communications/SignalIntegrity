<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/App/ProjectFile.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.3.1</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_970ef3fb0b92f0060bb9423c44cad0f7.xhtml">App</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ProjectFile.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1App_1_1ProjectFile.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">ProjectFile.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ProjectFileBase.xhtml">SignalIntegrity.App.ProjectFileBase</a> <span class="keyword">import</span> XMLConfiguration,XMLPropertyDefaultFloat,XMLPropertyDefaultString,XMLPropertyDefaultInt,XMLPropertyDefaultBool,XMLPropertyDefaultCoord</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ProjectFileBase.xhtml">SignalIntegrity.App.ProjectFileBase</a> <span class="keyword">import</span> ProjectFileBase,XMLProperty</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ToSI.xhtml">SignalIntegrity.App.ToSI</a> <span class="keyword">import</span> ToSI</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160; </div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">import</span> copy</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">import</span> os</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">class </span>DeviceNetListKeywordConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;DeviceNetListKeyword&#39;</span>,write=<span class="keyword">False</span>)</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Keyword&#39;</span>))</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;ShowKeyword&#39;</span>,<span class="keyword">True</span>))</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160; </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">class </span>DeviceNetListConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;DeviceNetList&#39;</span>,write=<span class="keyword">False</span>)</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;DeviceName&#39;</span>))</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;PartName&#39;</span>))</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;ShowReference&#39;</span>,<span class="keyword">True</span>))</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;ShowPorts&#39;</span>,<span class="keyword">True</span>))</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;Values&#39;</span>,[DeviceNetListKeywordConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=DeviceNetListKeywordConfiguration()))</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160; </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="keyword">class </span>PartPropertyConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;PartProperty&#39;</span>)</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Keyword&#39;</span>))</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;PropertyName&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Description&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Value&#39;</span>))</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;Hidden&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;Visible&#39;</span>))</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;KeywordVisible&#39;</span>))</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Type&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Unit&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;InProjectFile&#39;</span>,<span class="keyword">True</span>,<span class="keyword">False</span>))</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keyword">def </span>OutputXML(self,indent):</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;        <span class="keywordflow">if</span> self[<span class="stringliteral">&#39;InProjectFile&#39;</span>]:</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;            <span class="keywordflow">return</span> XMLConfiguration.OutputXML(self, indent)</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;            <span class="keywordflow">return</span> []</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160; </div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="keyword">class </span>PartPinConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;PartPin&#39;</span>,write=<span class="keyword">False</span>)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        self.Add(XMLPropertyDefaultInt(<span class="stringliteral">&#39;Number&#39;</span>))</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        self.Add(XMLPropertyDefaultCoord(<span class="stringliteral">&#39;ConnectionPoint&#39;</span>))</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Orientation&#39;</span>))</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;NumberVisible&#39;</span>))</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;Visible&#39;</span>))</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;NumberingMatters&#39;</span>))</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;NumberSide&#39;</span>,<span class="stringliteral">&#39;n&#39;</span>))</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160; </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="keyword">class </span>PartPictureConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;PartPicture&#39;</span>)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        self.Add(XMLPropertyDefaultInt(<span class="stringliteral">&#39;Index&#39;</span>,<span class="keywordtype">None</span>))</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;ClassName&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        self.Add(XMLPropertyDefaultCoord(<span class="stringliteral">&#39;Origin&#39;</span>))</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        self.Add(XMLPropertyDefaultInt(<span class="stringliteral">&#39;Orientation&#39;</span>))</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;MirroredVertically&#39;</span>,<span class="keyword">False</span>))</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;MirroredHorizontally&#39;</span>,<span class="keyword">False</span>))</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160; </div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="keyword">class </span>DeviceConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Device&#39;</span>)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;ClassName&#39;</span>))</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        self.SubDir(PartPictureConfiguration())</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;PartProperties&#39;</span>,[PartPropertyConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=PartPropertyConfiguration()))</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        self.SubDir(VariablesConfiguration())</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        self.SubDir(DeviceNetListConfiguration())</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="keywordflow">for</span> key <span class="keywordflow">in</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Devices&#39;</span>].dict.keys():</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;            self.SubDir(copy.deepcopy(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Devices&#39;</span>][key]),makeOnRead=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160; </div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="keyword">class </span>VertexConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Vertex&#39;</span>)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        self.Add(XMLPropertyDefaultCoord(<span class="stringliteral">&#39;Coord&#39;</span>))</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;Selected&#39;</span>,<span class="keyword">False</span>,<span class="keyword">False</span>))</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">#     def OutputXML(self,indent):</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">#         return [indent+&#39;&lt;Vertex&gt;&#39;+str(self.dict[&#39;Coord&#39;].dict[&#39;value&#39;])+&#39;&lt;/Vertex&gt;&#39;]</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160; </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="keyword">class </span>WireConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Wire&#39;</span>)</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;Vertices&#39;</span>,[VertexConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=VertexConfiguration()))</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160; </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">class </span>DrawingPropertiesConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;DrawingProperties&#39;</span>)</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        self.Add(XMLPropertyDefaultFloat(<span class="stringliteral">&#39;Grid&#39;</span>,16.))</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        self.Add(XMLPropertyDefaultInt(<span class="stringliteral">&#39;Originx&#39;</span>,1))</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        self.Add(XMLPropertyDefaultInt(<span class="stringliteral">&#39;Originy&#39;</span>,4))</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Geometry&#39;</span>,<span class="stringliteral">&#39;711x363+27+56&#39;</span>))</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160; </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="keyword">class </span>SchematicConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Schematic&#39;</span>)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;Devices&#39;</span>,[DeviceConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=DeviceConfiguration()))</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;Wires&#39;</span>,[WireConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=WireConfiguration()))</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160; </div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">class </span>DrawingConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Drawing&#39;</span>)</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;        self.SubDir(DrawingPropertiesConfiguration())</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;        self.SubDir(SchematicConfiguration())</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160; </div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="keyword">class </span>CalculationPropertiesBase(XMLConfiguration):</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <span class="keyword">def </span>__init__(self,Name,preferences=False):</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;        XMLConfiguration.__init__(self,Name)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> preferences:</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;            self.Add(XMLPropertyDefaultFloat(<span class="stringliteral">&#39;EndFrequency&#39;</span>,20e9))</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;            self.Add(XMLPropertyDefaultInt(<span class="stringliteral">&#39;FrequencyPoints&#39;</span>,2000))</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            self.Add(XMLPropertyDefaultFloat(<span class="stringliteral">&#39;UserSampleRate&#39;</span>,40e9))</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            self.Add(XMLPropertyDefaultFloat(<span class="stringliteral">&#39;UserSamplePeriod&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            self.Add(XMLPropertyDefaultFloat(<span class="stringliteral">&#39;BaseSampleRate&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;            self.Add(XMLPropertyDefaultFloat(<span class="stringliteral">&#39;BaseSamplePeriod&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;            self.Add(XMLPropertyDefaultInt(<span class="stringliteral">&#39;TimePoints&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;            self.Add(XMLPropertyDefaultFloat(<span class="stringliteral">&#39;FrequencyResolution&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;            self.Add(XMLPropertyDefaultFloat(<span class="stringliteral">&#39;ImpulseResponseLength&#39;</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;            self.CalculateOthersFromBaseInformation()</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keyword">def </span>InitFromXML(self,element):</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        XMLConfiguration.InitFromXML(self,element)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        self.CalculateOthersFromBaseInformation()</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keyword">def </span>CalculateOthersFromBaseInformation(self):</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        self[<span class="stringliteral">&#39;BaseSampleRate&#39;</span>]=self[<span class="stringliteral">&#39;EndFrequency&#39;</span>]*2</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        self[<span class="stringliteral">&#39;BaseSamplePeriod&#39;</span>]=1./self[<span class="stringliteral">&#39;BaseSampleRate&#39;</span>]</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        self[<span class="stringliteral">&#39;UserSamplePeriod&#39;</span>]=1./self[<span class="stringliteral">&#39;UserSampleRate&#39;</span>]</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        self[<span class="stringliteral">&#39;TimePoints&#39;</span>]=self[<span class="stringliteral">&#39;FrequencyPoints&#39;</span>]*2</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        self[<span class="stringliteral">&#39;FrequencyResolution&#39;</span>]=self[<span class="stringliteral">&#39;EndFrequency&#39;</span>]/self[<span class="stringliteral">&#39;FrequencyPoints&#39;</span>]</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        self[<span class="stringliteral">&#39;ImpulseResponseLength&#39;</span>]=1./self[<span class="stringliteral">&#39;FrequencyResolution&#39;</span>]</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keyword">def </span>InitFromXml(self,calculationPropertiesElement):</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        endFrequency=20e9</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        frequencyPoints=400</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        userSampleRate=40e9</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="keywordflow">for</span> calculationProperty <span class="keywordflow">in</span> calculationPropertiesElement:</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;            <span class="keywordflow">if</span> calculationProperty.tag == <span class="stringliteral">&#39;end_frequency&#39;</span>:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;                endFrequency=float(calculationProperty.text)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;            <span class="keywordflow">elif</span> calculationProperty.tag == <span class="stringliteral">&#39;frequency_points&#39;</span>:</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;                frequencyPoints=int(calculationProperty.text)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;            <span class="keywordflow">elif</span> calculationProperty.tag == <span class="stringliteral">&#39;user_samplerate&#39;</span>:</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;                userSampleRate = float(calculationProperty.text)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        self[<span class="stringliteral">&#39;EndFrequency&#39;</span>]=endFrequency</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        self[<span class="stringliteral">&#39;FrequencyPoints&#39;</span>]=frequencyPoints</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        self[<span class="stringliteral">&#39;UserSampleRate&#39;</span>]=userSampleRate</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        self.CalculateOthersFromBaseInformation()</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <span class="keyword">def </span>Dictionary(self):</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        <span class="keywordflow">return</span> {name:self[name] <span class="keywordflow">for</span> name <span class="keywordflow">in</span> [<span class="stringliteral">&#39;EndFrequency&#39;</span>,<span class="stringliteral">&#39;FrequencyPoints&#39;</span>,<span class="stringliteral">&#39;UserSampleRate&#39;</span>]}</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160; </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="keyword">class </span>CalculationProperties(CalculationPropertiesBase):</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        CalculationPropertiesBase.__init__(self,<span class="stringliteral">&#39;CalculationProperties&#39;</span>)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">class </span>PostProcessingLineConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;PostProcessingLine&#39;</span>)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Line&#39;</span>,<span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="keyword">class </span>PostProcessingConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;PostProcessing&#39;</span>)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;Lines&#39;</span>,[PostProcessingLineConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=PostProcessingLineConfiguration()))</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keyword">def </span>GetTextString(self):</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;            lines=[ppline[<span class="stringliteral">&#39;Line&#39;</span>] <span class="keywordflow">for</span> ppline <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Lines&#39;</span>]]</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;            goodlines=[]</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> line <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;                    goodlines.append(line)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;            textstr=<span class="stringliteral">&#39;\n&#39;</span>.join(goodlines)</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;            textstr=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        <span class="keywordflow">return</span> textstr</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">def </span>PutTextString(self,textstr):</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        lines=textstr.split(<span class="stringliteral">&#39;\n&#39;</span>)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        lines=[str(line) <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines]</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        goodlines=[]</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">if</span> line != <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;                goodlines.append(line)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        pplines=[PostProcessingLineConfiguration() <span class="keywordflow">for</span> line <span class="keywordflow">in</span> goodlines]</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordflow">for</span> l <span class="keywordflow">in</span> range(len(goodlines)):</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;            pplines[l][<span class="stringliteral">&#39;Line&#39;</span>]=lines[l]</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        self[<span class="stringliteral">&#39;Lines&#39;</span>]=pplines</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">def </span>NetListLines(self):</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;            lines=[ppline[<span class="stringliteral">&#39;Line&#39;</span>] <span class="keywordflow">for</span> ppline <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Lines&#39;</span>]]</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;            goodlines=[]</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> line <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;                    goodlines.append(<span class="stringliteral">&#39;post &#39;</span>+line)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;            goodlines=[]</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordflow">return</span> goodlines</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keyword">def </span>OutputXML(self,indent):</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">if</span> len(self[<span class="stringliteral">&#39;Lines&#39;</span>]) &gt; 0:</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;            <span class="keywordflow">return</span> XMLConfiguration.OutputXML(self, indent)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;            <span class="keywordflow">return</span> []</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="keyword">class </span>VariableConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Variable&#39;</span>)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Description&#39;</span>,<span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;Visible&#39;</span>,<span class="keyword">True</span>))</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Name&#39;</span>,<span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Type&#39;</span>,<span class="stringliteral">&#39;float&#39;</span>))</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Value&#39;</span>,<span class="stringliteral">&#39;0&#39;</span>))</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Units&#39;</span>,<span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;ReadOnly&#39;</span>,<span class="keyword">False</span>))</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    <span class="keyword">def </span>InitFromPartProperty(self,variableName,partProperty):</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;        self[<span class="stringliteral">&#39;Visible&#39;</span>]=partProperty[<span class="stringliteral">&#39;Visible&#39;</span>]</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        self[<span class="stringliteral">&#39;Description&#39;</span>]=partProperty[<span class="stringliteral">&#39;Description&#39;</span>]</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        self[<span class="stringliteral">&#39;Name&#39;</span>]=variableName</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        self[<span class="stringliteral">&#39;Type&#39;</span>]=partProperty[<span class="stringliteral">&#39;Type&#39;</span>]</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        self[<span class="stringliteral">&#39;Value&#39;</span>]=partProperty[<span class="stringliteral">&#39;Value&#39;</span>]</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        self[<span class="stringliteral">&#39;Units&#39;</span>]=partProperty[<span class="stringliteral">&#39;Unit&#39;</span>]</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordflow">if</span> self[<span class="stringliteral">&#39;Units&#39;</span>]==<span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;            self[<span class="stringliteral">&#39;Units&#39;</span>]=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        self[<span class="stringliteral">&#39;ReadOnly&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    <span class="keyword">def </span>CheckValidity(self):</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(self[<span class="stringliteral">&#39;Description&#39;</span>],str): <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(self[<span class="stringliteral">&#39;Name&#39;</span>],str): <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordflow">if</span> len(self[<span class="stringliteral">&#39;Name&#39;</span>]) == 0: <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(self[<span class="stringliteral">&#39;Type&#39;</span>],str): <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self[<span class="stringliteral">&#39;Type&#39;</span>] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;int&#39;</span>,<span class="stringliteral">&#39;float&#39;</span>,<span class="stringliteral">&#39;string&#39;</span>,<span class="stringliteral">&#39;file&#39;</span>]: <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(self[<span class="stringliteral">&#39;Value&#39;</span>],str): <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordflow">if</span> (len(self[<span class="stringliteral">&#39;Value&#39;</span>])&gt;0) <span class="keywordflow">and</span> (self[<span class="stringliteral">&#39;Value&#39;</span>][0]== <span class="stringliteral">&#39;=&#39;</span>) <span class="keywordflow">and</span> (len(self[<span class="stringliteral">&#39;Value&#39;</span>]) == 1): <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(self[<span class="stringliteral">&#39;Units&#39;</span>],str): <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    <span class="keyword">def </span>Value(self,forDisplay=False,resolveVariable=True):</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        value=self.GetValue(<span class="stringliteral">&#39;Value&#39;</span>)</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        type=self.GetValue(<span class="stringliteral">&#39;Type&#39;</span>)</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordflow">if</span> resolveVariable <span class="keywordflow">and</span> (len(value)&gt;0) <span class="keywordflow">and</span> (value[0]==<span class="stringliteral">&#39;=&#39;</span>):</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;            <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;            <span class="keywordflow">if</span> value[1:] <span class="keywordflow">in</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables&#39;</span>].Names():</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;                value=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables&#39;</span>].VariableByName(value[1:]).Value(forDisplay,<span class="keyword">False</span>)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordflow">if</span> type==<span class="stringliteral">&#39;file&#39;</span>:</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;            value=(<span class="stringliteral">&#39;/&#39;</span>.join(str(value).split(<span class="stringliteral">&#39;\\&#39;</span>)))</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="keywordflow">if</span> forDisplay <span class="keywordflow">and</span> (type==<span class="stringliteral">&#39;float&#39;</span>):</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;            value = str(ToSI(float(value),self.GetValue(<span class="stringliteral">&#39;Units&#39;</span>)))</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        <span class="keywordflow">return</span> value</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keyword">def </span>NetListLine(self):</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        value=str(self.GetValue(<span class="stringliteral">&#39;Value&#39;</span>))</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordflow">if</span> (self[<span class="stringliteral">&#39;Type&#39;</span>] == <span class="stringliteral">&#39;float&#39;</span>):</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;                value = str(ToSI(float(value),self.GetValue(<span class="stringliteral">&#39;Unit&#39;</span>),letterPrefixes=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;                value = <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">elif</span> self[<span class="stringliteral">&#39;Type&#39;</span>] == <span class="stringliteral">&#39;int&#39;</span>:</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            value = str(int(value))</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">elif</span> self[<span class="stringliteral">&#39;Type&#39;</span>] == <span class="stringliteral">&#39;file&#39;</span>:</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            value=(<span class="stringliteral">&#39;/&#39;</span>.join(str(os.path.abspath(value)).split(<span class="stringliteral">&#39;\\&#39;</span>)))</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            <span class="keywordflow">if</span> <span class="stringliteral">&#39; &#39;</span> <span class="keywordflow">in</span> value:</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                value=<span class="stringliteral">&quot;&#39;&quot;</span>+value+<span class="stringliteral">&quot;&#39;&quot;</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">if</span> value != <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;            <span class="keywordflow">return</span> <span class="stringliteral">&#39;$&#39;</span>+self[<span class="stringliteral">&#39;Name&#39;</span>]+<span class="stringliteral">&#39;$ &#39;</span>+ value</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;            <span class="keywordflow">return</span> value</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    <span class="keyword">def </span>DisplayString(self,displayVariable=True,resolveVariable=True,visible=True):</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        result=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        <span class="keywordflow">if</span> visible <span class="keywordflow">or</span> self.GetValue(<span class="stringliteral">&#39;Visible&#39;</span>):</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;            <span class="keywordflow">if</span> displayVariable <span class="keywordflow">and</span> (self.GetValue(<span class="stringliteral">&#39;Name&#39;</span>) != <span class="keywordtype">None</span>) <span class="keywordflow">and</span> (self.GetValue(<span class="stringliteral">&#39;Name&#39;</span>) != <span class="stringliteral">&#39;None&#39;</span>):</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                result=result+self.GetValue(<span class="stringliteral">&#39;Name&#39;</span>)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;            value=self.GetValue(<span class="stringliteral">&#39;Value&#39;</span>)</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;            type=self.GetValue(<span class="stringliteral">&#39;Type&#39;</span>)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;            prefix,suffix=<span class="stringliteral">&#39;&#39;</span>,<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;            <span class="keywordflow">if</span> (len(value)&gt;0) <span class="keywordflow">and</span> (value[0]==<span class="stringliteral">&#39;=&#39;</span>):</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                <span class="keywordflow">if</span> resolveVariable <span class="keywordflow">and</span> displayVariable:</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                    result=result+value+<span class="stringliteral">&#39; &#39;</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                    <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;                    <span class="keywordflow">if</span> value[1:] <span class="keywordflow">in</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables&#39;</span>].Names():</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;                        value = <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a>[<span class="stringliteral">&#39;Variables&#39;</span>].VariableByName(value[1:]).DisplayString(<span class="keyword">False</span>,<span class="keyword">False</span>)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                        <span class="keywordflow">if</span> (len(value)&gt;0) <span class="keywordflow">and</span> (value[0]==<span class="stringliteral">&#39;=&#39;</span>):</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                            value=value[1:]</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                        result=result+<span class="stringliteral">&#39;(&#39;</span>+value+<span class="stringliteral">&#39;)&#39;</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                        <span class="keywordflow">return</span> result</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            <span class="keywordflow">elif</span> displayVariable:</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;                result=result+<span class="stringliteral">&#39; &#39;</span></div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">if</span> (len(value)&gt;0) <span class="keywordflow">and</span> (value[0]==<span class="stringliteral">&#39;=&#39;</span>):</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                value=value[1:]</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                prefix,suffix=<span class="stringliteral">&#39;(&#39;</span>,<span class="stringliteral">&#39;)&#39;</span></div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                result=result+<span class="stringliteral">&#39; (&#39;</span>+value+<span class="stringliteral">&#39;)&#39;</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                <span class="keywordflow">return</span> result</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;            <span class="keywordflow">elif</span> type == <span class="stringliteral">&#39;file&#39;</span>:</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                value=(<span class="stringliteral">&#39;/&#39;</span>.join(str(self.GetValue(<span class="stringliteral">&#39;Value&#39;</span>)).split(<span class="stringliteral">&#39;\\&#39;</span>))).split(<span class="stringliteral">&#39;/&#39;</span>)[-1]</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;            <span class="keywordflow">elif</span> type == <span class="stringliteral">&#39;float&#39;</span>:</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                value = str(ToSI(float(self.GetValue(<span class="stringliteral">&#39;Value&#39;</span>)),self.GetValue(<span class="stringliteral">&#39;Units&#39;</span>),round=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.RoundDisplayedValues&#39;</span>]))</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> value == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                result=result+prefix+value+suffix</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;        <span class="keywordflow">return</span> result</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="keyword">class </span>VariablesConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Variables&#39;</span>)</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;Items&#39;</span>,[VariableConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=VariableConfiguration()))</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    <span class="keyword">def </span>NetListLines(self):</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">return</span> [<span class="stringliteral">&#39;var &#39;</span>+variable.NetListLine() <span class="keywordflow">for</span> variable <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Items&#39;</span>]]</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keyword">def </span>Names(self):</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        <span class="keywordflow">return</span> [variable[<span class="stringliteral">&#39;Name&#39;</span>] <span class="keywordflow">for</span> variable <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Items&#39;</span>]]</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    <span class="keyword">def </span>VariableByName(self,name):</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;        <span class="keywordflow">return</span> self[<span class="stringliteral">&#39;Items&#39;</span>][self.Names().index(name)]</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    <span class="keyword">def </span>OutputXML(self,indent):</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        <span class="keywordflow">if</span> len(self[<span class="stringliteral">&#39;Items&#39;</span>]) &gt; 0:</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordflow">return</span> XMLConfiguration.OutputXML(self, indent)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">return</span> []</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <span class="keyword">def </span>DisplayStrings(self,displayVariable=True,resolveVariable=True,visible=True):</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        textLimit = <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.LimitText&#39;</span>]</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        result=[]</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        <span class="keywordflow">for</span> variable <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Items&#39;</span>]:</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            displayString=variable.DisplayString(displayVariable,resolveVariable,visible)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;            <span class="keywordflow">if</span> displayString != <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                <span class="keywordflow">if</span> len(displayString) &gt; textLimit:</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                    displayString = displayString[:textLimit]+<span class="stringliteral">&#39;...&#39;</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                result.append(displayString)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        <span class="keywordflow">return</span> result</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;    <span class="keyword">def </span>Dictionary(self,variableList=None):</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keywordflow">if</span> variableList == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            variableList=self[<span class="stringliteral">&#39;Items&#39;</span>]</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        args={}</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        <span class="keywordflow">for</span> variable <span class="keywordflow">in</span> variableList:</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;            name=variable[<span class="stringliteral">&#39;Name&#39;</span>]</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;            value=variable.Value()</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="keywordflow">if</span> variable[<span class="stringliteral">&#39;Type&#39;</span>] == <span class="stringliteral">&#39;file&#39;</span>:</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                value=os.path.abspath(value)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;            args[name]=value</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        <span class="keywordflow">return</span> args</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160; </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="keyword">class </span>EquationLineConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;EquationLine&#39;</span>)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;        self.Add(XMLPropertyDefaultString(<span class="stringliteral">&#39;Line&#39;</span>,<span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160; </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="keyword">class </span>EquationsConfiguration(XMLConfiguration):</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        XMLConfiguration.__init__(self,<span class="stringliteral">&#39;Equations&#39;</span>)</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;AutoDebug&#39;</span>,<span class="keyword">True</span>))</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        self.Add(XMLPropertyDefaultBool(<span class="stringliteral">&#39;Valid&#39;</span>,<span class="keyword">False</span>,write=<span class="keyword">False</span>))</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        self.Add(XMLProperty(<span class="stringliteral">&#39;Lines&#39;</span>,[EquationLineConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(0)],<span class="stringliteral">&#39;array&#39;</span>,arrayType=EquationLineConfiguration()))</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;    <span class="keyword">def </span>GetTextString(self):</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            lines=[ppline[<span class="stringliteral">&#39;Line&#39;</span>] <span class="keywordflow">for</span> ppline <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Lines&#39;</span>]]</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            goodlines=[]</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> line <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                    goodlines.append(line)</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;            textstr=<span class="stringliteral">&#39;\n&#39;</span>.join(goodlines)</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;            textstr=<span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;        <span class="keywordflow">return</span> textstr</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="keyword">def </span>PutTextString(self,textstr):</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        lines=textstr.split(<span class="stringliteral">&#39;\n&#39;</span>)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        lines=[str(line) <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines]</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        goodlines=[]</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        <span class="keywordflow">for</span> line <span class="keywordflow">in</span> lines:</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;            <span class="keywordflow">if</span> line != <span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                goodlines.append(line)</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        pplines=[EquationLineConfiguration() <span class="keywordflow">for</span> line <span class="keywordflow">in</span> goodlines]</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keywordflow">for</span> l <span class="keywordflow">in</span> range(len(goodlines)):</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;            pplines[l][<span class="stringliteral">&#39;Line&#39;</span>]=lines[l]</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        self[<span class="stringliteral">&#39;Lines&#39;</span>]=pplines</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160; </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="keyword">class </span>ProjectFile(ProjectFileBase):</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    <span class="keyword">def </span>__init__(self):</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        ProjectFileBase.__init__(self,<span class="stringliteral">&#39;si&#39;</span>)</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        self.SubDir(DrawingConfiguration())</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        self.SubDir(CalculationProperties())</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        self.SubDir(PostProcessingConfiguration())</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;        self.SubDir(VariablesConfiguration())</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;        self.SubDir(EquationsConfiguration())</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;        <span class="comment"># for backwards compatibility with projects with global eye diagram configurations, allow for these projects to be</span></div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;        <span class="comment"># read properly - the eye diagram configuration will then be assigned to each device, and when the project file is</span></div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="comment"># saved, the global eye diagram configuration will be removed</span></div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;        <span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a></div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;        self.SubDir(copy.deepcopy(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Devices&#39;</span>][<span class="stringliteral">&#39;EyeDiagram&#39;</span>]),makeOnRead=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="comment"># end of backward compatibility to be removed some day</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;        <span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Wire.xhtml">SignalIntegrity.App.Wire</a> <span class="keyword">import</span> WireList</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        self[<span class="stringliteral">&#39;Drawing.Schematic&#39;</span>].dict[<span class="stringliteral">&#39;Wires&#39;</span>]=WireList()</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160; </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keyword">def </span>Read(self,filename=None):</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;            ProjectFileBase.Read(self, filename)</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    <span class="keyword">def </span>Write(self,app,filename=None):</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        self[<span class="stringliteral">&#39;Drawing.Schematic.Devices&#39;</span>]=[DeviceConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(len(app.Drawing.schematic.deviceList))]</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordflow">for</span> d <span class="keywordflow">in</span> range(len(self[<span class="stringliteral">&#39;Drawing.Schematic.Devices&#39;</span>])):</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;            deviceProject=self[<span class="stringliteral">&#39;Drawing.Schematic.Devices&#39;</span>][d]</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;            device=app.Drawing.schematic.deviceList[d]</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> device.configuration <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;                <span class="keywordflow">if</span> isinstance(device.configuration,list):</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;                    <span class="keywordflow">for</span> config <span class="keywordflow">in</span> device.configuration:</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;                        deviceProject.SubDir(config)</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;                    deviceProject.SubDir(device.configuration)</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;            deviceProject[<span class="stringliteral">&#39;ClassName&#39;</span>]=device.__class__.__name__</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;            partPictureProject=deviceProject[<span class="stringliteral">&#39;PartPicture&#39;</span>]</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;            partPicture=device.partPicture</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;            partPictureProject[<span class="stringliteral">&#39;Index&#39;</span>]=partPicture.partPictureSelected</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;            partPictureProject[<span class="stringliteral">&#39;ClassName&#39;</span>]=partPicture.partPictureClassList[partPicture.partPictureSelected]</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;            partPictureProject[<span class="stringliteral">&#39;Origin&#39;</span>]=partPicture.current.origin</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;            partPictureProject[<span class="stringliteral">&#39;Orientation&#39;</span>]=partPicture.current.orientation</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;            partPictureProject[<span class="stringliteral">&#39;MirroredVertically&#39;</span>]=partPicture.current.mirroredVertically</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;            partPictureProject[<span class="stringliteral">&#39;MirroredHorizontally&#39;</span>]=partPicture.current.mirroredHorizontally</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;            deviceProject[<span class="stringliteral">&#39;PartProperties&#39;</span>]=device.propertiesList</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;            deviceProject[<span class="stringliteral">&#39;Variables&#39;</span>][<span class="stringliteral">&#39;Items&#39;</span>]=device.variablesList</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;            deviceNetListProject=deviceProject[<span class="stringliteral">&#39;DeviceNetList&#39;</span>]</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;            deviceNetList=device.netlist</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;            <span class="keywordflow">for</span> n <span class="keywordflow">in</span> deviceNetList.dict:</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;                deviceNetListProject[n]=deviceNetList[n]</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            ProjectFileBase.Write(self,filename)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160; </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;    @staticmethod</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    <span class="keyword">def </span>EvaluateSafely(equations,sendargs,returnargs):</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keywordflow">for</span> argkey <span class="keywordflow">in</span> sendargs.keys():</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            arg=sendargs[argkey]</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;            <span class="keywordflow">if</span> isinstance(arg,str):</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;                exec(argkey+<span class="stringliteral">&#39; = &quot;&#39;</span>+arg+<span class="stringliteral">&#39;&quot;&#39;</span>)</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;                exec(argkey+<span class="stringliteral">&#39; = &#39;</span>+str(arg))</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        exec(equations)</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">for</span> argkey <span class="keywordflow">in</span> returnargs.keys():</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;                exec(str(<span class="stringliteral">&quot;returnargs[argkey] = eval(argkey)&quot;</span>))</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;            <span class="keywordflow">except</span> NameError:</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;                <span class="keywordflow">pass</span></div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="keywordflow">return</span> returnargs</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160; </div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    <span class="keyword">def </span>EvaluateEquations(self,equations=None):</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">if</span> (equations != <span class="keywordtype">None</span>) <span class="keywordflow">or</span> (self[<span class="stringliteral">&#39;Equations.Lines&#39;</span>] != []):</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            variablesDefinition=[(variable[<span class="stringliteral">&#39;Name&#39;</span>],variable[<span class="stringliteral">&#39;Value&#39;</span>]) <span class="keywordflow">for</span> variable <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Variables.Items&#39;</span>]]</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;            equationsDefinition=self[<span class="stringliteral">&#39;Equations&#39;</span>].GetTextString() <span class="keywordflow">if</span> equations == <span class="keywordtype">None</span> <span class="keywordflow">else</span> equations</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;                calculate = (variablesDefinition != self.variablesDefinition) <span class="keywordflow">or</span> (equationsDefinition != self.equationsDefinition)</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;                calculate=<span class="keyword">True</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            <span class="keywordflow">if</span> calculate:</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;                self[<span class="stringliteral">&#39;Equations.Valid&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;                self.variablesDefinition = variablesDefinition</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;                self.equationsDefinition = equationsDefinition</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;                self[<span class="stringliteral">&#39;Equations.Valid&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;                sendargs={}; returnargs={}</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;                <span class="keywordflow">for</span> variable <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Variables.Items&#39;</span>]:</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;                    <span class="keywordflow">if</span> variable[<span class="stringliteral">&#39;ReadOnly&#39;</span>]:</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;                        returnargs[variable[<span class="stringliteral">&#39;Name&#39;</span>]]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;                    <span class="keywordflow">if</span> <span class="keywordflow">not</span> variable[<span class="stringliteral">&#39;ReadOnly&#39;</span>]:</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;                        <span class="keywordflow">if</span> variable[<span class="stringliteral">&#39;Type&#39;</span>] <span class="keywordflow">in</span> [<span class="stringliteral">&#39;file&#39;</span>,<span class="stringliteral">&#39;string&#39;</span>]:</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;                            sendargs[variable[<span class="stringliteral">&#39;Name&#39;</span>]]=str(variable[<span class="stringliteral">&#39;Value&#39;</span>])</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;                        <span class="keywordflow">elif</span> variable[<span class="stringliteral">&#39;Type&#39;</span>] == <span class="stringliteral">&#39;float&#39;</span>:</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;                            sendargs[variable[<span class="stringliteral">&#39;Name&#39;</span>]]=float(variable[<span class="stringliteral">&#39;Value&#39;</span>])</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;                        <span class="keywordflow">elif</span> variable[<span class="stringliteral">&#39;Type&#39;</span>] == <span class="stringliteral">&#39;int&#39;</span>:</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;                            sendargs[variable[<span class="stringliteral">&#39;Name&#39;</span>]]=int(variable[<span class="stringliteral">&#39;Value&#39;</span>])</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;                <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;                    <span class="keywordflow">if</span> equations == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;                        equations=self[<span class="stringliteral">&#39;Equations&#39;</span>].GetTextString()</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                    returnargs=self.EvaluateSafely(equations,sendargs,returnargs)</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                <span class="keywordflow">except</span> Exception <span class="keyword">as</span> e:</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                    print(e)</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                    <span class="keywordflow">return</span> e</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                <span class="keywordflow">for</span> variable <span class="keywordflow">in</span> self[<span class="stringliteral">&#39;Variables.Items&#39;</span>]:</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                    <span class="keywordflow">if</span> variable[<span class="stringliteral">&#39;ReadOnly&#39;</span>] <span class="keywordflow">and</span> returnargs[variable[<span class="stringliteral">&#39;Name&#39;</span>]] != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                        variable[<span class="stringliteral">&#39;Value&#39;</span>]=returnargs[variable[<span class="stringliteral">&#39;Name&#39;</span>]]</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                self[<span class="stringliteral">&#39;Equations.Valid&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;            self[<span class="stringliteral">&#39;Equations.Valid&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        <span class="keywordflow">return</span> <span class="keywordtype">None</span></div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ProjectFileBase_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ProjectFileBase.xhtml">SignalIntegrity.App.ProjectFileBase</a></div><div class="ttdef"><b>Definition:</b> <a href="ProjectFileBase_8py_source.xhtml#l00001">ProjectFileBase.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Preferences_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a></div><div class="ttdef"><b>Definition:</b> <a href="Preferences_8py_source.xhtml#l00001">Preferences.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ToSI_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ToSI.xhtml">SignalIntegrity.App.ToSI</a></div><div class="ttdef"><b>Definition:</b> <a href="ToSI_8py_source.xhtml#l00001">ToSI.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Project_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div><div class="ttdef"><b>Definition:</b> <a href="Project_8py_source.xhtml#l00001">Project.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Wire_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Wire.xhtml">SignalIntegrity.App.Wire</a></div><div class="ttdef"><b>Definition:</b> <a href="Wire_8py_source.xhtml#l00001">Wire.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
