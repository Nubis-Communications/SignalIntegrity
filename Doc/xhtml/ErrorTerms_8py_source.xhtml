<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/Lib/Measurement/Calibration/ErrorTerms.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.3.2</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_ba9856180bcd39f2b51d38e1b9ddb228.xhtml">Lib</a></li><li class="navelem"><a class="el" href="dir_64597e4b29af68bffc48ff23d2e6147e.xhtml">Measurement</a></li><li class="navelem"><a class="el" href="dir_dcfb6f296b70e457fa328c698135798b.xhtml">Calibration</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">ErrorTerms.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral"> ErrorTerms</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160; </div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keyword">from</span> numpy <span class="keyword">import</span> array,zeros,identity</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">from</span> numpy.linalg <span class="keyword">import</span> det,norm,pinv,inv</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="keyword">import</span> cmath</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib_1_1Exception.xhtml">SignalIntegrity.Lib.Exception</a> <span class="keyword">import</span> SignalIntegrityExceptionMeasurement</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160; </div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="keyword">class </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">ErrorTerms</a>(object):</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;    <span class="stringliteral">&quot;&quot;&quot;Error terms for VNA and TDR based s-parameter calculations.  </span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="stringliteral">    Error terms are, for P ports, a P x P matrix of lists of three error terms.</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="stringliteral">    For the diagonal elements, the three error terms are ED, ER, and ES in that order</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="stringliteral">    for the off diagonal elements, the three error terms are EX, ET and EL in that order</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="stringliteral">    for r in 0...P-1, and c in 0...P-1,  ET[r][c] = [ED[r],ER[r],ES[r]], when r==c</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="stringliteral">    ET[r][c]=[EX[r][c],ET[r][c],EL[r][c]] when r !=c  </span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="stringliteral">    ET[r][c] refers to the error terms at port r when driven at port c</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="stringliteral">    in other words, if r==c, then:  </span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="stringliteral">    ET[r][r][0] = EDr  </span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="stringliteral">    ET[r][r][1] = ERr  </span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="stringliteral">    ET[r][r][2] = ESr  </span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="stringliteral">    and when r!=c, then:  </span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="stringliteral">    ET[r][c][0]=EXrc  </span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="stringliteral">    ET[r][c][1]=ETrc  </span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="stringliteral">    ET[r][c][2]=ELrc  </span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="stringliteral">    &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#ad8cdadc2d29a11c5f69d487c0bf1a7a3">__init__</a>(self,ET=None):</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Constructor</span></div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">   45</a></span>&#160;<span class="stringliteral">        @param ET (optional) instance of class ErrorTerms</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>=ET</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> ET <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>=len(ET)</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#ad8cdadc2d29a11c5f69d487c0bf1a7a3">   50</a></span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;            self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a76b02819f5b0a67b717af159f71f4ca3">Initialize</a>(self,numPorts):</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Initialize  </span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="stringliteral">        Initializes the number of ports and all of the three error terms for</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="stringliteral">        each row and column of the error terms to zero.</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="stringliteral">        @param numPorts integer number of ports for the error terms</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>=numPorts</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>=[[[<span class="keywordtype">None</span>,<span class="keywordtype">None</span>,<span class="keywordtype">None</span>] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>)]</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;                 <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>)]</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a76b02819f5b0a67b717af159f71f4ca3">   63</a></span>&#160;    <span class="keyword">def </span>CheckErrorTerms(self):</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;        <span class="keywordflow">for</span> other <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>):</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;            <span class="keywordflow">for</span> driven <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>):</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;                <span class="keywordflow">if</span> any(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[other][driven][t]==<span class="keywordtype">None</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;                       <span class="keywordflow">for</span> t <span class="keywordflow">in</span> range(len(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[other][driven]))):</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;                    <span class="keywordflow">raise</span> SignalIntegrityExceptionMeasurement(<span class="stringliteral">&#39;Not all error terms calculated&#39;</span>)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a09d744e748042e2e2403b060e71570a2">InitializeFromFixtures</a>(self,fixtureList):</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Initialize from list of fixtures  </span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="stringliteral">        @param fixtureList list of list of list s-parameter fixture matrices</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="stringliteral"></span> </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="stringliteral">        The number of matrices is the number of ports P and each matrix must be</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="stringliteral">        2P x 2P corresponding to the fixture format</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a76b02819f5b0a67b717af159f71f4ca3">Initialize</a>(len(fixtureList))</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(fixtureList)):</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;            <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(fixtureList)):</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;                <span class="keywordflow">if</span> r==c:</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[r][r][0]=fixtureList[r][r][r]</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a09d744e748042e2e2403b060e71570a2">   82</a></span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[r][r][1]=fixtureList[r][r][r+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>]</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[r][r][2]=fixtureList[r][r+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>][r+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>]</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[r][c][0]=fixtureList[c][r][c]</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[r][c][1]=fixtureList[c][r][r+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>]</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;                    self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[r][c][2]=fixtureList[c][r+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>][r+self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>]</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#aab91ae2e037c39b631a69273c277bfe9">__getitem__</a>(self,item):</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;overloads [item]</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="stringliteral">        @param item integer row of the error term matrix to access</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="stringliteral">        @remark This is typically used to access an error term where self[o][d][i]</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="stringliteral">        would access the ith error term for port o with port d driven.</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">return</span> self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">ET</a>[item]</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#afb72282df42e631477c1658bc52a6a91">ReflectCalibration</a>(self,hatGamma,Gamma,m):</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;performs a reflect calibration  </span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="stringliteral">        Computes the directivity, reverse transmission, and source match terms</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="stringliteral">        for a given port and frequency from a list of measurements and actual standard</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="stringliteral">        values and updates itself.</span></div>
<div class="line"><a name="l00101"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#aab91ae2e037c39b631a69273c277bfe9">  101</a></span>&#160;<span class="stringliteral">        @param hatGamma list of complex measurements of reflect standards</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="stringliteral">        @param Gamma list of complex actual values of the reflect standards</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="stringliteral">        @param m integer index of port</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;        <span class="comment"># pragma: silent exclude</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;        <span class="keywordflow">if</span> len(Gamma)&lt;3: <span class="keywordflow">raise</span> SignalIntegrityExceptionMeasurement(<span class="stringliteral">&#39;Insufficient reflect measurements&#39;</span>)</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;        <span class="comment"># pragma: include</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        A=[[1.,Gamma[r]*hatGamma[r],-Gamma[r]] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(Gamma))]</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;        B=[[hatGamma[r]] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(Gamma))]</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;        EdEsDeltaS=(pinv(array(A)).dot(array(B))).tolist()</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;        Ed=EdEsDeltaS[0][0]</div>
<div class="line"><a name="l00113"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#afb72282df42e631477c1658bc52a6a91">  113</a></span>&#160;        Es=EdEsDeltaS[1][0]</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        DeltaS=EdEsDeltaS[2][0]</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        Er=Ed*Es-DeltaS</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;        self[m][m]=[Ed,Er,Es]</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a06196443ad991bcdaccb2db32f396f00">ThruCalibration</a>(self,b1a1,b2a1,S,n,m):</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;performs a thru calibration  </span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="stringliteral">        Computes the forward transmission and load match terms</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="stringliteral">        for a given driven and undriven port and frequency from a list of measurements and actual</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="stringliteral">        standard values and updates itself.</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="stringliteral">        @param b1a1 list or single complex value for ratio of reflect to incident at driven port.</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="stringliteral">        @param b2a1 list or single complex value for ratio of reflect to incident at undriven port.</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="stringliteral">        @param S list or single list of list matrix representing s-parameters of thru standard</span></div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="stringliteral">        @param n integer index of undriven port</span></div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;<span class="stringliteral">        @param m integer index of driven port</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="stringliteral">        @return self</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;        <span class="comment"># pragma: silent exclude</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> isinstance(b1a1,list):</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;            b1a1=[b1a1]</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            b2a1=[b2a1]</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;            S=[S]</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        <span class="comment"># pragma: include</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;        [Ed,Er,Es]=self[m][m]</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        Ex=self[n][m][0]</div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a06196443ad991bcdaccb2db32f396f00">  138</a></span>&#160;        <span class="comment"># pragma: silent exclude</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="keywordflow">if</span> any(errorterm==<span class="keywordtype">None</span> <span class="keywordflow">for</span> errorterm <span class="keywordflow">in</span> [Ed,Er,Es,Ex]):</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;            <span class="keywordflow">raise</span> SignalIntegrityExceptionMeasurement(<span class="stringliteral">&#39;Thru calibration with missing reflect terms&#39;</span>)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        <span class="comment"># pragma: include</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        A=zeros((2*len(b1a1),2)).tolist()</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        B=zeros((2*len(b1a1),1)).tolist()</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(b1a1)):</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;            Sm=S[i]</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;            detS=det(array(Sm))</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;            A[2*i][0]=(Es*detS-Sm[1][1])*(Ed-b1a1[i])-Er*detS</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;            A[2*i][1]=0.</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;            A[2*i+1][0]=(Es*detS-Sm[1][1])*(Ex-b2a1[i])</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;            A[2*i+1][1]=Sm[1][0]</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;            B[2*i][0]=(1.-Es*Sm[0][0])*(b1a1[i]-Ed)-Er*Sm[0][0]</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;            B[2*i+1][0]=(1-Es*Sm[0][0])*(b2a1[i]-Ex)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        ElEt=(pinv(array(A)).dot(array(B))).tolist()</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        (El,Et)=(ElEt[0][0],ElEt[1][0])</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        self[n][m]=[Ex,Et,El]</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a0691340eddd7e5c139220f62b76525ce">UnknownThruCalibration</a>(self,Sm,Sest,firstPort,secondPort):</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Computes the unknown thru  </span></div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="stringliteral">        for a given set of measurements of a thru and an estimate of the thru the actual value of the</span></div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;<span class="stringliteral">        thru is calculated.</span></div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;<span class="stringliteral">        @param Sm list of list raw sparameter measurement of the thru.</span></div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="stringliteral">        @param Sest list of list estimate of the thru</span></div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="stringliteral">        @param firstPort integer zero based port number of port 1 of thru standard</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="stringliteral">        @param secondPort integer zero based port number of port 2 of thru standard</span></div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="stringliteral">        @return list of list sparameter value of the thru</span></div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="stringliteral">        @remark normally this algorithm is used to compute the error terms directly (which are actually</span></div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="stringliteral">        calculated here), but only the recovered thru value is returned.  This is so that an actual thru</span></div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="stringliteral">        measurement can be created with this thru value.  If the thru measurement is provided with this</span></div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="stringliteral">        calculated value of the thru, the error terms will be recalculated as calculated here, but returning</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="stringliteral">        the value of the thru allows the estimate to be checked for validity, and more importantly, allows</span></div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="stringliteral">        for multiple thru measurements to be provided to allow for overconstrained, better calibrations.</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;<span class="stringliteral">        Additionally, the s-parameters of the entire thru measurement (not just at a single frequency) can be</span></div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="stringliteral">        impulse response limited to provide an even more improved estimate of the thru.</span></div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="comment"># pragma: silent exclude</span></div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        <span class="comment"># comment this in for debugging - it allows one to compare ET and EL calculated here with what it would</span></div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="comment"># be with a known thru calibration</span></div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment">#         self.ThruCalibration(Sm[0][0], Sm[1][0],Sest,secondPort, firstPort)</span></div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">#         self.ThruCalibration(Sm[1][1], Sm[0][1],[[Sest[1][1],Sest[1][0]],[Sest[0][1],Sest[0][0]]],firstPort,secondPort)</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        <span class="comment"># pragma: include</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        [ED1,ER1,ES1]=self[firstPort][firstPort]</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        [ED2,ER2,ES2]=self[secondPort][secondPort]</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        [EX12,ET12,EL12]=self[firstPort][secondPort]</div>
<div class="line"><a name="l00184"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a0691340eddd7e5c139220f62b76525ce">  184</a></span>&#160;        [EX21,ET21,EL21]=self[secondPort][firstPort]</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="comment"># pragma: silent exclude</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        <span class="keywordflow">if</span> any(errorterm==<span class="keywordtype">None</span> <span class="keywordflow">for</span> errorterm <span class="keywordflow">in</span> [ED1,ER1,ES1,ED2,ER2,ES2,EX12,EX21]):</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;            <span class="keywordflow">raise</span> SignalIntegrityExceptionMeasurement(<span class="stringliteral">&#39;Unknown thru calibration with missing reflect terms&#39;</span>)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        <span class="comment"># pragma: include</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        p=cmath.sqrt((Sm[0][1]-EX12)/(Sm[1][0]-EX21))</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        [EX12,ET12,EL12]=[EX12,cmath.sqrt(ER1)*cmath.sqrt(ER2)*p,ES1]</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        [EX21,ET21,EL21]=[EX21,cmath.sqrt(ER1)*cmath.sqrt(ER2)/p,ES2]</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        DutCalc1=<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">ErrorTerms</a>([[[ED1,ER1,ES1],[EX12,ET12,EL12]],</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;                             [[EX21,ET21,EL21],[ED2,ER2,ES2]]]).<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#aaa6e6ac77165a6c7c8b54e66b3cbdedc">DutCalculation</a>(Sm)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        DutCalc2=<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">ErrorTerms</a>([[[ED1,ER1,ES1],[EX12,-ET12,EL12]],</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;                             [[EX21,-ET21,EL21],[ED2,ER2,ES2]]]).<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#aaa6e6ac77165a6c7c8b54e66b3cbdedc">DutCalculation</a>(Sm)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordflow">if</span> norm(array(DutCalc1)-array(Sest)) &lt; norm(array(DutCalc2)-array(Sest)):</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;            <span class="keywordflow">return</span> DutCalc1</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;            <span class="keywordflow">return</span> DutCalc2</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">def </span>InitializeExCalibration(self):</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        <span class="keywordflow">for</span> other <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>):</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;            <span class="keywordflow">for</span> driven <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>):</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                <span class="keywordflow">if</span> other != driven:</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                    self[other][driven][0]=0.</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a7dd89d542be158c0b13f2c0b7f2a852c">ExCalibration</a>(self,b2a1,n,m):</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Computes the crosstalk term  </span></div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="stringliteral">         For a given driven and undriven port and frequency from a list of measurements and actual</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="stringliteral">         standard values and updates itself.</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="stringliteral">         @param b2a1 single complex value for ratio of reflect to incident at undriven port.</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="stringliteral">         @param n integer index of undriven port</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="stringliteral">         @param m integer index of driven port</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="stringliteral">         @return self</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="stringliteral">         &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        [_,Et,El]=self[n][m]</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        Ex=b2a1</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        self[n][m]=[Ex,Et,El]</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#ac22781b57de46a1993aaaf0104cb2331">TransferThruCalibration</a>(self):</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Performs the transfer thru calibrations.  </span></div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="stringliteral">        After all of the thru calibration calculations have been performed, it looks to see if there</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="stringliteral">        are any port combinations where a thru was not connected and attempts to perform the &#39;transfer</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;<span class="stringliteral">        thru&#39; calibration that uses other thru measurements to form the thru calibration for a given</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;<span class="stringliteral">        port combination.&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a7dd89d542be158c0b13f2c0b7f2a852c">  224</a></span>&#160;        didOne=<span class="keyword">True</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        <span class="keywordflow">while</span> didOne:</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;            didOne=<span class="keyword">False</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;            <span class="keywordflow">for</span> otherPort <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>):</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;                <span class="keywordflow">for</span> drivenPort <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>):</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;                    <span class="keywordflow">if</span> (otherPort == drivenPort):</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;                        <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;                    <span class="keywordflow">if</span> ((self[otherPort][drivenPort][1]==<span class="keywordtype">None</span>) <span class="keywordflow">and</span></div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;                        (self[otherPort][drivenPort][2]==<span class="keywordtype">None</span>)):</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;                        <span class="keywordflow">for</span> mid <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>):</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;                            <span class="keywordflow">if</span> ((mid != otherPort) <span class="keywordflow">and</span></div>
<div class="line"><a name="l00235"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#ac22781b57de46a1993aaaf0104cb2331">  235</a></span>&#160;                                (mid != drivenPort) <span class="keywordflow">and</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;                                ((self[otherPort][mid][1]!=<span class="keywordtype">None</span>) <span class="keywordflow">or</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;                                 (self[otherPort][mid][2]!=<span class="keywordtype">None</span>)) <span class="keywordflow">and</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;                                ((self[mid][drivenPort][1]!=<span class="keywordtype">None</span>) <span class="keywordflow">or</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;                                 (self[mid][drivenPort][2]!=<span class="keywordtype">None</span>))):</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;                                (_,Etl,_)=self[otherPort][mid]</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                (_,Etr,_)=self[mid][drivenPort]</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                (_,Erm,_)=self[mid][mid]</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                (_,_,Eso)=self[otherPort][otherPort]</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;                                (Ex,Et,El)=self[otherPort][drivenPort]</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;                                Et=Etl*Etr/Erm</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;                                El=Eso</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;                                self[otherPort][drivenPort]=[Ex,Et,El]</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;                                didOne=<span class="keyword">True</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;                                <span class="keywordflow">continue</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        <span class="keywordflow">return</span> self</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a4d5d834e5b7cfc40772ac42491124f7b">Fixture</a>(self,m,pl=None):</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Fixture  </span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="stringliteral">        For a P port measurement, the s-parameters are for a 2*P port</span></div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="stringliteral">        fixture containing the error terms when port m driven going between</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="stringliteral">        the insrument ports and the DUT ports where</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="stringliteral">        the first P ports are the instrument port connections and the remaining</span></div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="stringliteral">        ports connect to the DUT.</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="stringliteral">        @param m integer driven port</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;<span class="stringliteral">        @param pl (optional) list of zero based port numbers of the DUT</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="stringliteral">        @return a list of list s-parameter matrix</span></div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="stringliteral">        @remark If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="stringliteral">        number of ports in sRaw, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;<span class="stringliteral">        m is assumed to be in integer zero based index in the ports list pl</span></div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        <span class="keywordflow">if</span> pl <span class="keywordflow">is</span> <span class="keywordtype">None</span>: pl = [p <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">numPorts</a>)]</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        numPorts=len(pl)</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        E=[[zeros((numPorts,numPorts),complex).tolist(),</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;            zeros((numPorts,numPorts),complex).tolist()],</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;           [zeros((numPorts,numPorts),complex).tolist(),</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;            zeros((numPorts,numPorts),complex).tolist()]]</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(numPorts):</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;            ETn=self[pl[n]][pl[m]]</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;            E[0][0][n][m]=ETn[0]</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;            E[0][1][n][n]=ETn[1]</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;            E[1][1][n][n]=ETn[2]</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        E[1][0][m][m]=1.</div>
<div class="line"><a name="l00277"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a4d5d834e5b7cfc40772ac42491124f7b">  277</a></span>&#160;        <span class="keywordflow">return</span> E</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a4d311b624f6d2be96bfabac7bd7d056e">DutCalculationAlternate</a>(self,sRaw,pl=None,reciprocal=False):</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Alternate Dut Calculation</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="stringliteral">        @deprecated This provides a DUT calculation according to the Wittwer method,</span></div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="stringliteral">        but a better,simpler method has been found.</span></div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="stringliteral">        @param sRaw list of list s-parameter matrix of raw measured DUT</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="stringliteral">        @param pl (optional) list of zero based port numbers of the DUT</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="stringliteral">        @param reciprocal (optional, defaults to False) whether to enforce reciprocity</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="stringliteral">        @return list of list s-parameter matrix of calibrated DUT measurement</span></div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="stringliteral">        @remark if reciprocity is True, the reciprocity is enforced in the calculation</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;<span class="stringliteral">        @see _EnforceReciprocity</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;<span class="stringliteral">        @see DutCalculation</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        <span class="keywordflow">if</span> pl <span class="keywordflow">is</span> <span class="keywordtype">None</span>: pl = [p <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(len(sRaw))]</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        numPorts=len(pl)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        <span class="keywordflow">if</span> numPorts==1:</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;            (Ed,Er,Es)=self[pl[0]][pl[0]]</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            gamma=sRaw[0][0]</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;            Gamma=(gamma-Ed)/((gamma-Ed)*Es+Er)</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            <span class="keywordflow">return</span> [[Gamma]]</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            A=zeros((numPorts,numPorts),complex).tolist()</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;            B=zeros((numPorts,numPorts),complex).tolist()</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;            I=(identity(numPorts)).tolist()</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;            <span class="keywordflow">for</span> m <span class="keywordflow">in</span> range(numPorts):</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                E=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a4d5d834e5b7cfc40772ac42491124f7b">Fixture</a>(m,pl)</div>
<div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a4d311b624f6d2be96bfabac7bd7d056e">  303</a></span>&#160;                b=array([[sRaw[r][m]] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numPorts)])</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                Im=array([[I[r][m]] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numPorts)])</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                bprime=(pinv(array(E[0][1])).dot(b-array(E[0][0]).dot(Im))).tolist()</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                aprime=(array(E[1][0]).dot(Im)+array(E[1][1]).dot(array(bprime))).tolist()</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(numPorts):</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                    A[r][m]=aprime[r][0]</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    B[r][m]=bprime[r][0]</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> reciprocal: S=(array(B).dot(pinv(array(A)))).tolist()</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;        <span class="keywordflow">else</span>: S=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a12823ca27400ba1347c8e71d55f4387a">_EnforceReciprocity</a>(A,B)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordflow">return</span> S</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#aaa6e6ac77165a6c7c8b54e66b3cbdedc">DutCalculation</a>(self,sRaw,pl=None,reciprocal=False):</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Calculates a DUT</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="stringliteral">        @param sRaw list of list s-parameter matrix of raw measured DUT</span></div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="stringliteral">        @param pl (optional) list of zero based port numbers of the DUT</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="stringliteral">        @param reciprocal (optional, defaults to False) whether to enforce reciprocity</span></div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="stringliteral">        @return list of list s-parameter matrix of calibrated DUT measurement</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="stringliteral">        @remark This provides a newer, simpler DUT calculation</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="stringliteral">        @remark If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="stringliteral">        number of ports in sRaw, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;<span class="stringliteral">        @remark if reciprocity is True, the reciprocity is enforced in the calculation</span></div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;<span class="stringliteral">        @see _EnforceReciprocity</span></div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;<span class="stringliteral">        @see DutCalculationAlternate</span></div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;        P=len(sRaw); Pr=range(P)</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;        <span class="keywordflow">if</span> pl <span class="keywordflow">is</span> <span class="keywordtype">None</span>: pl = [p <span class="keywordflow">for</span> p <span class="keywordflow">in</span> Pr]</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        B=[[(sRaw[r][c]-self[pl[r]][pl[c]][0])/self[pl[r]][pl[c]][1]</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;            <span class="keywordflow">for</span> c <span class="keywordflow">in</span> Pr] <span class="keywordflow">for</span> r <span class="keywordflow">in</span>  Pr]</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;        A=[[B[r][c]*self[pl[r]][pl[c]][2]+(1 <span class="keywordflow">if</span> r==c <span class="keywordflow">else</span> 0) <span class="keywordflow">for</span> c <span class="keywordflow">in</span> Pr] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> Pr]</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> reciprocal: S=(array(B).dot(pinv(array(A)))).tolist()</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;        <span class="keywordflow">else</span>: S=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a12823ca27400ba1347c8e71d55f4387a">_EnforceReciprocity</a>(A,B)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;        <span class="keywordflow">return</span> S</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;    <span class="keyword">def </span>_EnforceReciprocity(self,A,B):</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;Given S*A=B, Calculates a DUT in S enforcing reciprocity</span></div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="stringliteral">        @param A list of list matrix</span></div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="stringliteral">        @param B list of list matrix</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="stringliteral">        @return list of list s-parameter matrix of calibrated DUT measurement with reciprocity enforced</span></div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="stringliteral">        @see DutCalculation, DutCalculationAlternate</span></div>
<div class="line"><a name="l00340"></a><span class="lineno"><a class="line" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#aaa6e6ac77165a6c7c8b54e66b3cbdedc">  340</a></span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        P=len(A); Pr=range(P); M=[[<span class="keywordtype">None</span> <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> Pr] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> Pr]</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> Pr:</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            <span class="keywordflow">for</span> r <span class="keywordflow">in</span> Pr:</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                M[r][c]=M[c][r] <span class="keywordflow">if</span> r &lt; c <span class="keywordflow">else</span> r-c+(0 <span class="keywordflow">if</span> c==0 <span class="keywordflow">else</span> M[P-1][c-1]+1)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;        L=[[0. <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(P*(P+1)//2)] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(P*P)]</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        b=[<span class="keywordtype">None</span> <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(P*P)]</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordflow">for</span> r <span class="keywordflow">in</span> Pr:</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;            <span class="keywordflow">for</span> c <span class="keywordflow">in</span> Pr:</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                b[r*P+c]=[B[r][c]]</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                <span class="keywordflow">for</span> p <span class="keywordflow">in</span> Pr: L[p*P+r][M[p][c]]=A[c][r]</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;        sv=(pinv(array(L)).dot(array(b))).tolist()</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        S=[[sv[M[r][c]][0] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> Pr] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> Pr]</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">return</span> S</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;    <span class="keyword">def </span><a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a52a177541a0a7affc13f2dbd2fe1f618">DutUnCalculation</a>(self,S,pl=None):</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;        <span class="stringliteral">&quot;&quot;&quot;undoes the DUT calculation</span></div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="stringliteral">        @param S list of list s-parameter matrix a DUT</span></div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="stringliteral">        @param pl (optional) list of zero based port numbers of the DUT</span></div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;<span class="stringliteral">        @return list of list s-parameter matrix of raw measured s-parameters</span></div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;<span class="stringliteral">        @remark If the portList is None, then it assumed to be a list [0,1,2,P-1] where P is the</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="stringliteral">        number of ports in sRaw, otherwise ports can be specified where the DUT is connected.</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="stringliteral">        &quot;&quot;&quot;</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        <span class="keywordflow">if</span> pl <span class="keywordflow">is</span> <span class="keywordtype">None</span>: pl = [p <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(len(S))]</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        Sp=[[<span class="keywordtype">None</span> <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(S))] <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(S))]</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        Si=pinv(array(S))</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">for</span> c <span class="keywordflow">in</span> range(len(S)):</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            E=self.<a class="code" href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a4d5d834e5b7cfc40772ac42491124f7b">Fixture</a>(c,pl)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;            Em=[[array(E[0][0]),array(E[0][1])],[array(E[1][0]),array(E[1][1])]]</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;            col=(Em[0][0].dot(Em[1][0])+Em[0][1].dot(</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                pinv(Si-Em[1][1])).dot(Em[1][0])).tolist()</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;            <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(len(S)): Sp[r][c]=col[r][c]</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        <span class="keywordflow">return</span> Sp</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a4d5d834e5b7cfc40772ac42491124f7b"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a4d5d834e5b7cfc40772ac42491124f7b">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.Fixture</a></div><div class="ttdeci">def Fixture(self, m, pl=None)</div><div class="ttdoc">Fixture   For a P port measurement, the s-parameters are for a 2*P port fixture containing the error ...</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00277">ErrorTerms.py:277</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a5afa51a694401683fb7d4dda6c3e3928"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a5afa51a694401683fb7d4dda6c3e3928">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.numPorts</a></div><div class="ttdeci">numPorts</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00053">ErrorTerms.py:53</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_ad8cdadc2d29a11c5f69d487c0bf1a7a3"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#ad8cdadc2d29a11c5f69d487c0bf1a7a3">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.__init__</a></div><div class="ttdeci">def __init__(self, ET=None)</div><div class="ttdoc">Constructor.</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00050">ErrorTerms.py:50</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_aaa6e6ac77165a6c7c8b54e66b3cbdedc"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#aaa6e6ac77165a6c7c8b54e66b3cbdedc">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.DutCalculation</a></div><div class="ttdeci">def DutCalculation(self, sRaw, pl=None, reciprocal=False)</div><div class="ttdoc">Calculates a DUT.</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00340">ErrorTerms.py:340</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a8da5dc0c13d32bfb119255f7ac781b21"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a8da5dc0c13d32bfb119255f7ac781b21">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.ET</a></div><div class="ttdeci">ET</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00051">ErrorTerms.py:51</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_ac22781b57de46a1993aaaf0104cb2331"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#ac22781b57de46a1993aaaf0104cb2331">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.TransferThruCalibration</a></div><div class="ttdeci">def TransferThruCalibration(self)</div><div class="ttdoc">Performs the transfer thru calibrations.</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00235">ErrorTerms.py:235</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a4d311b624f6d2be96bfabac7bd7d056e"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a4d311b624f6d2be96bfabac7bd7d056e">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.DutCalculationAlternate</a></div><div class="ttdeci">def DutCalculationAlternate(self, sRaw, pl=None, reciprocal=False)</div><div class="ttdoc">Alternate Dut Calculation.</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00303">ErrorTerms.py:303</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a76b02819f5b0a67b717af159f71f4ca3"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a76b02819f5b0a67b717af159f71f4ca3">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.Initialize</a></div><div class="ttdeci">def Initialize(self, numPorts)</div><div class="ttdoc">Initialize   Initializes the number of ports and all of the three error terms for each row and column...</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00063">ErrorTerms.py:63</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a09d744e748042e2e2403b060e71570a2"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a09d744e748042e2e2403b060e71570a2">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.InitializeFromFixtures</a></div><div class="ttdeci">def InitializeFromFixtures(self, fixtureList)</div><div class="ttdoc">Initialize from list of fixtures</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00082">ErrorTerms.py:82</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms</a></div><div class="ttdoc">Error terms for VNA and TDR based s-parameter calculations.</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00045">ErrorTerms.py:45</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a06196443ad991bcdaccb2db32f396f00"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a06196443ad991bcdaccb2db32f396f00">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.ThruCalibration</a></div><div class="ttdeci">def ThruCalibration(self, b1a1, b2a1, S, n, m)</div><div class="ttdoc">performs a thru calibration   Computes the forward transmission and load match terms for a given driv...</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00138">ErrorTerms.py:138</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_afb72282df42e631477c1658bc52a6a91"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#afb72282df42e631477c1658bc52a6a91">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.ReflectCalibration</a></div><div class="ttdeci">def ReflectCalibration(self, hatGamma, Gamma, m)</div><div class="ttdoc">performs a reflect calibration   Computes the directivity, reverse transmission, and source match ter...</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00113">ErrorTerms.py:113</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_1_1Exception_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib_1_1Exception.xhtml">SignalIntegrity.Lib.Exception</a></div><div class="ttdef"><b>Definition:</b> <a href="Exception_8py_source.xhtml#l00001">Exception.py:1</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a7dd89d542be158c0b13f2c0b7f2a852c"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a7dd89d542be158c0b13f2c0b7f2a852c">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.ExCalibration</a></div><div class="ttdeci">def ExCalibration(self, b2a1, n, m)</div><div class="ttdoc">Computes the crosstalk term   For a given driven and undriven port and frequency from a list of measu...</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00224">ErrorTerms.py:224</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a0691340eddd7e5c139220f62b76525ce"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a0691340eddd7e5c139220f62b76525ce">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.UnknownThruCalibration</a></div><div class="ttdeci">def UnknownThruCalibration(self, Sm, Sest, firstPort, secondPort)</div><div class="ttdoc">Computes the unknown thru   for a given set of measurements of a thru and an estimate of the thru the...</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00184">ErrorTerms.py:184</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_aab91ae2e037c39b631a69273c277bfe9"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#aab91ae2e037c39b631a69273c277bfe9">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.__getitem__</a></div><div class="ttdeci">def __getitem__(self, item)</div><div class="ttdoc">overloads [item]</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00101">ErrorTerms.py:101</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a12823ca27400ba1347c8e71d55f4387a"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a12823ca27400ba1347c8e71d55f4387a">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms._EnforceReciprocity</a></div><div class="ttdeci">def _EnforceReciprocity(self, A, B)</div><div class="ttdoc">Given S*A=B, Calculates a DUT in S enforcing reciprocity.</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00356">ErrorTerms.py:356</a></div></div>
<div class="ttc" id="aclassSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms_xhtml_a52a177541a0a7affc13f2dbd2fe1f618"><div class="ttname"><a href="classSignalIntegrity_1_1Lib_1_1Measurement_1_1Calibration_1_1ErrorTerms_1_1ErrorTerms.xhtml#a52a177541a0a7affc13f2dbd2fe1f618">SignalIntegrity.Lib.Measurement.Calibration.ErrorTerms.ErrorTerms.DutUnCalculation</a></div><div class="ttdeci">def DutUnCalculation(self, S, pl=None)</div><div class="ttdoc">undoes the DUT calculation</div><div class="ttdef"><b>Definition:</b> <a href="ErrorTerms_8py_source.xhtml#l00378">ErrorTerms.py:378</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
