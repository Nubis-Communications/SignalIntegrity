<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "https://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.17"/>
<meta name="viewport" content="width=device-width, initial-scale=1"/>
<title>SignalIntegrity: SignalIntegrity/SignalIntegrity/App/SParameterViewerWindow.py Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script>
<script type="text/javascript" async="async" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="AppIcon2.ico"/></td>
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">SignalIntegrity
   &#160;<span id="projectnumber">1.1.14</span>
   </div>
   <div id="projectbrief">Signal Integrity Tools in Python</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.17 -->
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
var searchBox = new SearchBox("searchBox", "search",false,'Search');
/* @license-end */
</script>
<script type="text/javascript" src="menudata.js"></script>
<script type="text/javascript" src="menu.js"></script>
<script type="text/javascript">
/* @license magnet:?xt=urn:btih:cf05388f2679ee054f2beb29a391d25f4e673ac3&amp;dn=gpl-2.0.txt GPL-v2 */
$(function() {
  initMenu('',true,false,'search.php','Search');
  $(document).ready(function() { init_search(); });
});
/* @license-end */</script>
<div id="main-nav"></div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_16b8a29acabeefd95795d500a3b14bd8.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_fb554d60be346e469553b0331604b584.xhtml">SignalIntegrity</a></li><li class="navelem"><a class="el" href="dir_970ef3fb0b92f0060bb9423c44cad0f7.xhtml">App</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">SParameterViewerWindow.py</div>  </div>
</div><!--header-->
<div class="contents">
<div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno"><a class="line" href="namespaceSignalIntegrity_1_1App_1_1SParameterViewerWindow.xhtml">    1</a></span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="stringliteral">SParameterViewerWindow.py</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="stringliteral">&quot;&quot;&quot;</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"># Copyright (c) 2018 Teledyne LeCroy, Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"># All rights reserved worldwide.</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"># This file is part of SignalIntegrity.</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"># SignalIntegrity is free software: You can redistribute it and/or modify it under the terms</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"># of the GNU General Public License as published by the Free Software Foundation, either</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"># version 3 of the License, or any later version.</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"># This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"># without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"># See the GNU General Public License for more details.</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">#</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"># You should have received a copy of the GNU General Public License along with this program.</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"># If not, see &lt;https://www.gnu.org/licenses/&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="keyword">import</span> sys</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160; </div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="keywordflow">if</span> sys.version_info.major &lt; 3:</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">import</span> Tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">import</span> tkMessageBox <span class="keyword">as</span> messagebox</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;    <span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;    <span class="keyword">from</span> tkinter <span class="keyword">import</span>  messagebox</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160; </div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="keyword">import</span> matplotlib</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="keyword">import</span> math</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160; </div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1PartProperty.xhtml">SignalIntegrity.App.PartProperty</a> <span class="keyword">import</span> PartPropertyDelay,PartPropertyReferenceImpedance</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Files.xhtml">SignalIntegrity.App.Files</a> <span class="keyword">import</span> FileParts</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers.xhtml">SignalIntegrity.App.MenuSystemHelpers</a> <span class="keyword">import</span> Doer,StatusBar</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1FilePicker.xhtml">SignalIntegrity.App.FilePicker</a> <span class="keyword">import</span> AskOpenFileName,AskSaveAsFilename</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1ToSI.xhtml">SignalIntegrity.App.ToSI</a> <span class="keyword">import</span> ToSI,FromSI</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SParameterProperties.xhtml">SignalIntegrity.App.SParameterProperties</a> <span class="keyword">import</span> SParameterProperties,SParameterPlotsConfiguration</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SParameterPropertiesDialog.xhtml">SignalIntegrity.App.SParameterPropertiesDialog</a> <span class="keyword">import</span> SParameterPropertiesDialog</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1InformationMessage.xhtml">SignalIntegrity.App.InformationMessage</a> <span class="keyword">import</span> InformationMessage</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1CalculationPropertiesProject.xhtml">SignalIntegrity.App.CalculationPropertiesProject</a> <span class="keyword">import</span> CalculationPropertySI</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="keyword">from</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1SParameterViewerPreferencesDialog.xhtml">SignalIntegrity.App.SParameterViewerPreferencesDialog</a> <span class="keyword">import</span> SParameterViewerPreferencesDialog</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160; </div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; </div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">import</span> <a class="code" href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a> <span class="keyword">as</span> si</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160; </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keywordflow">if</span> <span class="keywordflow">not</span> <span class="stringliteral">&#39;matplotlib.backends&#39;</span> <span class="keywordflow">in</span> sys.modules:</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;    matplotlib.use(<span class="stringliteral">&#39;TkAgg&#39;</span>)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160; </div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">from</span> matplotlib.backends.backend_tkagg <span class="keyword">import</span> FigureCanvasTkAgg</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="keyword">from</span> matplotlib.backends.backend_tkagg <span class="keyword">import</span> NavigationToolbar2Tk</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160; </div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="keyword">from</span> matplotlib.figure <span class="keyword">import</span> Figure</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="keyword">from</span> matplotlib.collections <span class="keyword">import</span> LineCollection</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160; </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;rcParams.update({<span class="stringliteral">&#39;figure.autolayout&#39;</span>: <span class="keyword">True</span>})</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160; </div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="keyword">class </span>NavigationToolbar(NavigationToolbar2Tk):</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keyword">def </span>__init__(self, canvas, window,homeCallback=None):</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        NavigationToolbar2Tk.__init__(self,canvas,window)</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;        self.homeCallback=homeCallback</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;    <span class="keyword">def </span>home(self, *args):</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.homeCallback <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;            self.homeCallback()</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160; </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="keyword">class </span>SParametersDialog(tk.Toplevel):</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <span class="keyword">def </span>__init__(self, parent,sp,filename=None,title=None,buttonLabels=None):</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;        tk.Toplevel.__init__(self, parent)</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;        self.parent=parent</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;        self.withdraw()</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160; </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;        self.img = tk.PhotoImage(file=SignalIntegrity.App.IconsBaseDir+<span class="stringliteral">&#39;AppIcon2.gif&#39;</span>)</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;        self.tk.call(<span class="stringliteral">&#39;wm&#39;</span>, <span class="stringliteral">&#39;iconphoto&#39;</span>, self._w, self.img)</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;        self.protocol(<span class="stringliteral">&quot;WM_DELETE_WINDOW&quot;</span>, self.onClosing)</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160; </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;        <span class="comment"># the Doers - the holder of the commands, menu elements, toolbar elements, and key bindings</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;        self.ReadSParametersFromFileDoer = Doer(self.onReadSParametersFromFile).AddKeyBindElement(self,<span class="stringliteral">&#39;&lt;Control-o&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Open-S-parameter-File&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Open s-parameter file&#39;</span>)</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;        self.WriteSParametersToFileDoer = Doer(self.onWriteSParametersToFile).AddKeyBindElement(self,<span class="stringliteral">&#39;&lt;Control-s&gt;&#39;</span>).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Save-S-parameter-File&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Save s-parameters to file&#39;</span>)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;        self.Matplotlib2tikzDoer = Doer(self.onMatplotlib2TikZ).AddToolTip(<span class="stringliteral">&#39;Output plots to LaTeX files&#39;</span>)</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;        self.CalculationPropertiesDoer = Doer(self.onCalculationProperties).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Calculation-Properties&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit calculation properties&#39;</span>)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;        self.SParameterPropertiesDoer = Doer(self.onSParameterProperties).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Properties&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit s-parameter properties&#39;</span>)</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;        self.EnforcePassivityDoer = Doer(self.onEnforcePassivity).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Enforce-Passivity&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Enforce passivity on s-parameters&#39;</span>)</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;        self.EnforceCausalityDoer = Doer(self.onEnforceCausality).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Enforce-Causality&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Enforce causality on s-parameters&#39;</span>)</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;        self.EnforceBothPassivityAndCausalityDoer = Doer(self.onEnforceBothPassivityAndCausality).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Enforce-Both-Passivity-and-Reciprocity&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Enforce passivity and reciprocity on s-parameters&#39;</span>)</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;        self.EnforceReciprocityDoer = Doer(self.onEnforceReciprocity).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Enforce-Reciprocity&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Enforce reciprocity on s-parameters&#39;</span>)</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;        self.EnforceAllDoer = Doer(self.onEnforceAll).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Enforce-All&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Enforce passivity, reciprocity, and causality on s-parameters&#39;</span>)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;        self.WaveletDenoiseDoer = Doer(self.onWaveletDenoise).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Wavelet-Denoise&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Denoise s-parameters with wavelets&#39;</span>)</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;        self.HelpDoer = Doer(self.onHelp).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Open-Help-File&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Open the help system in a browser&#39;</span>)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        self.ControlHelpDoer = Doer(self.onControlHelp).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Control-Help&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Get help on a control&#39;</span>)</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;        self.PreferencesDoer=Doer(self.onPreferences).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Preferences&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Edit the preferences&#39;</span>)</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;        self.ShowGridsDoer = Doer(self.onShowGrids).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Show-Grids&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Show grids in plots&#39;</span>)</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        self.VariableLineWidthDoer = Doer(self.onVariableLineWidth).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Variable-Line-Width&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Variable line width in plots&#39;</span>)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;        self.ShowPassivityViolationsDoer = Doer(self.onShowPassivityViolations).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Show-Passivity-Violations&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Show passivity violations in plots&#39;</span>)</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        self.ShowCausalityViolationsDoer = Doer(self.onShowCausalityViolations).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Show-Causality-Violations&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Show causality violations in plots&#39;</span>)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;        self.ShowImpedanceDoer = Doer(self.onShowImpedance).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Show-Impedance&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Show impedance plots&#39;</span>)</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        self.ShowExcessInductanceDoer = Doer(self.onShowExcessInductance).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Show-Excess-Inductance&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Show excess inductance in plots&#39;</span>)</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;        self.ShowExcessCapacitanceDoer = Doer(self.onShowExcessCapacitance).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Show-Excess-Capacitance&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Show excess capacitance in plots&#39;</span>)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        self.LogScaleDoer = Doer(self.onLogScale).AddHelpElement(<span class="stringliteral">&#39;Control-Help:Log-Scale&#39;</span>).AddToolTip(<span class="stringliteral">&#39;Show frequency plots log scale&#39;</span>)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        self.Zoom={</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;            <span class="stringliteral">&#39;AreSParameterLike&#39;</span>:<span class="keyword">False</span>,</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <span class="stringliteral">&#39;Frequencies&#39;</span>:{</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;                <span class="stringliteral">&#39;JoinWithin&#39;</span>:Doer(self.onJoinFrequenciesWithin).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Frequency-Zoom&#39;</span>),</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;                <span class="stringliteral">&#39;JoinWithOthers&#39;</span>:Doer(self.onJoinFrequenciesWithOthers).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Frequency-Zoom&#39;</span>),</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;                <span class="stringliteral">&#39;Join&#39;</span>:{</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;                    <span class="stringliteral">&#39;All&#39;</span>:Doer(self.onFrequenciesJoinAll).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Frequency-Zoom&#39;</span>),</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;                    <span class="stringliteral">&#39;OffDiagonal&#39;</span>:Doer(self.onFrequenciesJoinOffDiagonal).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Frequency-Zoom&#39;</span>),</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;                    <span class="stringliteral">&#39;Reciprocals&#39;</span>:Doer(self.onFrequenciesJoinReciprocals).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Frequency-Zoom&#39;</span>),</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;                    <span class="stringliteral">&#39;Reflects&#39;</span>:Doer(self.onFrequenciesJoinReflects).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Frequency-Zoom&#39;</span>)</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;                }},</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;            <span class="stringliteral">&#39;Times&#39;</span>:{</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;                <span class="stringliteral">&#39;JoinWithin&#39;</span>:Doer(self.onJoinTimesWithin).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Time-Zoom&#39;</span>),</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;                <span class="stringliteral">&#39;JoinWithOthers&#39;</span>:Doer(self.onJoinTimesWithOthers).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Time-Zoom&#39;</span>),</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;                <span class="stringliteral">&#39;Join&#39;</span>:{</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;                    <span class="stringliteral">&#39;All&#39;</span>:Doer(self.onTimesJoinAll).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Time-Zoom&#39;</span>),</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;                    <span class="stringliteral">&#39;OffDiagonal&#39;</span>:Doer(self.onTimesJoinOffDiagonal).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Time-Zoom&#39;</span>),</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;                    <span class="stringliteral">&#39;Reciprocals&#39;</span>:Doer(self.onTimesJoinReciprocals).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Time-Zoom&#39;</span>),</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;                    <span class="stringliteral">&#39;Reflects&#39;</span>:Doer(self.onTimesJoinReflects).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Time-Zoom&#39;</span>)</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;                }},</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;            <span class="stringliteral">&#39;Vertical&#39;</span>:{</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;                <span class="stringliteral">&#39;JoinMagnitudeWithOthers&#39;</span>:Doer(self.onJoinMagnitudeWithOthers).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Vertical-Zoom&#39;</span>),</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;                <span class="stringliteral">&#39;JoinPhaseWithOthers&#39;</span>:Doer(self.onJoinPhaseWithOthers).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Vertical-Zoom&#39;</span>),</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;                <span class="stringliteral">&#39;JoinImpulseWithOthers&#39;</span>:Doer(self.onJoinImpulseWithOthers).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Vertical-Zoom&#39;</span>),</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;                <span class="stringliteral">&#39;JoinStepImpedanceWithOthers&#39;</span>:Doer(self.onJoinStepImpedanceWithOthers).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Vertical-Zoom&#39;</span>),</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;                <span class="stringliteral">&#39;Join&#39;</span>:{</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;                    <span class="stringliteral">&#39;All&#39;</span>:Doer(self.onVerticalJoinAll).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Vertical-Zoom&#39;</span>),</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;                    <span class="stringliteral">&#39;OffDiagonal&#39;</span>:Doer(self.onVerticalJoinOffDiagonal).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Vertical-Zoom&#39;</span>),</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;                    <span class="stringliteral">&#39;Reciprocals&#39;</span>:Doer(self.onVerticalJoinReciprocals).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Vertical-Zoom&#39;</span>),</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;                    <span class="stringliteral">&#39;Reflects&#39;</span>:Doer(self.onVerticalJoinReflects).AddHelpElement(<span class="stringliteral">&#39;Control-Help:S-Parameter-Viewer-Vertical-Zoom&#39;</span>)</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;            }}}</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;        <span class="comment">#-------</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;        self.EscapeDoer = Doer(self.onEscape).AddKeyBindElement(self,<span class="stringliteral">&#39;&lt;Escape&gt;&#39;</span>).DisableHelp()</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160; </div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;        <span class="comment"># The menu system</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;        TheMenu=tk.Menu(self)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        self.config(menu=TheMenu)</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;        FileMenu=tk.Menu(self)</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;File&#39;</span>,menu=FileMenu,underline=0)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;        self.WriteSParametersToFileDoer.AddMenuElement(FileMenu,label=<span class="stringliteral">&quot;Save&quot;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+S&#39;</span>,underline=0)</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;        self.ReadSParametersFromFileDoer.AddMenuElement(FileMenu,label=<span class="stringliteral">&quot;Open File&quot;</span>,accelerator=<span class="stringliteral">&#39;Ctrl+O&#39;</span>,underline=0)</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;        FileMenu.add_separator()</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;        self.Matplotlib2tikzDoer.AddMenuElement(FileMenu,label=<span class="stringliteral">&#39;Output to LaTeX (TikZ)&#39;</span>,underline=10)</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;        self.SelectionMenu=tk.Menu(self)</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Selection&#39;</span>,menu=self.SelectionMenu,underline=0)</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;        PropertiesMenu=tk.Menu(self)</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Properties&#39;</span>,menu=PropertiesMenu,underline=0)</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        <span class="comment">#self.CalculationPropertiesDoer.AddMenuElement(PropertiesMenu,label=&#39;Calculation Properties&#39;,underline=0)</span></div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        self.SParameterPropertiesDoer.AddMenuElement(PropertiesMenu,label=<span class="stringliteral">&#39;S-parameter Properties&#39;</span>,underline=0)</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;        <span class="comment">#PropertiesMenu.add_separator()</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;        <span class="comment">#PropertiesMenu.add_separator()</span></div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;        self.EnforcePassivityDoer.AddMenuElement(PropertiesMenu,label=<span class="stringliteral">&#39;Enforce Passivity&#39;</span>,underline=8)</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;        self.EnforceCausalityDoer.AddMenuElement(PropertiesMenu,label=<span class="stringliteral">&#39;Enforce Causality&#39;</span>,underline=8)</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        self.EnforceBothPassivityAndCausalityDoer.AddMenuElement(PropertiesMenu,label=<span class="stringliteral">&#39;Enforce Both Passivity and Causality&#39;</span>,underline=8)</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;        self.EnforceReciprocityDoer.AddMenuElement(PropertiesMenu,label=<span class="stringliteral">&#39;Enforce Reciprocity&#39;</span>,underline=8)</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;        self.EnforceAllDoer.AddMenuElement(PropertiesMenu,label=<span class="stringliteral">&#39;Enforce All&#39;</span>,underline=8)</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        self.WaveletDenoiseDoer.AddMenuElement(PropertiesMenu,label=<span class="stringliteral">&#39;Wavelet Denoise&#39;</span>,underline=0)</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;        ViewMenu=tk.Menu(self)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;View&#39;</span>,menu=ViewMenu,underline=0)</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;        self.ShowGridsDoer.AddCheckButtonMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Show Grids&#39;</span>,underline=5)</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        self.VariableLineWidthDoer.AddCheckButtonMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Variable Line Width&#39;</span>,underline=9)</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;        self.ShowPassivityViolationsDoer.AddCheckButtonMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Show Passivity Violations&#39;</span>,underline=5)</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;        self.ShowCausalityViolationsDoer.AddCheckButtonMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Show Causality Violations&#39;</span>,underline=6)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;        self.ShowImpedanceDoer.AddCheckButtonMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Show Impedance&#39;</span>,underline=5)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        self.ShowExcessInductanceDoer.AddCheckButtonMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Show Excess Inductance&#39;</span>,underline=13)</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        self.ShowExcessCapacitanceDoer.AddCheckButtonMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Show Excess Capacitance&#39;</span>,underline=12)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        self.LogScaleDoer.AddCheckButtonMenuElement(ViewMenu,label=<span class="stringliteral">&#39;Log Scale&#39;</span>,underline=4)</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">#-------</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        ZoomMenu=tk.Menu(self)</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Zoom&#39;</span>,menu=ZoomMenu,underline=0)</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        ZoomFrequenciesMenu=tk.Menu(self)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;        ZoomMenu.add_cascade(label=<span class="stringliteral">&#39;Frequencies&#39;</span>,menu=ZoomFrequenciesMenu,underline=0)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].AddCheckButtonMenuElement(ZoomFrequenciesMenu,label=<span class="stringliteral">&#39;Join Within Views&#39;</span>,underline=5)</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;        ZoomFrequenciesMenu.add_separator()</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].AddCheckButtonMenuElement(ZoomFrequenciesMenu,label=<span class="stringliteral">&#39;Join With Other Views&#39;</span>,underline=10)</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;        ZoomFrequenciesMenu.add_separator()</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].AddCheckButtonMenuElement(ZoomFrequenciesMenu,label=<span class="stringliteral">&#39;Join All Views&#39;</span>,underline=5)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].AddCheckButtonMenuElement(ZoomFrequenciesMenu,label=<span class="stringliteral">&#39;Join Off-Diagnonal Views&#39;</span>,underline=9)</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].AddCheckButtonMenuElement(ZoomFrequenciesMenu,label=<span class="stringliteral">&#39;Join Reciprocal Views&#39;</span>,underline=5)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].AddCheckButtonMenuElement(ZoomFrequenciesMenu,label=<span class="stringliteral">&#39;Join Reflect Views&#39;</span>,underline=7)</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        ZoomTimesMenu=tk.Menu(self)</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;        ZoomMenu.add_cascade(label=<span class="stringliteral">&#39;Times&#39;</span>,menu=ZoomTimesMenu,underline=0)</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].AddCheckButtonMenuElement(ZoomTimesMenu,label=<span class="stringliteral">&#39;Join Within Views&#39;</span>,underline=5)</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        ZoomTimesMenu.add_separator()</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].AddCheckButtonMenuElement(ZoomTimesMenu,label=<span class="stringliteral">&#39;Join With Other Views&#39;</span>,underline=10)</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        ZoomTimesMenu.add_separator()</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].AddCheckButtonMenuElement(ZoomTimesMenu,label=<span class="stringliteral">&#39;Join All Views&#39;</span>,underline=5)</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].AddCheckButtonMenuElement(ZoomTimesMenu,label=<span class="stringliteral">&#39;Join Off-Diagnonal Views&#39;</span>,underline=9)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].AddCheckButtonMenuElement(ZoomTimesMenu,label=<span class="stringliteral">&#39;Join Reciprocal Views&#39;</span>,underline=5)</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].AddCheckButtonMenuElement(ZoomTimesMenu,label=<span class="stringliteral">&#39;Join Reflect Views&#39;</span>,underline=7)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        ZoomVerticalMenu=tk.Menu(self)</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        ZoomMenu.add_cascade(label=<span class="stringliteral">&#39;Vertical&#39;</span>,menu=ZoomVerticalMenu,underline=0)</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinMagnitudeWithOthers&#39;</span>].AddCheckButtonMenuElement(ZoomVerticalMenu,label=<span class="stringliteral">&#39;Join Magnitude Zooms With Other Views&#39;</span>,underline=<span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinPhaseWithOthers&#39;</span>].AddCheckButtonMenuElement(ZoomVerticalMenu,label=<span class="stringliteral">&#39;Join Phase Zooms With Other Views&#39;</span>,underline=<span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinImpulseWithOthers&#39;</span>].AddCheckButtonMenuElement(ZoomVerticalMenu,label=<span class="stringliteral">&#39;Join Impulse Response Zooms With Other Views&#39;</span>,underline=<span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinStepImpedanceWithOthers&#39;</span>].AddCheckButtonMenuElement(ZoomVerticalMenu,label=<span class="stringliteral">&#39;Join Step Response/Impedance Zooms With Other Views&#39;</span>,underline=<span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;        ZoomVerticalMenu.add_separator()</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].AddCheckButtonMenuElement(ZoomVerticalMenu,label=<span class="stringliteral">&#39;Join All Views&#39;</span>,underline=5)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].AddCheckButtonMenuElement(ZoomVerticalMenu,label=<span class="stringliteral">&#39;Join Off-Diagnonal Views&#39;</span>,underline=9)</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].AddCheckButtonMenuElement(ZoomVerticalMenu,label=<span class="stringliteral">&#39;Join Reciprocal Views&#39;</span>,underline=5)</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].AddCheckButtonMenuElement(ZoomVerticalMenu,label=<span class="stringliteral">&#39;Join Reflect Views&#39;</span>,underline=7)</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;        HelpMenu=tk.Menu(self)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;        TheMenu.add_cascade(label=<span class="stringliteral">&#39;Help&#39;</span>,menu=HelpMenu,underline=0)</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        self.HelpDoer.AddMenuElement(HelpMenu,label=<span class="stringliteral">&#39;Open Help File&#39;</span>,underline=0)</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        self.ControlHelpDoer.AddMenuElement(HelpMenu,label=<span class="stringliteral">&#39;Control Help&#39;</span>,underline=0)</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        self.PreferencesDoer.AddMenuElement(HelpMenu,label=<span class="stringliteral">&#39;Preferences&#39;</span>,underline=0)</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        self.TheMenu=TheMenu</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160; </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="comment"># The Toolbar</span></div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        ToolBarFrame = tk.Frame(self)</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        ToolBarFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        self.ReadSParametersFromFileDoer.AddToolBarElement(ToolBarFrame,iconfile=SignalIntegrity.App.IconsDir+<span class="stringliteral">&#39;document-open-2.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        self.WriteSParametersToFileDoer.AddToolBarElement(ToolBarFrame,iconfile=SignalIntegrity.App.IconsDir+<span class="stringliteral">&#39;document-save-2.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        tk.Frame(ToolBarFrame,height=2,bd=2,relief=tk.RAISED).pack(side=tk.LEFT,fill=tk.X,padx=5,pady=5)</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        self.SParameterPropertiesDoer.AddToolBarElement(ToolBarFrame,iconfile=SignalIntegrity.App.IconsDir+<span class="stringliteral">&#39;tooloptions.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        tk.Frame(ToolBarFrame,height=2,bd=2,relief=tk.RAISED).pack(side=tk.LEFT,fill=tk.X,padx=5,pady=5)</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        self.HelpDoer.AddToolBarElement(ToolBarFrame,iconfile=SignalIntegrity.App.IconsDir+<span class="stringliteral">&#39;help-contents-5.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;        self.ControlHelpDoer.AddToolBarElement(ToolBarFrame,iconfile=SignalIntegrity.App.IconsDir+<span class="stringliteral">&#39;help-3.gif&#39;</span>).Pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160; </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        self.dialogFrame = tk.Frame(self, borderwidth=5)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;        self.dialogFrame.pack(side=tk.TOP,fill=tk.BOTH,expand=tk.YES)</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160; </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        self.statusbar=StatusBar(self.dialogFrame)</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        self.statusbar.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160; </div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        topFrame=tk.Frame(self.dialogFrame)</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;        topFrame.pack(side=tk.TOP,fill=tk.BOTH,expand=tk.YES)</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        bottomFrame=tk.Frame(self.dialogFrame)</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        bottomFrame.pack(side=tk.TOP,fill=tk.BOTH,expand=tk.YES)</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        topLeftFrame=tk.Frame(topFrame)</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        topLeftFrame.pack(side=tk.LEFT,fill=tk.BOTH,expand=tk.YES)</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        self.topLeftLabel = tk.Label(topLeftFrame,fg=<span class="stringliteral">&#39;black&#39;</span>)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        self.topLeftLabel.pack(fill=tk.X)</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        topRightFrame=tk.Frame(topFrame)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        topRightFrame.pack(side=tk.LEFT,fill=tk.BOTH,expand=tk.YES)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        self.topRightLabel = tk.Label(topRightFrame,fg=<span class="stringliteral">&#39;black&#39;</span>)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        self.topRightLabel.pack(fill=tk.X)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        bottomLeftFrame=tk.Frame(bottomFrame)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        bottomLeftFrame.pack(side=tk.LEFT,fill=tk.BOTH,expand=tk.YES)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        self.bottomLeftLabel = tk.Label(bottomLeftFrame,fg=<span class="stringliteral">&#39;black&#39;</span>)</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        self.bottomLeftLabel.pack(fill=tk.X)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        bottomRightFrame=tk.Frame(bottomFrame)</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        bottomRightFrame.pack(side=tk.LEFT,fill=tk.BOTH,expand=tk.YES)</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        self.bottomRightlabel = tk.Label(bottomRightFrame,fg=<span class="stringliteral">&#39;black&#39;</span>)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        self.bottomRightlabel.pack(fill=tk.X)</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160; </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        plotWidth=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.PlotWidth&#39;</span>]</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        plotHeight=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.PlotHeight&#39;</span>]</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        plotDPI=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.PlotDPI&#39;</span>]</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160; </div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        self.topLeftFigure=Figure(figsize=(plotWidth,plotHeight), dpi=plotDPI)</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        self.topLeftPlot=self.topLeftFigure.add_subplot(111)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;        self.topLeftCanvas=FigureCanvasTkAgg(self.topLeftFigure, master=topLeftFrame)</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        self.topLeftCanvas.get_tk_widget().pack(side=tk.TOP, fill=tk.X, expand=1)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        self.topLeftToolbar = NavigationToolbar( self.topLeftCanvas, topLeftFrame ,self.onTopLeftHome)</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;        self.topLeftToolbar.update()</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        self.topLeftCanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;        self.topLeftToolbar.pan()</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        self.topRightFigure=Figure(figsize=(plotWidth,plotHeight), dpi=plotDPI)</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        self.topRightPlot=self.topRightFigure.add_subplot(111)</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        self.topRightCanvas=FigureCanvasTkAgg(self.topRightFigure, master=topRightFrame)</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        self.topRightCanvas.get_tk_widget().pack(side=tk.TOP, fill=tk.X, expand=1)</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        self.topRightToolbar = NavigationToolbar( self.topRightCanvas, topRightFrame ,self.onTopRightHome)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;        self.topRightToolbar.update()</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        self.topRightCanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;        self.topRightToolbar.pan()</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        self.topRightCanvasControlsFrame=tk.Frame(topRightFrame)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        self.topRightCanvasControlsFrame.pack(side=tk.TOP, fill=tk.X, expand=tk.NO)</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        tk.Button(self.topRightCanvasControlsFrame,text=<span class="stringliteral">&#39;unwrap&#39;</span>,command=self.onUnwrap).pack(side=tk.LEFT,expand=tk.NO,fill=tk.NONE)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        self.delayViewerProperty=CalculationPropertySI(self.topRightCanvasControlsFrame,<span class="stringliteral">&#39;Delay&#39;</span>,self.onDelayEntered,<span class="keywordtype">None</span>,<span class="keywordtype">None</span>,<span class="keywordtype">None</span>,<span class="stringliteral">&#39;s&#39;</span>)</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        self.delayViewerProperty.label.config(width=10)</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160; </div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        self.bottomLeftFigure=Figure(figsize=(plotWidth,plotHeight), dpi=plotDPI)</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        self.bottomLeftPlot=self.bottomLeftFigure.add_subplot(111)</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        self.bottomLeftCanvas=FigureCanvasTkAgg(self.bottomLeftFigure, master=bottomLeftFrame)</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;        self.bottomLeftCanvas.get_tk_widget().pack(side=tk.TOP, fill=tk.X, expand=1)</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        self.bottomLeftToolbar = NavigationToolbar( self.bottomLeftCanvas, bottomLeftFrame ,self.onBottomLeftHome)</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;        self.bottomLeftToolbar.update()</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        self.bottomLeftCanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        self.bottomLeftToolbar.pan()</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160; </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;        self.bottomRightFigure=Figure(figsize=(plotWidth,plotHeight), dpi=plotDPI)</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        self.bottomRightPlot=self.bottomRightFigure.add_subplot(111)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;        self.bottomRightCanvas=FigureCanvasTkAgg(self.bottomRightFigure, master=bottomRightFrame)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        self.bottomRightCanvas.get_tk_widget().pack(side=tk.TOP, fill=tk.X, expand=1)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        self.bottomRightToolbar = NavigationToolbar( self.bottomRightCanvas, bottomRightFrame , self.onBottomRightHome)</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        self.bottomRightToolbar.update()</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;        self.bottomRightCanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1)</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        self.bottomRightToolbar.pan()</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160; </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        self.controlsFrame = tk.Frame(self.dialogFrame)</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        self.controlsFrame.pack(side=tk.TOP,fill=tk.X,expand=tk.NO)</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;        self.sButtonsFrame = tk.Frame(self.controlsFrame, bd=1, relief=tk.SUNKEN)</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;        self.sButtonsFrame.pack(side=tk.LEFT,expand=tk.NO,fill=tk.NONE)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160; </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                <span class="keyword">from</span> tikzplotlib <span class="keyword">import</span> save <span class="keyword">as</span> tikz_save</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;                <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;                    <span class="keyword">from</span> matplotlib2tikz <span class="keyword">import</span> save <span class="keyword">as</span> tikz_save</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;                <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                    self.Matplotlib2tikzDoer.Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;            self.Matplotlib2tikzDoer.Activate(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160; </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;        self.NewSParameters(sp,filename,title,buttonLabels)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        self.deiconify()</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160; </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keyword">def </span>NewSParameters(self,sp,filename=None,title=None,buttonLabels=None):</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;        self.calibration=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;        <span class="keywordflow">if</span> isinstance(sp,si.m.cal.Calibration):</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;            self.calibration=sp</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;            fixtureList=self.calibration.Fixtures()</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;            ports=len(fixtureList)</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;            buttonLabelsList=[<span class="keywordtype">None</span> <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(ports)]</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;            titleList=[<span class="stringliteral">&#39;Error Terms - Port &#39;</span>+str(p+1) <span class="keywordflow">for</span> p <span class="keywordflow">in</span> range(ports)]</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;            fileNameList=[filename <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(ports)]</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;            <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(ports):</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;                buttonLabels=[[<span class="stringliteral">&#39; 0  &#39;</span> <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(2*ports)] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(2*ports)]</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;                <span class="keywordflow">for</span> r <span class="keywordflow">in</span> range(ports):</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                    buttonLabels[i+ports][i]=<span class="stringliteral">&#39; 1  &#39;</span></div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                    buttonLabels[r][i] = <span class="stringliteral">&#39;ED&#39;</span>+str(i+1)+<span class="stringliteral">&#39; &#39;</span> <span class="keywordflow">if</span> r==i <span class="keywordflow">else</span> <span class="stringliteral">&#39;EX&#39;</span>+str(r+1)+str(i+1)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                    buttonLabels[r][ports+r]=<span class="stringliteral">&#39;ER&#39;</span>+str(i+1)+<span class="stringliteral">&#39; &#39;</span> <span class="keywordflow">if</span> r==i <span class="keywordflow">else</span> <span class="stringliteral">&#39;ET&#39;</span>+str(r+1)+str(i+1)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                    buttonLabels[r+ports][ports+r]=<span class="stringliteral">&#39;ES&#39;</span>+str(i+1)+<span class="stringliteral">&#39; &#39;</span> <span class="keywordflow">if</span> r==i <span class="keywordflow">else</span> <span class="stringliteral">&#39;EL&#39;</span>+str(r+1)+str(i+1)</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;                buttonLabelsList[i]=buttonLabels</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;            sp = [(fixture,filename,title,buttonlabel) <span class="keywordflow">for</span> (fixture,filename,title,buttonlabel) <span class="keywordflow">in</span> zip(fixtureList,fileNameList,titleList,buttonLabelsList)]</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160; </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;        <span class="comment"># handle lists of s-parameters</span></div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;        <span class="keywordflow">if</span> isinstance(sp,list):</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;            self.spList=sp</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;            sp=self.spList[0][0]</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;            filename=self.spList[0][1]</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;            title=self.spList[0][2]</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;            buttonLabels=self.spList[0][3]</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;            self.spList=[[sp,filename,<span class="stringliteral">&#39;S-Parameters&#39;</span> <span class="keywordflow">if</span> title == <span class="keywordtype">None</span> <span class="keywordflow">else</span> title,buttonLabels]]</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;        <span class="keywordflow">if</span> title <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;            <span class="keywordflow">if</span> self.fileparts.filename ==<span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                self.title(<span class="stringliteral">&#39;S-parameters&#39;</span>)</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;                self.title(<span class="stringliteral">&#39;S-parameters: &#39;</span>+self.fileparts.FileNameTitle())</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;            <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                self.title(title)</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;                self.title(title+<span class="stringliteral">&#39;: &#39;</span>+self.fileparts.FileNameTitle())</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160; </div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;        self.SelectionDoerList = [Doer(<span class="keyword">lambda</span> x=s: self.onSelection(x)) <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(len(self.spList))]</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;        self.SelectionMenu.delete(0, tk.END)</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;        <span class="keywordflow">for</span> s <span class="keywordflow">in</span> range(len(self.spList)):</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;            self.SelectionDoerList[s].AddMenuElement(self.SelectionMenu,label=self.spList[s][2])</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        self.TheMenu.entryconfigure(<span class="stringliteral">&#39;Selection&#39;</span>, state= tk.DISABLED <span class="keywordflow">if</span> len(self.spList) &lt;= 1 <span class="keywordflow">else</span> tk.ACTIVE)</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="comment"># ------</span></div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;        self.sp=sp</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;        self.properties=SParameterProperties()</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        self.UpdatePreferences()</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        self.UpdatePropertiesFromSParameters(new=<span class="keyword">True</span>)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160; </div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;        <span class="comment"># button labels are a proxy for transfer parameters (until I do something better)</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;        areSParameters=(buttonLabels == <span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        isCalibration=(self.calibration != <span class="keywordtype">None</span>)</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        self.ShowPassivityViolationsDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;        self.ShowCausalityViolationsDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;        self.ShowImpedanceDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;        self.ShowExcessInductanceDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        self.ShowExcessCapacitanceDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="comment">#self.LogScaleDoer.Activate(False)</span></div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;        self.EnforcePassivityDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;        self.EnforceCausalityDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;        self.EnforceBothPassivityAndCausalityDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;        self.EnforceReciprocityDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        self.EnforceAllDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        self.WaveletDenoiseDoer.Activate(areSParameters)</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;        self.ReadSParametersFromFileDoer.Activate(areSParameters <span class="keywordflow">or</span> isCalibration)</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;        self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>]=(areSParameters <span class="keywordflow">or</span> isCalibration)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;        <span class="keywordflow">if</span> buttonLabels == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;            numPorts=self.sp.m_P</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;            (formatStr1,formatStr2)=(<span class="stringliteral">&#39;{:1d}&#39;</span>,<span class="stringliteral">&#39;{:1d}&#39;</span>) <span class="keywordflow">if</span> numPorts &lt; 10 <span class="keywordflow">else</span> (<span class="stringliteral">&#39;{:2d}&#39;</span>,<span class="stringliteral">&#39;{:3d}&#39;</span>) <span class="comment"># assumes less than 100</span></div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;            buttonLabels=[[<span class="stringliteral">&#39;s&#39;</span>+formatStr1.format(toP+1)+formatStr2.format(fromP+1) <span class="keywordflow">for</span> fromP <span class="keywordflow">in</span> range(numPorts)] <span class="keywordflow">for</span> toP <span class="keywordflow">in</span> range(numPorts)]</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;            self.spList[0][3]=buttonLabels</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;            <span class="keywordflow">if</span> self.calibration == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;                <span class="comment"># @todo:  This is totally wrong to directly write the preferences to enforce this.  It ends up updating the preferences</span></div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;                <span class="comment"># behind the user&#39;s back</span></div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;                self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Set(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;                self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Set(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;                self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Set(<span class="keyword">True</span>)</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;                self.UpdatePropertiesFromSParameters()</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;                self.ZoomJoinActivations()</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160; </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        self.buttonLabels=buttonLabels</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160; </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        self.fromPort = 1</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        self.toPort = 1</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        self.onSelection(0)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160; </div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;    <span class="keyword">def </span>onShowGrids(self):</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.GridsOnPlots&#39;</span>]=self.ShowGridsDoer.Bool()</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keyword">def </span>onVariableLineWidth(self):</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.VariableLineWidth&#39;</span>]=self.VariableLineWidthDoer.Bool()</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160; </div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keyword">def </span>onShowPassivityViolations(self):</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowPassivityViolations&#39;</span>]=self.ShowPassivityViolationsDoer.Bool()</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160; </div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;    <span class="keyword">def </span>onShowCausalityViolations(self):</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowCausalityViolations&#39;</span>]=self.ShowCausalityViolationsDoer.Bool()</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160; </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    <span class="keyword">def </span>onShowImpedance(self):</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowImpedance&#39;</span>]=self.ShowImpedanceDoer.Bool()</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        self.ShowExcessInductanceDoer.Set(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowExcessInductance&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        self.ShowExcessCapacitanceDoer.Set(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowExcessCapacitance&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160; </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keyword">def </span>onShowExcessInductance(self):</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowExcessInductance&#39;</span>]=self.ShowExcessInductanceDoer.Bool()</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        self.ShowImpedanceDoer.Set(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowImpedance&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        self.ShowExcessCapacitanceDoer.Set(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowExcessCapacitance&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160; </div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keyword">def </span>onShowExcessCapacitance(self):</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowExcessCapacitance&#39;</span>]=self.ShowExcessCapacitanceDoer.Bool()</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        self.ShowImpedanceDoer.Set(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowImpedance&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        self.ShowExcessInductanceDoer.Set(<span class="keyword">False</span>)</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowExcessInductance&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160; </div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;    <span class="keyword">def </span>onLogScale(self):</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.LogScale&#39;</span>]=self.LogScaleDoer.Bool()</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160; </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;    <span class="keyword">def </span>ZoomJoinActivations(self):</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Activate(self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool())</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Activate(self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Activate(self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])        </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Activate(self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Activate(self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool())</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Activate(self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Activate(self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])        </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Activate(self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;        verticalsActive = self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinMagnitudeWithOthers&#39;</span>].Bool() <span class="keywordflow">or</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinPhaseWithOthers&#39;</span>].Bool() <span class="keywordflow">or</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinImpulseWithOthers&#39;</span>].Bool() <span class="keywordflow">or</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinStepImpedanceWithOthers&#39;</span>].Bool()</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Activate(verticalsActive)</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Activate(verticalsActive <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Activate(verticalsActive <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])        </div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Activate(verticalsActive <span class="keywordflow">and</span> <span class="keywordflow">not</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool() <span class="keywordflow">and</span> self.Zoom[<span class="stringliteral">&#39;AreSParameterLike&#39;</span>])</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        SignalIntegrity.App.Preferences.SaveToFile()</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160; </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keyword">def </span>onJoinFrequenciesWithin(self):</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.JoinWithin&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool()</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160; </div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keyword">def </span>onJoinTimesWithin(self):</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.JoinWithin&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool()</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160; </div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;    <span class="keyword">def </span>onJoinFrequenciesWithOthers(self):</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.JoinWithOthers&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool()</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160; </div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;    <span class="keyword">def </span>onJoinTimesWithOthers(self):</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.JoinWithOthers&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool()</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160; </div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;    <span class="keyword">def </span>onJoinMagnitudeWithOthers(self):</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.JoinMagnitudeWithOthers&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinMagnitudeWithOthers&#39;</span>].Bool()</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160; </div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keyword">def </span>onJoinPhaseWithOthers(self):</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.JoinPhaseWithOthers&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinPhaseWithOthers&#39;</span>].Bool()</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160; </div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;    <span class="keyword">def </span>onJoinImpulseWithOthers(self):</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.JoinImpulseWithOthers&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinImpulseWithOthers&#39;</span>].Bool()</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160; </div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;    <span class="keyword">def </span>onJoinStepImpedanceWithOthers(self):</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.JoinStepImpedanceWithOthers&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinStepImpedanceWithOthers&#39;</span>].Bool()</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160; </div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;    <span class="keyword">def </span>onFrequenciesJoinAll(self):</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.Join.All&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool()</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160; </div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keyword">def </span>onFrequenciesJoinOffDiagonal(self):</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.Join.OffDiagonal&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Bool()</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160; </div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;    <span class="keyword">def </span>onFrequenciesJoinReciprocals(self):</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.Join.Reciprocals&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Bool()</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160; </div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;    <span class="keyword">def </span>onFrequenciesJoinReflects(self):</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.Join.Reflects&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Bool()</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160; </div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;    <span class="keyword">def </span>onTimesJoinAll(self):</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.Join.All&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool()</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160; </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;    <span class="keyword">def </span>onTimesJoinOffDiagonal(self):</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.Join.OffDiagonal&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Bool()</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160; </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <span class="keyword">def </span>onTimesJoinReciprocals(self):</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.Join.Reciprocals&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Bool()</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160; </div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keyword">def </span>onTimesJoinReflects(self):</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.Join.Reflects&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Bool()</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160; </div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;    <span class="keyword">def </span>onVerticalJoinAll(self):</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.Join.All&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Bool()</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160; </div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    <span class="keyword">def </span>onVerticalJoinOffDiagonal(self):</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.Join.OffDiagonal&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Bool()</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160; </div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <span class="keyword">def </span>onVerticalJoinReciprocals(self):</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.Join.Reciprocals&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Bool()</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160; </div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;    <span class="keyword">def </span>onVerticalJoinReflects(self):</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.Join.Reflects&#39;</span>]=self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Bool()</div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160; </div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;    <span class="keyword">def </span>JoinIt(self,thisToPortToJoin,thisFromPortToJoin,category):</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;        zoomProperties=self.Zoom[category][<span class="stringliteral">&#39;Join&#39;</span>]</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;        <span class="keywordflow">if</span> zoomProperties[<span class="stringliteral">&#39;All&#39;</span>].Bool():</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keywordflow">if</span> (thisToPortToJoin == thisFromPortToJoin) <span class="keywordflow">and</span> (self.fromPort == self.toPort) <span class="keywordflow">and</span> zoomProperties[<span class="stringliteral">&#39;Reflects&#39;</span>].Bool():</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;        <span class="keywordflow">if</span> (thisToPortToJoin != thisFromPortToJoin) <span class="keywordflow">and</span> (self.fromPort != self.toPort) <span class="keywordflow">and</span> zoomProperties[<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Bool():</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;        <span class="keywordflow">if</span> (thisToPortToJoin == self.fromPort) <span class="keywordflow">and</span> (thisFromPortToJoin == self.toPort) <span class="keywordflow">and</span> zoomProperties[<span class="stringliteral">&#39;Reciprocals&#39;</span>].Bool():</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;            <span class="keywordflow">return</span> <span class="keyword">True</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">False</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160; </div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;    <span class="keyword">def </span>onTopLeftXLimitChange(self,ax):</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.LimitChangeLock:</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;            self.LimitChangeLock=<span class="keyword">True</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;            xlim=ax.get_xlim()</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topLeftPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                self.topLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=xlim[0]</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=xlim[1]</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool():</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                    self.topRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=self.topLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;                    self.topRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;                    self.topRightPlot.set_xlim(left=self.topRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;                    self.topRightPlot.set_xlim(right=self.topRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;                    self.topRightCanvas.draw()</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool():</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;                    spPlotPropertiesToJoinFrom=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;                    <span class="keywordflow">for</span> thisToPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;                        <span class="keywordflow">for</span> thisFromPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;                            <span class="keywordflow">if</span> self.JoinIt(thisToPort,thisFromPort,<span class="stringliteral">&#39;Frequencies&#39;</span>):</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;                                spPlotPropertiesToJoinTo=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][thisToPort-1][thisFromPort-1]</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Magnitude.MinX&#39;</span>]</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Magnitude.MaxX&#39;</span>]</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool():</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Magnitude.MinX&#39;</span>]</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Magnitude.MaxX&#39;</span>]</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;            self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160; </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;    <span class="keyword">def </span>onTopLeftYLimitChange(self,ax):</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.LimitChangeLock:</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;            self.LimitChangeLock=<span class="keyword">True</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;            ylim=ax.get_ylim()</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topLeftPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                self.topLeftPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=ylim[0]</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=ylim[1]</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinMagnitudeWithOthers&#39;</span>].Bool():</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                    spPlotPropertiesToJoinFrom=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                    <span class="keywordflow">for</span> thisToPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                        <span class="keywordflow">for</span> thisFromPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                            <span class="keywordflow">if</span> self.JoinIt(thisToPort,thisFromPort,<span class="stringliteral">&#39;Vertical&#39;</span>):</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                                spPlotPropertiesToJoinTo=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][thisToPort-1][thisFromPort-1]</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.MinY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Magnitude.MinY&#39;</span>]</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.MaxY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Magnitude.MaxY&#39;</span>]</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;            self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160; </div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;    <span class="keyword">def </span>onTopRightXLimitChange(self,ax):</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.LimitChangeLock:</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;            self.LimitChangeLock=<span class="keyword">True</span></div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;            xlim=ax.get_xlim()</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topRightPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;                self.topRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=xlim[0]</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;                self.topRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=xlim[1]</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool():</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;                    self.topLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=self.topRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;                    self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=self.topRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;                    self.topLeftPlot.set_xlim(left=self.topLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;                    self.topLeftPlot.set_xlim(right=self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;                    self.topLeftCanvas.draw()</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool():</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;                    spPlotPropertiesToJoinFrom=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;                    <span class="keywordflow">for</span> thisToPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;                        <span class="keywordflow">for</span> thisFromPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;                            <span class="keywordflow">if</span> self.JoinIt(thisToPort,thisFromPort,<span class="stringliteral">&#39;Frequencies&#39;</span>):</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;                                spPlotPropertiesToJoinTo=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][thisToPort-1][thisFromPort-1]</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Phase.MinX&#39;</span>]</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Phase.MaxX&#39;</span>]</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool():</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Phase.MinX&#39;</span>]</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Magnitude.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Phase.MaxX&#39;</span>]</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;            self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160; </div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keyword">def </span>onTopRightYLimitChange(self,ax):</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.LimitChangeLock:</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;            self.LimitChangeLock=<span class="keyword">True</span></div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;            ylim=ax.get_ylim()</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topRightPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                self.topRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=ylim[0]</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                self.topRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=ylim[1]</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinPhaseWithOthers&#39;</span>].Bool():</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                    spPlotPropertiesToJoinFrom=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                    <span class="keywordflow">for</span> thisToPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                        <span class="keywordflow">for</span> thisFromPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                            <span class="keywordflow">if</span> self.JoinIt(thisToPort,thisFromPort,<span class="stringliteral">&#39;Vertical&#39;</span>):</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                                spPlotPropertiesToJoinTo=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][thisToPort-1][thisFromPort-1]</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.MinY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Phase.MinY&#39;</span>]</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Phase.MaxY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Phase.MaxY&#39;</span>]</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;            self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160; </div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;    <span class="keyword">def </span>onBottomLeftXLimitChange(self,ax):</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.LimitChangeLock:</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;            self.LimitChangeLock=<span class="keyword">True</span></div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;            xlim=ax.get_xlim()</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomLeftPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=xlim[0]</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=xlim[1]</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool():</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;                    <span class="keywordflow">if</span> (self.fromPort == self.toPort):</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Impulse.MinX&#39;</span>]/2.</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Impulse.MaxX&#39;</span>]/2.</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impedance.Initialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Step.MinX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Impulse.MinX&#39;</span>]</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Impulse.MaxX&#39;</span>]</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Step.Initialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                    self.bottomRightPlot.set_xlim(left=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                    self.bottomRightPlot.set_xlim(right=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    self.bottomRightCanvas.draw()</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool():</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                    spPlotPropertiesToJoinFrom=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                    <span class="keywordflow">for</span> thisToPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                        <span class="keywordflow">for</span> thisFromPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                            <span class="keywordflow">if</span> self.JoinIt(thisToPort,thisFromPort,<span class="stringliteral">&#39;Times&#39;</span>):</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                                spPlotPropertiesToJoinTo=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][thisToPort-1][thisFromPort-1]</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impulse.MinX&#39;</span>]</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impulse.MaxX&#39;</span>]</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool():</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Step.MinX&#39;</span>]</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;            self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160; </div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;    <span class="keyword">def </span>onBottomLeftYLimitChange(self,ax):</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.LimitChangeLock:</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;            self.LimitChangeLock=<span class="keyword">True</span></div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;            ylim=ax.get_ylim()</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomLeftPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=ylim[0]</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=ylim[1]</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinImpulseWithOthers&#39;</span>].Bool():</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                    spPlotPropertiesToJoinFrom=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                    <span class="keywordflow">for</span> thisToPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;                        <span class="keywordflow">for</span> thisFromPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;                            <span class="keywordflow">if</span> self.JoinIt(thisToPort,thisFromPort,<span class="stringliteral">&#39;Vertical&#39;</span>):</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;                                spPlotPropertiesToJoinTo=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][thisToPort-1][thisFromPort-1]</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.MinY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impulse.MinY&#39;</span>]</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;                                spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.MaxY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impulse.MaxY&#39;</span>]</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;            self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160; </div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;    <span class="keyword">def </span>onBottomRightXLimitChange(self,ax):</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.LimitChangeLock:</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            self.LimitChangeLock=<span class="keyword">True</span></div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            xlim=ax.get_xlim()</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomRightPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=xlim[0]</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=xlim[1]</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool():</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                    <span class="keywordflow">if</span> (self.ShowImpedanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessInductanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessCapacitanceDoer.Bool()) <span class="keywordflow">and</span> (self.fromPort == self.toPort):</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impulse.MinX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]*2.</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impulse.MaxX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]*2.</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impulse.Initialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Step.MinX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]*2.</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]*2.</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Step.Initialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impulse.MinX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Step.MinX&#39;</span>]</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impulse.MaxX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impulse.Initialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Step.MinX&#39;</span>]/2.</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]=self.plotProperties[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]/2.</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                        self.plotProperties[<span class="stringliteral">&#39;Impedance.Initialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                    self.bottomLeftPlot.set_xlim(left=self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;                    self.bottomLeftPlot.set_xlim(right=self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;                    self.bottomLeftCanvas.draw()</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Bool():</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;                    spPlotPropertiesToJoinFrom=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;                    <span class="keywordflow">for</span> thisToPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;                        <span class="keywordflow">for</span> thisFromPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;                            <span class="keywordflow">if</span> self.JoinIt(thisToPort,thisFromPort,<span class="stringliteral">&#39;Times&#39;</span>):</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;                                spPlotPropertiesToJoinTo=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][thisToPort-1][thisFromPort-1]</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;                                <span class="keywordflow">if</span> (self.ShowImpedanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessInductanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessCapacitanceDoer.Bool()) <span class="keywordflow">and</span> (self.fromPort == self.toPort):</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;                                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Step.MinX&#39;</span>]</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Bool():</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.MinX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impulse.MinX&#39;</span>]</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impulse.MaxX&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impulse.MaxX&#39;</span>]</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160; </div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;    <span class="keyword">def </span>onBottomRightYLimitChange(self,ax):</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.LimitChangeLock:</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;            self.LimitChangeLock=<span class="keyword">True</span></div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;            ylim=ax.get_ylim()</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomRightPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=(ylim[0]-self.bottomRightPlotProperties[<span class="stringliteral">&#39;B&#39;</span>])/self.bottomRightPlotProperties[<span class="stringliteral">&#39;M&#39;</span>]</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=(ylim[1]-self.bottomRightPlotProperties[<span class="stringliteral">&#39;B&#39;</span>])/self.bottomRightPlotProperties[<span class="stringliteral">&#39;M&#39;</span>]</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;                <span class="keywordflow">if</span> self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinStepImpedanceWithOthers&#39;</span>].Bool():</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;                    spPlotPropertiesToJoinFrom=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                    <span class="keywordflow">for</span> thisToPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;                        <span class="keywordflow">for</span> thisFromPort <span class="keywordflow">in</span> range(1,self.sp.m_P+1):</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;                            <span class="keywordflow">if</span> self.JoinIt(thisToPort,thisFromPort,<span class="stringliteral">&#39;Vertical&#39;</span>):</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;                                spPlotPropertiesToJoinTo=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][thisToPort-1][thisFromPort-1]</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;                                <span class="keywordflow">if</span> (self.ShowImpedanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessInductanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessCapacitanceDoer.Bool()) <span class="keywordflow">and</span> (self.fromPort == self.toPort):</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.MinY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impedance.MinY&#39;</span>]</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Impedance.MaxY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Impedance.MaxY&#39;</span>]</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;                                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.MinY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Step.MinY&#39;</span>]</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;                                    spPlotPropertiesToJoinTo[<span class="stringliteral">&#39;Step.MaxY&#39;</span>]=spPlotPropertiesToJoinFrom[<span class="stringliteral">&#39;Step.MaxY&#39;</span>]</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;            self.LimitChangeLock=<span class="keyword">False</span></div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160; </div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;    <span class="keyword">def </span>onTopLeftHome(self):</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topLeftPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            self.topLeftPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;            self.topLeftPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;            self.PlotSParameter()</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160; </div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;    <span class="keyword">def </span>onTopRightHome(self):</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topRightPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;            self.PlotSParameter()</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160; </div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;    <span class="keyword">def </span>onBottomLeftHome(self):</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomLeftPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;            self.bottomLeftPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;            self.bottomLeftPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;            self.PlotSParameter()</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160; </div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keyword">def </span>onBottomRightHome(self):</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomRightPlotProperties <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;            self.bottomRightPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;            self.bottomRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">False</span></div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;            self.PlotSParameter()</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160; </div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;    <span class="keyword">def </span>UpdatePreferences(self):</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;        self.ShowGridsDoer.Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.GridsOnPlots&#39;</span>])</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;        self.VariableLineWidthDoer.Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.VariableLineWidth&#39;</span>])</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;        self.ShowPassivityViolationsDoer.Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowPassivityViolations&#39;</span>])</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        self.ShowCausalityViolationsDoer.Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowCausalityViolations&#39;</span>])</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;        self.ShowImpedanceDoer.Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowImpedance&#39;</span>])</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        self.ShowExcessInductanceDoer.Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowExcessInductance&#39;</span>])</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;        self.ShowExcessCapacitanceDoer.Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.ShowExcessCapacitance&#39;</span>])</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;        self.LogScaleDoer.Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Plot.LogScale&#39;</span>])</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.JoinWithin&#39;</span>])</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithin&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.JoinWithin&#39;</span>])</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.JoinWithOthers&#39;</span>])</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;JoinWithOthers&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.JoinWithOthers&#39;</span>])</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinMagnitudeWithOthers&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.JoinMagnitudeWithOthers&#39;</span>])</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinPhaseWithOthers&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.JoinPhaseWithOthers&#39;</span>])</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinImpulseWithOthers&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.JoinImpulseWithOthers&#39;</span>])</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;JoinStepImpedanceWithOthers&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.JoinStepImpedanceWithOthers&#39;</span>])</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.Join.All&#39;</span>])</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.Join.OffDiagonal&#39;</span>])</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.Join.Reciprocals&#39;</span>])</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Frequencies&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Frequencies.Join.Reflects&#39;</span>])</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.Join.All&#39;</span>])</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.Join.OffDiagonal&#39;</span>])</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.Join.Reciprocals&#39;</span>])</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Times&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Times.Join.Reflects&#39;</span>])</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;All&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.Join.All&#39;</span>])</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;OffDiagonal&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.Join.OffDiagonal&#39;</span>])</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reciprocals&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.Join.Reciprocals&#39;</span>])</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        self.Zoom[<span class="stringliteral">&#39;Vertical&#39;</span>][<span class="stringliteral">&#39;Join&#39;</span>][<span class="stringliteral">&#39;Reflects&#39;</span>].Set(<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.Zoom.Vertical.Join.Reflects&#39;</span>])</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160; </div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;    <span class="keyword">def </span>UpdatePropertiesFromSParameters(self,new=False):</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        self.properties[<span class="stringliteral">&#39;FrequencyPoints&#39;</span>]=len(self.sp.m_f)-1</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;        self.properties[<span class="stringliteral">&#39;EndFrequency&#39;</span>]=self.sp.m_f[-1]</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        self.properties[<span class="stringliteral">&#39;ReferenceImpedance&#39;</span>]=self.sp.m_Z0</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;        <span class="keywordflow">if</span> si.fd.FrequencyList(self.sp.m_f).CheckEvenlySpaced():</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;            self.properties.CalculateOthersFromBaseInformation()</div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;            (negativeTime,positiveTime)=self.sp.DetermineImpulseResponseLength()</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;            self.properties[<span class="stringliteral">&#39;TimeLimitNegative&#39;</span>]=negativeTime</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;            self.properties[<span class="stringliteral">&#39;TimeLimitPositive&#39;</span>]=positiveTime</div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;            self.statusbar.set(str(self.properties[<span class="stringliteral">&#39;FrequencyPoints&#39;</span>])+</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;                <span class="stringliteral">&#39;(+1) frequency points to &#39;</span>+ToSI(self.properties[<span class="stringliteral">&#39;EndFrequency&#39;</span>],<span class="stringliteral">&#39;Hz&#39;</span>)+</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;                <span class="stringliteral">&#39;, Evenly Spaced in &#39;</span>+ToSI(self.properties[<span class="stringliteral">&#39;FrequencyResolution&#39;</span>],<span class="stringliteral">&#39;Hz&#39;</span>)+</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;                <span class="stringliteral">&#39; steps, Z0=&#39;</span>+ToSI(self.properties[<span class="stringliteral">&#39;ReferenceImpedance&#39;</span>],<span class="stringliteral">&#39;ohm&#39;</span>))</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;            self.statusbar.set(str(self.properties[<span class="stringliteral">&#39;FrequencyPoints&#39;</span>]+1)+</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;                <span class="stringliteral">&#39; frequency points, last frequency is &#39;</span>+ToSI(self.properties[<span class="stringliteral">&#39;EndFrequency&#39;</span>],<span class="stringliteral">&#39;Hz&#39;</span>)+</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;                <span class="stringliteral">&#39;, Unevenly spaced, Z0=&#39;</span>+ToSI(self.properties[<span class="stringliteral">&#39;ReferenceImpedance&#39;</span>],<span class="stringliteral">&#39;ohm&#39;</span>))</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;            self.properties[<span class="stringliteral">&#39;BaseSampleRate&#39;</span>]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;            self.properties[<span class="stringliteral">&#39;BaseSamplePeriod&#39;</span>]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;            self.properties[<span class="stringliteral">&#39;UserSamplePeriod&#39;</span>]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;            self.properties[<span class="stringliteral">&#39;TimePoints&#39;</span>]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            self.properties[<span class="stringliteral">&#39;FrequencyResolution&#39;</span>]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            self.properties[<span class="stringliteral">&#39;ImpulseResponseLength&#39;</span>]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;            self.properties[<span class="stringliteral">&#39;TimeLimitNegative&#39;</span>]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;            self.properties[<span class="stringliteral">&#39;TimeLimitPositive&#39;</span>]=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        <span class="keywordflow">if</span> new:</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;            self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>]=[[SParameterPlotsConfiguration() <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.sp.m_P)] <span class="keywordflow">for</span> _ <span class="keywordflow">in</span> range(self.sp.m_P)]</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        self.ZoomJoinActivations()</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160; </div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <span class="keyword">def </span>UpdateSParametersFromProperties(self):</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;        msg=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;        spChanged=<span class="keyword">False</span></div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.properties[<span class="stringliteral">&#39;TimePoints&#39;</span>] <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;            (negativeTime,positiveTime)=self.sp.DetermineImpulseResponseLength()</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> (negativeTime <span class="keywordflow">is</span> <span class="keywordtype">None</span>) <span class="keywordflow">and</span> <span class="keywordflow">not</span> (positiveTime <span class="keywordflow">is</span> <span class="keywordtype">None</span>) <span class="keywordflow">and</span> <span class="keywordflow">not</span> (self.properties[<span class="stringliteral">&#39;TimeLimitNegative&#39;</span>] <span class="keywordflow">is</span> <span class="keywordtype">None</span>) <span class="keywordflow">and</span> <span class="keywordflow">not</span> (self.properties[<span class="stringliteral">&#39;TimeLimitPositive&#39;</span>] <span class="keywordflow">is</span> <span class="keywordtype">None</span>):</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;                <span class="keywordflow">if</span> (self.properties[<span class="stringliteral">&#39;TimeLimitNegative&#39;</span>]&gt;negativeTime) <span class="keywordflow">or</span>\</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;                    self.properties[<span class="stringliteral">&#39;TimeLimitPositive&#39;</span>]&lt;positiveTime:</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;                    <span class="keywordflow">if</span> msg <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                        msg=InformationMessage(self,<span class="stringliteral">&#39;S-parameters : &#39;</span>+self.fileparts.FileNameWithExtension(), <span class="stringliteral">&#39;recalculating s-parameters based on changes\n Please wait.....&#39;</span>)</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                    self.sp=self.sp.LimitImpulseResponseLength((self.properties[<span class="stringliteral">&#39;TimeLimitNegative&#39;</span>],self.properties[<span class="stringliteral">&#39;TimeLimitPositive&#39;</span>]))</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;                    spChanged=<span class="keyword">True</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> si.fd.FrequencyList(self.sp.m_f).CheckEvenlySpaced() <span class="keywordflow">or</span>\</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;                (self.properties[<span class="stringliteral">&#39;FrequencyPoints&#39;</span>]!=len(self.sp.m_f)-1) <span class="keywordflow">or</span>\</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;                (self.properties[<span class="stringliteral">&#39;EndFrequency&#39;</span>]!=self.sp.m_f[-1]):</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;                <span class="keywordflow">if</span> msg <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;                    msg=InformationMessage(self,<span class="stringliteral">&#39;S-parameters : &#39;</span>+self.fileparts.FileNameWithExtension(), <span class="stringliteral">&#39;recalculating s-parameters based on changes\n Please wait.....&#39;</span>)</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;                self.sp=self.sp.Resample(si.fd.EvenlySpacedFrequencyList(</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;                    self.properties[<span class="stringliteral">&#39;EndFrequency&#39;</span>],</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;                    self.properties[<span class="stringliteral">&#39;FrequencyPoints&#39;</span>]))</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;                spChanged=<span class="keyword">True</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160; </div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;        <span class="keywordflow">if</span> self.properties[<span class="stringliteral">&#39;ReferenceImpedance&#39;</span>] != self.sp.m_Z0:</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;            <span class="keywordflow">if</span> msg <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;                msg=InformationMessage(self,<span class="stringliteral">&#39;S-parameters : &#39;</span>+self.fileparts.FileNameWithExtension(), <span class="stringliteral">&#39;recalculating s-parameters based on changes\n Please wait.....&#39;</span>)</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;            self.sp.SetReferenceImpedance(self.properties[<span class="stringliteral">&#39;ReferenceImpedance&#39;</span>])</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;            spChanged=<span class="keyword">True</span></div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160; </div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;        <span class="keywordflow">if</span> spChanged:</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;            self.UpdatePropertiesFromSParameters()</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> msg <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;            msg.destroy()</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;        <span class="keywordflow">if</span> spChanged:</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;            self.PlotSParameter()</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160; </div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;    <span class="keyword">def </span>onClosing(self):</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;        self.withdraw()</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;        self.destroy()</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160; </div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keyword">def </span>destroy(self):</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;        tk.Toplevel.withdraw(self)</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        tk.Toplevel.destroy(self)</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160; </div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    <span class="keyword">def </span>PlotSParameter(self):</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;        self.topLeftPlot.cla()</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;        self.topRightPlot.cla()</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;        self.bottomLeftPlot.cla()</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;        self.bottomRightPlot.cla()</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160; </div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;        self.topLeftPlotProperties=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        self.topRightPlotProperties=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        self.bottomLeftPlotProperties=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;        self.bottomRightPlotProperties=<span class="keywordtype">None</span></div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        self.plotProperties=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160; </div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> <a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;Appearance.PlotCursorValues&#39;</span>]:</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;            self.topLeftPlot.format_coord = <span class="keyword">lambda</span> x, y: <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;            self.topRightPlot.format_coord = <span class="keyword">lambda</span> x, y: <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;            self.bottomLeftPlot.format_coord = <span class="keyword">lambda</span> x, y: <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;            self.bottomRightPlot.format_coord = <span class="keyword">lambda</span> x, y: <span class="stringliteral">&#39;&#39;</span></div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160; </div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        fr=self.sp.FrequencyResponse(self.toPort,self.fromPort)</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;        ir=fr.ImpulseResponse()</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160; </div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;        y=fr.Response(<span class="stringliteral">&#39;dB&#39;</span>)</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160; </div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;        self.freqLabel=ToSI(fr.Frequencies()[-1],<span class="stringliteral">&#39;Hz&#39;</span>)[-3:]</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;        freqLabelDivisor=FromSI(<span class="stringliteral">&#39;1. &#39;</span>+self.freqLabel,<span class="stringliteral">&#39;Hz&#39;</span>)</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160; </div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;        x=fr.Frequencies(freqLabelDivisor)</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160; </div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;        <span class="keywordflow">if</span> self.ShowPassivityViolationsDoer.Bool():</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;            self.passivityViolations=[]</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;            s=self.sp._LargestSingularValues()</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;            <span class="keywordflow">for</span> n <span class="keywordflow">in</span> range(len(s)):</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;                <span class="keywordflow">if</span> s[n]-1 &gt; 1e-15:</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;                    dotsize=max(min(20.,math.log10(s[0])/math.log10(1.01)*20.),1e-15)</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;                    self.passivityViolations.append([x[n],y[n],dotsize])</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160; </div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        lw=[min(1.,math.sqrt(w))*1.5 <span class="keywordflow">for</span> w <span class="keywordflow">in</span> fr.Response(<span class="stringliteral">&#39;mag&#39;</span>)]</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160; </div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;        fastway=<span class="keyword">True</span></div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160; </div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="comment"># this works - properly displays on log plot, only it is just too slow!</span></div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;<span class="comment">#         if self.logScale.get():</span></div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;<span class="comment">#             fastway=False</span></div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160; </div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;        <span class="keywordflow">if</span> self.VariableLineWidthDoer.Bool():</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;            <span class="keywordflow">if</span> fastway:</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;                segments = [[[x[i],y[i]],[x[i+1],y[i+1]]] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(x)-1)]</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;                slw=lw[:-1]</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;                lc = LineCollection(segments, linewidths=slw,color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;                self.topLeftPlot.add_collection(lc)</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;                <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(x)-1):</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;                    <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;                        self.topLeftPlot.semilogx(x[i:i+2],y[i:i+2],linewidth=lw[i],color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;                        self.topLeftPlot.plot(x[i:i+2],y[i:i+2],linewidth=lw[i],color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;            <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;                self.topLeftPlot.semilogx(x,y)</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;                self.topLeftPlot.plot(x,y)</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160; </div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;        <span class="keywordflow">if</span> self.ShowPassivityViolationsDoer.Bool():</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;            self.topLeftPlot.scatter(</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;                [c[0] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.passivityViolations],</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;                [c[1] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.passivityViolations],</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                s=[c[2] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.passivityViolations],</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                color=<span class="stringliteral">&#39;red&#39;</span>)</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160; </div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;        self.topLeftPlotProperties=self.plotProperties[<span class="stringliteral">&#39;Magnitude&#39;</span>]</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;        self.topLeftLabel.config(text=<span class="stringliteral">&#39;Magnitude&#39;</span>)</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160; </div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topLeftPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]:</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;            self.topLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=min(x)</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;            self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=max(x)</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;            self.topLeftPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topLeftPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]:</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;            self.topLeftPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=min(max(min(y)-1.,-60.0),max(y)+1.)</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;            self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=max(max(min(y)-1.,-60.0),max(y)+1.)</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;            self.topLeftPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160; </div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;        <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;            <span class="keywordflow">if</span> max(x)&gt;0:</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;                <span class="keywordflow">for</span> value <span class="keywordflow">in</span> x:</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;                    <span class="keywordflow">if</span> value&gt;0.:</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;                        self.topLeftPlot.set_xlim(left=value)</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;            self.topLeftPlot.set_xlim(left=self.topLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;        self.topLeftPlot.set_xlim(right=self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;        self.topLeftPlot.set_ylim(bottom=self.topLeftPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>])</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;        self.topLeftPlot.set_ylim(top=self.topLeftPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>])</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160; </div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        self.topLeftPlot.set_ylabel(<span class="stringliteral">&#39;magnitude (dB)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;        self.topLeftPlot.set_xlabel(<span class="stringliteral">&#39;frequency (&#39;</span>+self.freqLabel+<span class="stringliteral">&#39;)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160; </div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;        <span class="keywordflow">if</span> self.ShowGridsDoer.Bool():</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;            self.topLeftPlot.grid(<span class="keyword">True</span>, <span class="stringliteral">&#39;both&#39;</span>)</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160; </div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;        TD = self.plotProperties[<span class="stringliteral">&#39;Delay&#39;</span>]</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;        frph=fr._DelayBy(-TD)</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160; </div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;        y=frph.Response(<span class="stringliteral">&#39;deg&#39;</span>)</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160; </div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;        x=frph.Frequencies(freqLabelDivisor)</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160; </div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;        <span class="keywordflow">if</span> self.VariableLineWidthDoer.Bool():</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;            <span class="keywordflow">if</span> fastway:</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;                segments = [[[x[i],y[i]],[x[i+1],y[i+1]]] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(x)-1)]</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;                slw=lw[:-1]</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;                lc = LineCollection(segments, linewidths=slw,color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;                self.topRightPlot.add_collection(lc)</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;                <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(x)-1):</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;                    <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;                        self.topRightPlot.semilogx(x[i:i+2],y[i:i+2],linewidth=lw[i],color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;                        self.topRightPlot.plot(x[i:i+2],y[i:i+2],linewidth=lw[i],color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;            <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;                self.topRightPlot.semilogx(x,y)</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;                self.topRightPlot.plot(x,y)</div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160; </div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;        self.topRightPlotProperties=self.plotProperties[<span class="stringliteral">&#39;Phase&#39;</span>]</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;        self.topRightLabel.config(text=<span class="stringliteral">&#39;Phase&#39;</span>)</div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160; </div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topRightPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]:</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=min(x)</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=max(x)</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]:</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=min(y)-1</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=max(y)+1</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160; </div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;            <span class="keywordflow">if</span> max(x)&gt;0:</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;                <span class="keywordflow">for</span> value <span class="keywordflow">in</span> x:</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;                    <span class="keywordflow">if</span> value&gt;0:</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;                        self.topRightPlot.set_xlim(left=value)</div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;            self.topRightPlot.set_xlim(left=self.topRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;        self.topRightPlot.set_xlim(right=self.topRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;        self.topRightPlot.set_ylim(bottom=self.topRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>])</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;        self.topRightPlot.set_ylim(top=self.topRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>])</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160; </div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;        self.topRightPlot.set_ylabel(<span class="stringliteral">&#39;phase (degrees)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;        self.topRightPlot.set_xlabel(<span class="stringliteral">&#39;frequency (&#39;</span>+self.freqLabel+<span class="stringliteral">&#39;)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160; </div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;        <span class="keywordflow">if</span> self.ShowGridsDoer.Bool():</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;            self.topRightPlot.grid(<span class="keyword">True</span>, <span class="stringliteral">&#39;both&#39;</span>)</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160; </div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;        <span class="keywordflow">if</span> ir <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;            <span class="keywordflow">if</span> self.buttonLabels[self.toPort-1][self.fromPort-1][:2]==<span class="stringliteral">&#39;i/&#39;</span> <span class="keywordflow">or</span> self.buttonLabels[self.toPort-1][self.fromPort-1][:3]==<span class="stringliteral">&#39;di/&#39;</span>:</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;                print(<span class="stringliteral">&#39;Integrate&#39;</span>)</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;                ir=si.td.wf.ImpulseResponse(ir.Integral(addPoint=<span class="keyword">False</span>))</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;            <span class="keywordflow">if</span> self.buttonLabels[self.toPort-1][self.fromPort-1][:3]==<span class="stringliteral">&#39;di/&#39;</span>:</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;                print(<span class="stringliteral">&#39;Integrate&#39;</span>)</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;                ir=si.td.wf.ImpulseResponse(ir.Integral(addPoint=<span class="keyword">False</span>)*ir.td.Fs)</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160; </div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;            y=ir.Values()</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160; </div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;            timeLabel=ToSI(ir.Times()[-1],<span class="stringliteral">&#39;s&#39;</span>)[-2:]</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;            timeLabelDivisor=FromSI(<span class="stringliteral">&#39;1. &#39;</span>+timeLabel,<span class="stringliteral">&#39;s&#39;</span>)</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160; </div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;            x=ir.Times(timeLabelDivisor)</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160; </div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;            self.bottomLeftPlot.plot(x,y)</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160; </div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;            <span class="keywordflow">if</span> self.ShowCausalityViolationsDoer.Bool():</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;                minv=0.00001; maxv=0.1</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;                minx=math.log10(minv); maxx=math.log10(maxv)</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;                miny=0.; maxy=20.</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;                m=(maxy-miny)/(maxx-minx); b=miny-m*minx</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;                self.causalityViolations=[]</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;                Ts=1./ir.td.Fs/1e-9</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;                <span class="keywordflow">for</span> k <span class="keywordflow">in</span> range(len(x)):</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;                    <span class="keywordflow">if</span> x[k]&lt;=-Ts <span class="keywordflow">and</span> abs(y[k])&gt;0:</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;                        dotsize=max(math.log10(min(maxv,max(minv,abs(y[k]))))*m+b,1e-15)</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;                        <span class="keywordflow">if</span> dotsize&gt;2e-15:</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;                            self.causalityViolations.append([k,dotsize])</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;                self.bottomLeftPlot.scatter(</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;                    [x[c[0]] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.causalityViolations],</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;                    [y[c[0]] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.causalityViolations],</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;                    s=[c[1] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.causalityViolations],</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;                    color=<span class="stringliteral">&#39;red&#39;</span>)</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160; </div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;            self.bottomLeftPlotProperties=self.plotProperties[<span class="stringliteral">&#39;Impulse&#39;</span>]</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;            self.bottomLeftLabel.config(text=<span class="stringliteral">&#39;Impulse Response&#39;</span>)</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160; </div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomLeftPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]:</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=min(x)</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=max(x)</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomLeftPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]:</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=min(min(y)*1.05,-0.1)</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=max(max(y)*1.05,0.1)</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;                self.bottomLeftPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160; </div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;            self.bottomLeftPlot.set_xlim(left=self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;            self.bottomLeftPlot.set_xlim(right=self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;            self.bottomLeftPlot.set_ylim(bottom=self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>])</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;            self.bottomLeftPlot.set_ylim(top=self.bottomLeftPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>])</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160; </div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;            self.bottomLeftPlot.set_ylabel(<span class="stringliteral">&#39;amplitude&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;            self.bottomLeftPlot.set_xlabel(<span class="stringliteral">&#39;time (&#39;</span>+timeLabel+<span class="stringliteral">&#39;)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160; </div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;            <span class="keywordflow">if</span> self.ShowGridsDoer.Bool():</div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;                self.bottomLeftPlot.grid(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160; </div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;            firFilter=ir.FirFilter()</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;            stepWaveformTimeDescriptor=ir.td/firFilter.FilterDescriptor()</div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;            stepWaveform=si.td.wf.StepWaveform(stepWaveformTimeDescriptor)</div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;            stepResponse=stepWaveform*firFilter</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;            y=stepResponse.Values()</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;            x=stepResponse.Times(timeLabelDivisor)</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;            Ts=1./(stepWaveformTimeDescriptor.Fs)</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160; </div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;            self.bottomRightToolbar.update()</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160; </div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;            <span class="keywordflow">if</span> (self.ShowImpedanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessInductanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessCapacitanceDoer.Bool()) <span class="keywordflow">and</span> (self.fromPort == self.toPort):</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;                self.bottomRightPlotProperties=self.plotProperties[<span class="stringliteral">&#39;Impedance&#39;</span>]</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;                Z0=self.properties[<span class="stringliteral">&#39;ReferenceImpedance&#39;</span>]</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;                y=[3000. <span class="keywordflow">if</span> (1-yv)&lt;=.000001 <span class="keywordflow">else</span> min(Z0*(1+yv)/(1-yv),3000) <span class="keywordflow">for</span> yv <span class="keywordflow">in</span> y]</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;                x=[xv/2 <span class="keywordflow">for</span> xv <span class="keywordflow">in</span> x]</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;                self.bottomRightPlot.set_ylabel(<span class="stringliteral">&#39;impedance (ohms)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;                self.bottomRightPlot.set_xlabel(<span class="stringliteral">&#39;length (&#39;</span>+timeLabel+<span class="stringliteral">&#39;)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160; </div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]:</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;                    self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=min(min(y)*1.05,Z0-1)</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;                    self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=max(max(y)*1.05,0.1)</div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;                    self.bottomRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;                maxy=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;                miny=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]</div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160; </div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;                <span class="keywordflow">if</span> self.ShowImpedanceDoer.Bool():</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;                    self.bottomRightlabel.config(text=<span class="stringliteral">&#39;Impedance Profile&#39;</span>)</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;                    self.bottomRightPlot.set_ylabel(<span class="stringliteral">&#39;impedance (Ohms)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;                <span class="keywordflow">elif</span> self.ShowExcessInductanceDoer.Bool():</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;                    maxy=(maxy-Z0)*Ts/2.</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;                    miny=(miny-Z0)*Ts/2.</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;                    span=max(abs(maxy),abs(miny))</div>
<div class="line"><a name="l01158"></a><span class="lineno"> 1158</span>&#160;                    yLabel=ToSI(span,<span class="stringliteral">&#39;H&#39;</span>)[-2:]</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;                    yLabelDivisor=FromSI(<span class="stringliteral">&#39;1. &#39;</span>+yLabel,<span class="stringliteral">&#39;H&#39;</span>)</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;                    maxy=maxy/yLabelDivisor</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;                    miny=miny/yLabelDivisor</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;                    y=[(yv-Z0)*Ts/2./yLabelDivisor <span class="keywordflow">for</span> yv <span class="keywordflow">in</span> y]</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;                    self.bottomRightlabel.config(text=<span class="stringliteral">&#39;Excess Inductance Profile&#39;</span>)</div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;                    self.bottomRightPlot.set_ylabel(<span class="stringliteral">&#39;Excess L (&#39;</span>+yLabel+<span class="stringliteral">&#39;)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;                <span class="keywordflow">elif</span> self.ShowExcessCapacitanceDoer.Bool():</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;                    maxy=(1./maxy-1./Z0)*Ts/2.</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;                    miny=(1./miny-1./Z0)*Ts/2.</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;                    span=max(abs(maxy),abs(miny))</div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;                    yLabel=ToSI(span,<span class="stringliteral">&#39;F&#39;</span>)[-2:]</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;                    yLabelDivisor=FromSI(<span class="stringliteral">&#39;1. &#39;</span>+yLabel,<span class="stringliteral">&#39;F&#39;</span>)</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;                    maxy=maxy/yLabelDivisor</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;                    miny=miny/yLabelDivisor</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;                    y=[(1./yv-1./Z0)*Ts/2./yLabelDivisor <span class="keywordflow">for</span> yv <span class="keywordflow">in</span> y]</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;                    self.bottomRightlabel.config(text=<span class="stringliteral">&#39;Excess Capacitance Profile&#39;</span>)</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;                    self.bottomRightPlot.set_ylabel(<span class="stringliteral">&#39;Excess C (&#39;</span>+yLabel+<span class="stringliteral">&#39;)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160; </div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;M&#39;</span>]=(maxy-miny)/(self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]-self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>])</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;B&#39;</span>]=maxy-(self.bottomRightPlotProperties[<span class="stringliteral">&#39;M&#39;</span>]*self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>])</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160; </div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;                self.bottomRightlabel.config(text=<span class="stringliteral">&#39;Step Response&#39;</span>)</div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;                self.bottomRightPlotProperties=self.plotProperties[<span class="stringliteral">&#39;Step&#39;</span>]</div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;                self.bottomRightPlot.set_ylabel(<span class="stringliteral">&#39;amplitude&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;                self.bottomRightPlot.set_xlabel(<span class="stringliteral">&#39;time (&#39;</span>+timeLabel+<span class="stringliteral">&#39;)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;                <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]:</div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;                    self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=min(min(y)*1.05,-0.1)</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;                    self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=max(max(y)*1.05,0.1)</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;                    self.bottomRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160; </div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;            self.bottomRightPlot.plot(x,y)</div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160; </div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;            <span class="keywordflow">if</span> self.ShowCausalityViolationsDoer.Bool():</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;                self.bottomRightPlot.scatter(</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;                    [x[c[0]] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.causalityViolations],</div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;                    [y[c[0]] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.causalityViolations],</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;                    s=[c[1] <span class="keywordflow">for</span> c <span class="keywordflow">in</span> self.causalityViolations],</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;                    color=<span class="stringliteral">&#39;red&#39;</span>)</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160; </div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.bottomRightPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]:</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=min(x)</div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=max(x)</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;                self.bottomRightPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;                <span class="keywordflow">if</span> (self.ShowImpedanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessInductanceDoer.Bool() <span class="keywordflow">or</span> self.ShowExcessCapacitanceDoer.Bool()) <span class="keywordflow">and</span> (self.fromPort == self.toPort):</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Step.MinX&#39;</span>]=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]*2.0</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Step.MaxX&#39;</span>]=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]*2.0</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Step.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;                <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Impedance.MinX&#39;</span>]=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]/2.0</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Impedance.MaxX&#39;</span>]=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]/2.0</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;                    self.plotProperties[<span class="stringliteral">&#39;Impedance.XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160; </div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;            self.bottomRightPlot.set_xlim(left=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;            self.bottomRightPlot.set_xlim(right=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;            self.bottomRightPlot.set_ylim(bottom=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]*self.bottomRightPlotProperties[<span class="stringliteral">&#39;M&#39;</span>]+self.bottomRightPlotProperties[<span class="stringliteral">&#39;B&#39;</span>])</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;            self.bottomRightPlot.set_ylim(top=self.bottomRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]*self.bottomRightPlotProperties[<span class="stringliteral">&#39;M&#39;</span>]+self.bottomRightPlotProperties[<span class="stringliteral">&#39;B&#39;</span>])</div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160; </div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        <span class="keywordflow">if</span> self.ShowGridsDoer.Bool():</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;            self.bottomRightPlot.grid(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160; </div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;        self.topLeftCanvas.draw()</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;        self.topRightCanvas.draw()</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;        self.bottomLeftCanvas.draw()</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;        self.bottomRightCanvas.draw()</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160; </div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;        self.topLeftToolbar.update()</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;        self.topRightToolbar.update()</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;        self.bottomLeftToolbar.update()</div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        self.bottomRightToolbar.update()</div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160; </div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        self.topLeftPlot.callbacks.connect(<span class="stringliteral">&#39;xlim_changed&#39;</span>, self.onTopLeftXLimitChange)</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;        self.topLeftPlot.callbacks.connect(<span class="stringliteral">&#39;ylim_changed&#39;</span>, self.onTopLeftYLimitChange)</div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;        self.topRightPlot.callbacks.connect(<span class="stringliteral">&#39;xlim_changed&#39;</span>, self.onTopRightXLimitChange)</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;        self.topRightPlot.callbacks.connect(<span class="stringliteral">&#39;ylim_changed&#39;</span>, self.onTopRightYLimitChange)</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;        self.bottomLeftPlot.callbacks.connect(<span class="stringliteral">&#39;xlim_changed&#39;</span>, self.onBottomLeftXLimitChange)</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;        self.bottomLeftPlot.callbacks.connect(<span class="stringliteral">&#39;ylim_changed&#39;</span>, self.onBottomLeftYLimitChange)</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        self.bottomRightPlot.callbacks.connect(<span class="stringliteral">&#39;xlim_changed&#39;</span>, self.onBottomRightXLimitChange)</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;        self.bottomRightPlot.callbacks.connect(<span class="stringliteral">&#39;ylim_changed&#39;</span>, self.onBottomRightYLimitChange)</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160; </div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;    <span class="keyword">def </span>onSelectSParameter(self,toP,fromP):</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;        self.buttons[self.toPort-1][self.fromPort-1].config(relief=tk.RAISED)</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        self.toPort = toP</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;        self.fromPort = fromP</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;        self.buttons[self.toPort-1][self.fromPort-1].config(relief=tk.SUNKEN)</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        self.plotProperties=self.properties[<span class="stringliteral">&#39;Plot.S&#39;</span>][self.toPort-1][self.fromPort-1]</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        self.delayViewerProperty.SetString(self.plotProperties[<span class="stringliteral">&#39;Delay&#39;</span>])</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160; </div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="keyword">def </span>onAutoscale(self):</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;        self.plt.autoscale(<span class="keyword">True</span>)</div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;        self.f.canvas.draw()</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160; </div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;    <span class="keyword">def </span>onUnwrap(self):</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;        fr=self.sp.FrequencyResponse(self.toPort,self.fromPort)</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;        ir=fr.ImpulseResponse()</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;        <span class="keywordflow">if</span> ir <span class="keywordflow">is</span> <span class="keywordflow">not</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;            idx = ir.Values(<span class="stringliteral">&#39;abs&#39;</span>).index(max(ir.Values(<span class="stringliteral">&#39;abs&#39;</span>)))</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;            TD = ir.Times()[idx] <span class="comment"># the time of the main peak</span></div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;            TD=0.</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        self.plotProperties[<span class="stringliteral">&#39;Delay&#39;</span>]=TD</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;        self.delayViewerProperty.SetString(TD)</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        self.delayViewerProperty.onEntered(<span class="keywordtype">None</span>)</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160; </div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;    <span class="keyword">def </span>onDelayEntered(self,event):</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        self.topRightPlot.cla()</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        fr=self.sp.FrequencyResponse(self.toPort,self.fromPort)</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        TD = self.delayViewerProperty.GetString()</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        self.delayViewerProperty.SetString(TD)</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;        self.plotProperties[<span class="stringliteral">&#39;Delay&#39;</span>]=TD</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;        fr=fr._DelayBy(-TD)</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;        lw=[min(1.,math.sqrt(w))*1.5 <span class="keywordflow">for</span> w <span class="keywordflow">in</span> fr.Response(<span class="stringliteral">&#39;mag&#39;</span>)]</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;        y=fr.Response(<span class="stringliteral">&#39;deg&#39;</span>)</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;        x=fr.Frequencies(<span class="stringliteral">&#39;GHz&#39;</span>)</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;        fastway=<span class="keyword">True</span></div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;        <span class="keywordflow">if</span> self.VariableLineWidthDoer.Bool():</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;            <span class="keywordflow">if</span> fastway:</div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;                segments = [[[x[i],y[i]],[x[i+1],y[i+1]]] <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(x)-1)]</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;                slw=lw[:-1]</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;                lc = LineCollection(segments, linewidths=slw,color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;                self.topRightPlot.add_collection(lc)</div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;                <span class="keywordflow">for</span> i <span class="keywordflow">in</span> range(len(x)-1):</div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;                    <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;                        self.topRightPlot.semilogx(x[i:i+2],y[i:i+2],linewidth=lw[i],color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;                    <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;                        self.topRightPlot.plot(x[i:i+2],y[i:i+2],linewidth=lw[i],color=<span class="stringliteral">&#39;blue&#39;</span>)</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;            <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;                self.topRightPlot.semilogx(x,y)</div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;                self.topRightPlot.plot(x,y)</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160; </div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topRightPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]:</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>]=min(x)</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>]=max(x)</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;XInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.topRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]:</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>]=min(y)-1</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>]=max(y)+1</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;            self.topRightPlotProperties[<span class="stringliteral">&#39;YInitialized&#39;</span>]=<span class="keyword">True</span></div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160; </div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;        <span class="keywordflow">if</span> self.LogScaleDoer.Bool():</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;            <span class="keywordflow">if</span> max(x)&gt;0:</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;                <span class="keywordflow">for</span> value <span class="keywordflow">in</span> x:</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;                    <span class="keywordflow">if</span> value&gt;0:</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;                        self.topRightPlot.set_xlim(left=value)</div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;                        <span class="keywordflow">break</span></div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;            self.topRightPlot.set_xlim(left=self.topRightPlotProperties[<span class="stringliteral">&#39;MinX&#39;</span>])</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;        self.topRightPlot.set_xlim(right=self.topRightPlotProperties[<span class="stringliteral">&#39;MaxX&#39;</span>])</div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;        self.topRightPlot.set_ylim(bottom=self.topRightPlotProperties[<span class="stringliteral">&#39;MinY&#39;</span>])</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;        self.topRightPlot.set_ylim(top=self.topRightPlotProperties[<span class="stringliteral">&#39;MaxY&#39;</span>])</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160; </div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;        self.topRightPlot.set_ylabel(<span class="stringliteral">&#39;phase (degrees)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;        self.topRightPlot.set_xlabel(<span class="stringliteral">&#39;frequency (&#39;</span>+self.freqLabel+<span class="stringliteral">&#39;)&#39;</span>,fontsize=10)</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160; </div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;        <span class="keywordflow">if</span> self.ShowGridsDoer.Bool():</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;            self.topRightPlot.grid(<span class="keyword">True</span>, <span class="stringliteral">&#39;both&#39;</span>)</div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160; </div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;        self.topRightCanvas.draw()</div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;        self.topRightToolbar.update()</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160; </div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;    <span class="keyword">def </span>onReadSParametersFromFile(self):</div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;        filename=AskOpenFileName(filetypes=[(<span class="stringliteral">&#39;s-parameter files&#39;</span>, (<span class="stringliteral">&#39;*.s*p&#39;</span>)),(<span class="stringliteral">&#39;calibration files&#39;</span>, (<span class="stringliteral">&#39;*.cal&#39;</span>))],</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;                                 initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;                                 initialfile=self.fileparts.FileNameWithExtension(),</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;                                 parent=self)</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;        self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;        <span class="keywordflow">if</span> self.fileparts.fileext==<span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160; </div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;        <span class="keywordflow">if</span> self.fileparts.fileext==<span class="stringliteral">&#39;.cal&#39;</span>:</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;            sp=si.m.cal.Calibration(0,0)</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;            <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;                sp.ReadFromFile(filename)</div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;            <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;                messagebox.showerror(<span class="stringliteral">&#39;Calibration File&#39;</span>,<span class="stringliteral">&#39;could not be read &#39;</span>)</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;                <span class="keywordflow">return</span></div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;            sp=si.sp.SParameterFile(filename)</div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160; </div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;        self.NewSParameters(sp, filename)</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160; </div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;    <span class="keyword">def </span>onWriteSParametersToFile(self):</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;        ports=self.sp.m_P</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;        extension=<span class="stringliteral">&#39;.s&#39;</span>+str(ports)+<span class="stringliteral">&#39;p&#39;</span></div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;        filetypes=[(<span class="stringliteral">&#39;s-parameters&#39;</span>, extension)]</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;        <span class="keywordflow">if</span> self.calibration != <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;            extension=<span class="stringliteral">&#39;.cal&#39;</span></div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;            filetypes=[(<span class="stringliteral">&#39;calibration file&#39;</span>, <span class="stringliteral">&#39;.cal&#39;</span>)]+filetypes</div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;        filename=AskSaveAsFilename(filetypes=filetypes,</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;                    defaultextension=extension,</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;                    initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;                    initialfile=self.fileparts.FileNameWithExtension(extension),</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;                    parent=self)</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;        self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;        <span class="keywordflow">if</span> self.fileparts.fileext==<span class="stringliteral">&#39;.cal&#39;</span>:</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;            self.calibration.WriteToFile(filename)</div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;            self.sp.numDigits=<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>[<span class="stringliteral">&#39;SParameterProperties.SignificantDigits&#39;</span>]</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;            self.sp.WriteToFile(filename,<span class="stringliteral">&#39;R &#39;</span>+str(self.sp.m_Z0))</div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160; </div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;    <span class="keyword">def </span>onCalculationProperties(self):</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;        self.parent.onCalculationProperties()</div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160; </div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;    <span class="keyword">def </span>onSParameterProperties(self):</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> hasattr(self, <span class="stringliteral">&#39;SParameterPropertiesDialog&#39;</span>):</div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;            self.SParameterPropertiesDialog = SParameterPropertiesDialog(self,self.properties)</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;        <span class="keywordflow">if</span> self.SParameterPropertiesDialog == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;            self.SParameterPropertiesDialog= SParameterPropertiesDialog(self,self.properties)</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.SParameterPropertiesDialog.winfo_exists():</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;                self.SParameterPropertiesDialog=SParameterPropertiesDialog(self,self.properties)</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;        self.SParameterPropertiesDialog.grab_set()</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160; </div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160; </div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;    <span class="keyword">def </span>onMatplotlib2TikZ(self):</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;        variableNameText=<span class="stringliteral">&#39;_&#39;</span>+<span class="stringliteral">&#39;_&#39;</span>.join((self.buttonLabels[self.toPort-1][self.fromPort-1]).split(<span class="stringliteral">&#39; &#39;</span>))</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;        filename=AskSaveAsFilename(parent=self,filetypes=[(<span class="stringliteral">&#39;tex&#39;</span>, <span class="stringliteral">&#39;.tex&#39;</span>)],</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.tex&#39;</span>,</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;                                   initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;                                   initialfile=self.fileparts.filename+variableNameText+<span class="stringliteral">&#39;_Magnitude.tex&#39;</span>)</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160; </div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;            si.test.PlotTikZ(filename,self.topLeftFigure)</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Export LaTeX&#39;</span>,<span class="stringliteral">&#39;LaTeX could not be generated or written &#39;</span>)                </div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;        fp=FileParts(filename.replace(<span class="stringliteral">&#39;_Magnitude.tex&#39;</span>, <span class="stringliteral">&#39;&#39;</span>).replace(<span class="stringliteral">&#39;Magnitude.tex&#39;</span>, <span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;        filename=fp.filename</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160; </div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;        filename=AskSaveAsFilename(parent=self,filetypes=[(<span class="stringliteral">&#39;tex&#39;</span>, <span class="stringliteral">&#39;.tex&#39;</span>)],</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.tex&#39;</span>,</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;                                   initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;                                   initialfile=filename+<span class="stringliteral">&#39;_Phase.tex&#39;</span>)</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160; </div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;            si.test.PlotTikZ(filename,self.topRightFigure)</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Export LaTeX&#39;</span>,<span class="stringliteral">&#39;LaTeX could not be generated or written &#39;</span>)                </div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;        fp=FileParts(filename.replace(<span class="stringliteral">&#39;_Phase.tex&#39;</span>, <span class="stringliteral">&#39;&#39;</span>).replace(<span class="stringliteral">&#39;Phase.tex&#39;</span>, <span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;        filename=fp.filename</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160; </div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;        filename=AskSaveAsFilename(parent=self,filetypes=[(<span class="stringliteral">&#39;tex&#39;</span>, <span class="stringliteral">&#39;.tex&#39;</span>)],</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.tex&#39;</span>,</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;                                   initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;                                   initialfile=filename+<span class="stringliteral">&#39;_ImpulseResponse.tex&#39;</span>)</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160; </div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;            si.test.PlotTikZ(filename,self.bottomLeftFigure)</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Export LaTeX&#39;</span>,<span class="stringliteral">&#39;LaTeX could not be generated or written &#39;</span>)                </div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;        fp=FileParts(filename.replace(<span class="stringliteral">&#39;_ImpulseResponse.tex&#39;</span>, <span class="stringliteral">&#39;&#39;</span>).replace(<span class="stringliteral">&#39;ImpulseResponse.tex&#39;</span>, <span class="stringliteral">&#39;&#39;</span>))</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;        filename=fp.filename</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160; </div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;        filename=AskSaveAsFilename(parent=self,filetypes=[(<span class="stringliteral">&#39;tex&#39;</span>, <span class="stringliteral">&#39;.tex&#39;</span>)],</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;                                   defaultextension=<span class="stringliteral">&#39;.tex&#39;</span>,</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;                                   initialdir=self.fileparts.AbsoluteFilePath(),</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;                                   initialfile=filename+<span class="stringliteral">&#39;_StepResponse.tex&#39;</span>)</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;        <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160; </div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;        <span class="keywordflow">try</span>:</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;            si.test.PlotTikZ(filename,self.bottomRightFigure)</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;        <span class="keywordflow">except</span>:</div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Export LaTeX&#39;</span>,<span class="stringliteral">&#39;LaTeX could not be generated or written &#39;</span>)</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160; </div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;    <span class="keyword">def </span>onHelp(self):</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;        <span class="keywordflow">if</span> Doer.helpKeys <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;            messagebox.showerror(<span class="stringliteral">&#39;Help System&#39;</span>,<span class="stringliteral">&#39;Cannot find or open this help element&#39;</span>)</div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;            <span class="keywordflow">return</span></div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;        Doer.helpKeys.Open(<span class="stringliteral">&#39;sec:S-parameter-Viewer&#39;</span>)</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160; </div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;    <span class="keyword">def </span>onControlHelp(self):</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;        Doer.inHelp=<span class="keyword">True</span></div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;        self.config(cursor=<span class="stringliteral">&#39;question_arrow&#39;</span>)</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160; </div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;    <span class="keyword">def </span>onEscape(self):</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;        Doer.inHelp=<span class="keyword">False</span></div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;        self.config(cursor=<span class="stringliteral">&#39;left_ptr&#39;</span>)</div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160; </div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;    <span class="keyword">def </span>onEnforcePassivity(self):</div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;        self.sp.EnforcePassivity()</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;        self.UpdatePropertiesFromSParameters()</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160; </div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;    <span class="keyword">def </span>onEnforceCausality(self):</div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;        self.sp.EnforceCausality()</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;        self.UpdatePropertiesFromSParameters()</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160; </div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;    <span class="keyword">def </span>onEnforceBothPassivityAndCausality(self):</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;        self.sp.EnforceBothPassivityAndCausality(maxIterations=30,causalityThreshold=1e-5)</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;        self.UpdatePropertiesFromSParameters()</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160; </div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    <span class="keyword">def </span>onEnforceReciprocity(self):</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;        self.sp.EnforceReciprocity()</div>
<div class="line"><a name="l01468"></a><span class="lineno"> 1468</span>&#160;        self.UpdatePropertiesFromSParameters()</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160; </div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;    <span class="keyword">def </span>onEnforceAll(self):</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;        self.sp.EnforceAll(maxIterations=30,causalityThreshold=1e-5)</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;        self.UpdatePropertiesFromSParameters()</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160; </div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;    <span class="keyword">def </span>onWaveletDenoise(self):</div>
<div class="line"><a name="l01477"></a><span class="lineno"> 1477</span>&#160;        self.sp.WaveletDenoise()</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;        self.UpdatePropertiesFromSParameters()</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;        self.PlotSParameter()</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160; </div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;    <span class="keyword">def </span>onPreferences(self):</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;        <span class="keywordflow">if</span> <span class="keywordflow">not</span> hasattr(self, <span class="stringliteral">&#39;preferencesDialog&#39;</span>):</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;            self.preferencesDialog = SParameterViewerPreferencesDialog(self,<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>)</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;        <span class="keywordflow">if</span> self.preferencesDialog == <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;            self.preferencesDialog= SParameterViewerPreferencesDialog(self,<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>)</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;            <span class="keywordflow">if</span> <span class="keywordflow">not</span> self.preferencesDialog.winfo_exists():</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;                self.preferencesDialog=SParameterViewerPreferencesDialog(self,<a class="code" href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a>)</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160; </div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    <span class="keyword">def </span>onSelection(self,x):</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;        self.sp=self.spList[x][0]</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;        self.properties=SParameterProperties()</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;        self.UpdatePropertiesFromSParameters(new=<span class="keyword">True</span>)</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;        filename=self.spList[x][1]</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;        title=self.spList[x][2]</div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;        self.buttonLabels=self.spList[x][3]</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;        </div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;        self.filename=self.spList[x][1]</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;        self.fileparts=FileParts(filename)</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;        <span class="keywordflow">if</span> title <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;            <span class="keywordflow">if</span> self.fileparts.filename ==<span class="stringliteral">&#39;&#39;</span>:</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;                self.title(<span class="stringliteral">&#39;S-parameters&#39;</span>)</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;                self.title(<span class="stringliteral">&#39;S-parameters: &#39;</span>+self.fileparts.FileNameTitle())</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;        <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;            <span class="keywordflow">if</span> filename <span class="keywordflow">is</span> <span class="keywordtype">None</span>:</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;                self.title(title)</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;            <span class="keywordflow">else</span>:</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;                self.title(title+<span class="stringliteral">&#39;: &#39;</span>+self.fileparts.FileNameTitle())</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160; </div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;        sButtonsFrame = tk.Frame(self.controlsFrame, bd=1, relief=tk.SUNKEN)</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;        self.buttons=[]</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;        <span class="keywordflow">for</span> toP <span class="keywordflow">in</span> range(len(self.buttonLabels)):</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;            buttonrow=[]</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;            rowFrame=tk.Frame(sButtonsFrame)</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;            rowFrame.pack(side=tk.TOP,expand=tk.NO,fill=tk.NONE)</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;            <span class="keywordflow">for</span> fromP <span class="keywordflow">in</span> range(len(self.buttonLabels[0])):</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;                thisButton=tk.Button(rowFrame,text=self.buttonLabels[toP][fromP],width=len(self.buttonLabels[toP][fromP]),command=<span class="keyword">lambda</span> x=toP+1,y=fromP+1: self.onSelectSParameter(x,y))</div>
<div class="line"><a name="l01519"></a><span class="lineno"> 1519</span>&#160;                thisButton.pack(side=tk.LEFT,fill=tk.NONE,expand=tk.NO)</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;                buttonrow.append(thisButton)</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;            self.buttons.append(buttonrow)</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;        self.sButtonsFrame.pack_forget()</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;        self.sButtonsFrame=sButtonsFrame</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;        self.sButtonsFrame.pack(side=tk.LEFT,expand=tk.NO,fill=tk.NONE)</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;        self.update_idletasks()</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;        self.onSelectSParameter(self.toPort, self.fromPort)</div>
</div><!-- fragment --></div><!-- contents -->
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Files_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Files.xhtml">SignalIntegrity.App.Files</a></div><div class="ttdef"><b>Definition:</b> <a href="Files_8py_source.xhtml#l00001">Files.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1CalculationPropertiesProject_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1CalculationPropertiesProject.xhtml">SignalIntegrity.App.CalculationPropertiesProject</a></div><div class="ttdef"><b>Definition:</b> <a href="CalculationPropertiesProject_8py_source.xhtml#l00001">CalculationPropertiesProject.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SParameterViewerPreferencesDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SParameterViewerPreferencesDialog.xhtml">SignalIntegrity.App.SParameterViewerPreferencesDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="SParameterViewerPreferencesDialog_8py_source.xhtml#l00001">SParameterViewerPreferencesDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SParameterProperties_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SParameterProperties.xhtml">SignalIntegrity.App.SParameterProperties</a></div><div class="ttdef"><b>Definition:</b> <a href="SParameterProperties_8py_source.xhtml#l00001">SParameterProperties.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1PartProperty_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1PartProperty.xhtml">SignalIntegrity.App.PartProperty</a></div><div class="ttdef"><b>Definition:</b> <a href="PartProperty_8py_source.xhtml#l00001">PartProperty.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Preferences_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Preferences.xhtml">SignalIntegrity.App.Preferences</a></div><div class="ttdef"><b>Definition:</b> <a href="Preferences_8py_source.xhtml#l00001">Preferences.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1SParameterPropertiesDialog_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1SParameterPropertiesDialog.xhtml">SignalIntegrity.App.SParameterPropertiesDialog</a></div><div class="ttdef"><b>Definition:</b> <a href="SParameterPropertiesDialog_8py_source.xhtml#l00001">SParameterPropertiesDialog.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1ToSI_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1ToSI.xhtml">SignalIntegrity.App.ToSI</a></div><div class="ttdef"><b>Definition:</b> <a href="ToSI_8py_source.xhtml#l00001">ToSI.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1Project_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1Project.xhtml">SignalIntegrity.App.Project</a></div><div class="ttdef"><b>Definition:</b> <a href="Project_8py_source.xhtml#l00001">Project.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1Lib_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1Lib.xhtml">SignalIntegrity.Lib</a></div><div class="ttdef"><b>Definition:</b> <a href="Lib_2____init_____8py_source.xhtml#l00001">__init__.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1MenuSystemHelpers.xhtml">SignalIntegrity.App.MenuSystemHelpers</a></div><div class="ttdef"><b>Definition:</b> <a href="MenuSystemHelpers_8py_source.xhtml#l00001">MenuSystemHelpers.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1FilePicker_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1FilePicker.xhtml">SignalIntegrity.App.FilePicker</a></div><div class="ttdef"><b>Definition:</b> <a href="FilePicker_8py_source.xhtml#l00001">FilePicker.py:1</a></div></div>
<div class="ttc" id="anamespaceSignalIntegrity_1_1App_1_1InformationMessage_xhtml"><div class="ttname"><a href="namespaceSignalIntegrity_1_1App_1_1InformationMessage.xhtml">SignalIntegrity.App.InformationMessage</a></div><div class="ttdef"><b>Definition:</b> <a href="InformationMessage_8py_source.xhtml#l00001">InformationMessage.py:1</a></div></div>
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.17
</small></address>
</body>
</html>
